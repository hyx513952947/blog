{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/猴猴.png","path":"images/猴猴.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"8a96770b864ba61dafbdb9a74ecea69e6311e156","modified":1526629990706},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1526867170876},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1526867170877},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1526867170879},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1526867170880},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1526867170879},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1526867170880},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1526867170880},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1526867170880},{"_id":"themes/next/_config.yml","hash":"2b5219e099e76be588d2596fe33c7b1f7eafca0e","modified":1527061459422},{"_id":"themes/next/README.cn.md","hash":"b764aae78ffa561a9a68fdee4c6f21c3ce260fbb","modified":1526867227116},{"_id":"themes/next/README.md","hash":"4e276fb9a3c31f1259df3ea9a4b92f4a8d72714d","modified":1526867227117},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1526867170882},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1526867170882},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1526867170914},{"_id":"source/_drafts/draft.md","hash":"b472be5771163e18b109ee34e0cc62ba571bb40d","modified":1526872290586},{"_id":"source/_discarded/git学习笔记03.md","hash":"09f91074ff0c3b351ae12d1e7f2e114de4ee009c","modified":1527067307941},{"_id":"source/_discarded/网络发现.md","hash":"c4351c4195eeca0f0b808a43651c77537eb56519","modified":1527141232139},{"_id":"source/_posts/Android中的设计模式.md","hash":"09ff9f0df5f839054907b92a9eb0a8a54a4cd78e","modified":1526892986770},{"_id":"source/_posts/Android基本技术点回顾.md","hash":"b1604368e14d88a025a3408d631291fdd54cd345","modified":1527153558573},{"_id":"source/_posts/FileProvider.md","hash":"69ca4173d5bb7c2b1d42fc04934916bfc47f9df8","modified":1527155475154},{"_id":"source/_posts/alette.md","hash":"ec319528955d220b641abfcc40e0140e341322d7","modified":1527218489808},{"_id":"source/_posts/droid-statusBar.md","hash":"95372db1ea5de07e51ff4e3f6a784a8d18552eb8","modified":1527216969368},{"_id":"source/_posts/droid-打印当前行数和名称方法.md","hash":"919a2736d91789f88773400629f486a17c0d2bc5","modified":1527149765952},{"_id":"source/_posts/droid-网络连接检测.md","hash":"e9539ef5139e12767b73aa3fa8850ec56acdfacd","modified":1527153832298},{"_id":"source/_posts/hello-world.md","hash":"37c73607fd7c05d7614286d64dbf6be29edd9072","modified":1526879246869},{"_id":"source/_posts/java反射.md","hash":"4528005c3ce591a2bfbc37456e332fec0f1d6ad8","modified":1526890703296},{"_id":"source/_posts/markdown编辑器.md","hash":"7e865965162d19de9ca4a5c1e9e326fad0716d47","modified":1526959539964},{"_id":"source/_posts/ndroid-矢量图动画.md","hash":"85ab8e0dd7135a1142412609ea550aa897656756","modified":1527220343151},{"_id":"source/_posts/ourceTree.md","hash":"814532af4d5e1d9b0d48c760a50864e66db45956","modified":1527061173601},{"_id":"source/_posts/pn.md","hash":"c1c1e3d3374c781c0dbf0256e98cccc729a1b212","modified":1527233765926},{"_id":"source/_posts/post.md","hash":"e9477a6828b1ba2af7b661f79d06d15e3bf3ebd0","modified":1526879015609},{"_id":"source/_posts/t学习笔记01.md","hash":"bfac2294682cb77fe01fa0e8c6869b63ec359be4","modified":1527066752007},{"_id":"source/_posts/t学习笔记03.md","hash":"6179a2265f82d5b6c2b744f226ed1500a516a25f","modified":1527069525791},{"_id":"source/_posts/va的四种引用.md","hash":"32181850c6e874cf94505f1cf9d9f4abfec998b3","modified":1527141303340},{"_id":"source/_posts/t学习笔记02.md","hash":"b16bcf9bc6822274fed0328b57786c8332b11532","modified":1527127969065},{"_id":"source/_posts/妞妞照片.md","hash":"56d4e6306426b4fe6b1ead640c770d0fdceca2df","modified":1526889371195},{"_id":"source/_posts/局域网内-ip连接.md","hash":"d9def59f1d736e959c113877a2c54bc0ca8e51f5","modified":1527141722401},{"_id":"source/_posts/我的妞妞.md","hash":"06176ad50febd5268ca2f72f43d2ad2dee7a7e69","modified":1526885811939},{"_id":"source/_posts/模块模式设计.md","hash":"950cd661e2e639f5ddd276bd9b95474b6a6eac8e","modified":1526892827356},{"_id":"source/_posts/的几个Android学习网站.md","hash":"27ad4dcdf7c4611e0dcbed5d298a051ea20076c4","modified":1527130635304},{"_id":"source/categories/index.md","hash":"9a642533cf618eb4893369b9d1476d9f7271ec5e","modified":1526871964957},{"_id":"source/schedule/index.md","hash":"3cccca6c5146c8a762f1c6c3a5b79b22d3648f4d","modified":1526965636204},{"_id":"source/tags/index.md","hash":"8db41bfd497c89c30d423df35240018bc13633c0","modified":1526871989544},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1526867170883},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1526867170883},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1526867170884},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1526867170884},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1526867170884},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1526867170885},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1526867170885},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1526867170885},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1526867170886},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1526867170886},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1526867170887},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1526867170886},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1526867170887},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1526867170887},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1526867170888},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1526867170888},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1526867170889},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1526867170912},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1526867170913},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1526867170912},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1526867170913},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1526867170913},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1526867170914},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1526867170914},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1526867170915},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1526867170915},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1526867171026},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1526867171026},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1526867171026},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170956},{"_id":"source/_discarded/ed/ndroid-WiFi-p2p.md","hash":"adcbc334a039114e8642c701b5a71c2114afd5d3","modified":1527146169546},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1526867170889},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1526867170889},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1526867170890},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1526867170890},{"_id":"themes/next/layout/_macro/post.swig","hash":"f85b18a32e86473f76b2ed31e53da4a13ffb3f74","modified":1526889578752},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1526867170891},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1526867170891},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1526867170891},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1526867170892},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1526867170892},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1526867170892},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1526867170894},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1526867170894},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1526867170895},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1526867170895},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1526867170898},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1526867170899},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1526867170900},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1526867170907},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1526867170908},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1526867170908},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1526867170908},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1526867170909},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1526867170909},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1526867170909},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1526867170916},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1526867170916},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1526867170917},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1526867170917},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1526867170917},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1526867170918},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1526867170918},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1526867170918},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1526867170919},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1526867170956},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1526867170956},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1526867170957},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1526867170957},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1526867170958},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1526867170958},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1526867170959},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1526867170959},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1526867170959},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1526867170960},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1526867170960},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526867170961},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1526867170961},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1526867170960},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1526867170960},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1526867170961},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1526867170961},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1526867170962},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1526867170962},{"_id":"themes/next/source/images/猴猴.png","hash":"99e91ec406a671b58b952fa44ee3b491027d147c","modified":1526888968804},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170900},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170900},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170944},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170945},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170945},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170954},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1526867170955},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1526867170893},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1526867170893},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1526867170896},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1526867170896},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1526867170896},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1526867170897},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1526867170897},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1526867170898},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1526867170898},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1526867170899},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1526867170899},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1526867170900},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1526867170901},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1526867170901},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1526867170902},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1526867170902},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1526867170902},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1526867170903},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1526867170903},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1526867170903},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1526867170903},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1526867170904},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1526867170904},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1526867170904},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1526867170905},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1526867170905},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1526867170905},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1526867170906},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1526867170906},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1526867170906},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1526867170906},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1526867170907},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1526867170907},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1526867170907},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1526867170911},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1526867170911},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1526867170911},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1526867170912},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1526867170944},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1526867170944},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1526867170945},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1526867170945},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1526867170954},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1526867170954},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1526867170955},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1526867170955},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1526867170963},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1526867170963},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1526867170964},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1526867170964},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1526867170964},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1526867170965},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1526867170965},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1526867170966},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1526867170966},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1526867170967},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1526867170967},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1526867170973},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1526867170977},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1526867170978},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1526867170978},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1526867170978},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1526867170985},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1526867170985},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1526867170985},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1526867170986},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1526867170988},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1526867170987},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1526867170988},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1526867170988},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1526867170988},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1526867171003},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1526867171004},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1526867171005},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1526867171005},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1526867171005},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1526867171006},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1526867171006},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1526867171007},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1526867171007},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1526867171008},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1526867171008},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1526867171009},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1526867171009},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1526867171009},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1526867171010},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1526867171010},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1526867171010},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1526867171011},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1526867171011},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1526867171011},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1526867171011},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1526867171012},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1526867171012},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1526867171013},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1526867171013},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1526867171014},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1526867171014},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1526867171020},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1526867171021},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1526867171024},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1526867171024},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1526867171024},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1526867171004},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1526867170910},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1526867170910},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1526867170920},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1526867170920},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1526867170920},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1526867170920},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1526867170921},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1526867170927},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1526867170935},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1526867170941},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1526867170942},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1526867170942},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1526867170942},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1526867170943},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1526867170943},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1526867170943},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1526867170946},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1526867170947},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1526867170947},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1526867170947},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1526867170947},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1526867170948},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1526867170948},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1526867170948},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1526867170950},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1526867170950},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1526867227118},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1526867170951},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1526867170951},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1526867170952},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1526867170952},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1526867170953},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1526867170953},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1526867170953},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1526867170952},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1526867170971},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1526867170966},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1526867170972},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1526867170973},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526867170979},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526867170979},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526867170980},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526867170980},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526867170980},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526867170981},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1526867170983},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1526867170984},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1526867170984},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1526867170986},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1526867170987},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1526867170989},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1526867170990},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1526867170990},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1526867171020},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1526867171019},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1526867170972},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1526867171002},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1526867171002},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1526867171024},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1526867170921},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1526867170923},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1526867170923},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1526867170923},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1526867170923},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1526867170924},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1526867170924},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1526867170924},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1526867170925},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1526867170925},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1526867170925},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1526867170926},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1526867170926},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1526867170926},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1526867170927},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1526867170928},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1526867170927},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1526867170928},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1526867170928},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1526867170929},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1526867170929},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1526867170930},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1526867170929},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1526867170930},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1526867170930},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1526867170931},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1526867170930},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1526867170931},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1526867170931},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1526867170932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1526867170932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1526867170932},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1526867170933},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1526867170933},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1526867170933},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1526867170933},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1526867170934},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1526867170934},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1526867170934},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1526867170935},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1526867170935},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1526867170936},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1526867170936},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1526867170936},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1526867170937},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1526867170937},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1526867170937},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1526867170938},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1526867170938},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1526867170939},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1526867170939},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1526867170939},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1526867170940},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1526867170940},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1526867170939},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1526867170940},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1526867170940},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1526867170941},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1526867170949},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1526867170949},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1526867170951},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1526867170968},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1526867170969},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1526867170969},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1526867170970},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1526867170970},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1526867170981},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526867170981},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1526867170983},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1526867170982},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1526867170982},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1526867170983},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1526867170992},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1526867170995},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1526867171001},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1526867170977},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1526867171018},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1526867170999},{"_id":"source/_posts/妞妞照片/001.jpg","hash":"5e9c7e8d918739b3aaaa161d4bcaf32021f25a76","modified":1514023942000}],"Category":[{"name":"Android","_id":"cjhlnkywm0006x8w5icv26nzb"},{"name":"java","_id":"cjhlnkyxd000sx8w5diy7ycog"},{"name":"编辑器","_id":"cjhlnkyxi0010x8w5arpnfg0w"},{"name":"git","_id":"cjhlnkyxo0019x8w52c8kpuxb"},{"name":"Java","_id":"cjhlnkyxx001lx8w5wozgdcrd"},{"name":"照片","_id":"cjhlnkyy2001sx8w56cdez3pv"},{"name":"通用","_id":"cjhlnkyy4001yx8w55inzyap9"},{"name":"学习网站","_id":"cjhlnkyy60022x8w5jkoqxprt"}],"Data":[],"Page":[{"title":"所有分类","date":"2018-05-21T03:02:24.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 所有分类\ndate: 2018-05-21 11:02:24\ntype: \"categories\"\n---\n","updated":"2018-05-21T03:06:04.957Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjhlnkywd0001x8w5dsstzsyw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有备忘录","date":"2018-05-21T03:01:30.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: 所有备忘录\ndate: 2018-05-21 11:01:30\ntype: \"schedule\"\n---\n","updated":"2018-05-22T05:07:16.204Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cjhlnkywg0003x8w5q5fjkqz2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"所有标签","date":"2018-05-21T03:01:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 所有标签\ndate: 2018-05-21 11:01:30\ntype: \"tags\"\n---\n","updated":"2018-05-21T03:06:29.544Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjhlnkywk0005x8w5tm5g8tkv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"draft","_content":"","source":"_drafts/draft.md","raw":"---\ntitle: draft\ntags:\n---\n","slug":"draft","published":0,"date":"2018-05-22T01:56:54.877Z","updated":"2018-05-21T03:11:30.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyw80000x8w5aqdhkx3s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Android中的设计模式","date":"2018-05-21T08:54:16.000Z","_content":"（1）单例模式：\n\t\t\t简介：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\t\t\t示例：Android中的系统级服务都是通过容器的单例模式实现方式，以单例形式存在，减少了资源消耗。\n\t\t\t比如LayoutInflater Service，将这些服务以键值对的形式存储在一个HashMap容器中，用户使用时只需要根据key来获取到对应的ServiceFetcher，然后通过ServcieFetcher对象的getService函数来获取到具体的服务对象，第一次获取时会调用ServcieFetcher的createService函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。\n（2）抽象工厂模式：\n\t\t\t简介：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\t\t\t示例：Android底层对MediaPlayer的创建。MediaPlayerFactory是Android底层为了创建不同的MediaPlayer所定义的一个类。\n（3）工厂模式：\n\t\t\t简介：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。\n\t\t\t示例：BitmapFactory位图工厂，专门用来将指定的图片转换为指定的位图Bitmap。\n（4）原型模式：\n\t\t\t简介：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。\n\t\t\t示例：比如我们需要一张Bitmap的几种不同格式：ARGB_8888、RGB_565、ARGB_4444、ALAPHA_8等。那我们就可以先创建一个ARGB_8888的Bitmap作为原型，在它的基础上，通过调用Bitmap.copy(Config)来创建出其它几种格式的Bitmap。另外一个例子就是Java中所有对象都有的一个名字叫clone的方法，已经原型模式的代名词了。在系统中要创建大量的对象，这些对象之间具有几乎完全相同的功能，只是在细节上有一点儿差别。\n（5）建造者模式：\n\t\t\t简介：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\t\t\t示例：AlertDialog.Builder   ImageLoader的初始配置。\n（6）适配器模式：\n\t\t\t简介：将一个类的接口转换成客户希望的另外一个接口。\n\t\t\t示例：不同的数据提供者使用一个适配器来向一个相同的客户提供服务。\n\t\t\tListView或GridView的Adapter。\n（7）桥接模式：\n\t\t\t简介：将抽象部分与它的实现部分分离，使它们都可以独立地变化。\n\t\t\t示例：Window和WindowManager之间的关系。\n\t\t\t在FrameWork中Window和PhoneWindow构成窗口的抽象部分，其中Window类为该抽象部分的抽象接口，PhoneWindow为抽象部分具体的实现及扩展。而WindowManager则为实现部分的基类，WindowManagerImpl则为实现部分具体的逻辑实现。\n（8）装饰模式：\n\t\t\t简介：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。\n\t\t\t示例：Activity继承自ContextThemeWrapper，ContextThemeWrapper继承自ContextWrapper，ContextWrapper才是继承自Context。ContextWrapper就是我们找的装饰者。\n（9）组合模式：\n\t\t\t简介：将对象组合成树形结构以表示“部分-整体”的层次结构。\n\t\t\t示例：View和ViewGroup的组合\n（10）外观模式\n\t\t\t简介：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，统一编程接口。\n\t\t\t示例：ContextImpl\n（11）享元模式：\n\t\t\t简介：运用共享技术有效地支持大量细粒度的对象。\n\t\t\t示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。\n（12）代理模式：\n\t\t\t简介：为其他对象提供一个代理以控制对这个对象的访问。\n\t\t\t示例：所有的AIDL都一个代理模式的例子。假设一个Activity A去绑定一个Service S，那么A调用S中的每一个方法其实都是通过系统的Binder机制的中转，然后调用S中的对应方法来做到的。Binder机制就起到了代理的作用。\n（13）观察者模式：\n\t\t\t简介：一个对象发生改变时，所有信赖于它的对象自动做相应改变。\n\t\t\t示例：我们可以通过BaseAdapter.registerDataSetObserver和BaseAdapter.unregisterDataSetObserver两方法来向BaseAdater注册、注销一个DataSetObserver。这个过程中，DataSetObserver就是一个观察者，它一旦发现BaseAdapter内部数据有变量，就会通过回调方法DataSetObserver.onChanged和DataSetObserver.onInvalidated来通知DataSetObserver的实现类。事件通知也是观察者模式。\n（14）中介者模式：\n\t\t\t简介：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n\t\t\t示例：Binder机制。\n(15)访问者模式:\n\t\t\t简介：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\t\t\t示例：编译时注解中的ElementVisitor中定义多个Visit接口，每个接口处理一种数据类型，这就是典型的访问者模式，访问者模式正好解决了数据结构和数据操作分离的问题，避免某些操作污染了数据对象类。\n（16） 解释器模式：\n\t\t\t简介：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\t\t\t示例：PackageParser这个类对AndroidManifest.xml这个配置文件的解析过程，\n（17）迭代器模式\n\t\t\t简介：提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。\n\t\t\t示例：在Android中除了各种数据结构体，如List，Map，等包含的迭代器以外，Android源码中也提供了迭代器遍历模式，比如数据库查询使用Cursor，当我们使用SQLiteDataBase的query方法查询数据库时，会返回一个Cursor游标对象，该游标对象实际上就是一个具体的迭代器。\n（18）备忘录模式\n\t\t\t简介：不需要了解对象的内部结构的情况下备份对象的状态，方便以后恢复。\n\t\t\t示例：Activity的onSaveInstanceState和onRestoreInstanceState就是通过Bundle这种序列化的数据结构来存储Activity的状态，至于其中存储的数据结构，这两个方法不用关心。\n（19）责任链模式\n\t\t\t简介：有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。\n\t\t\t示例:  责任链模式在Android源码中比较类似的实现莫过于对事件的分发处理，每当用户接触屏幕时候，Android都会将对应的事件包装成一个事件对象从ViewTree的顶部至上而下的分发传递。ViewGroup事件投递的递归调用就类似一条责任链，一旦寻找到责任者，那么就由责任者持有并消费该次事件，具体的体现在View的onTouchEvent方法中的返回值，如果OnTouchEvent返回false，那么意味着当前View不会是该次事件的责任人，将不会对该事件持有。\n（20）状态模式：\n\t\t\t简介：状态发生改变时，行为改变。\n\t\t\t示例：View.onVisibilityChanged方法，就是提供了一个状态模式的实现，允许在View的visibility发生改变时，引发执行onVisibilityChanged方法中的动作。\n（21）策略模式\n\t\t\t简介：定义了一系列封装了算法、行为的对象，他们可以相互替换。\n\t\t\t示例：Java.util.List就是定义了一个增（add）、删（remove）、改（set）、查（indexOf）策略，至于实现这个策略的ArrayList、LinkedList等类，只是在具体实现时采用了不同的算法。但因为它们策略一样，不考虑速度的情况下，使用时完全可以互相替换使用。\n（22）命令模式\n\t\t\t简介：把请求封装成一个对象发送出去，方便定制、排队、取消。\n\t\t\t示例：Handler.post后Handler.handleMessage。\n（23）享元模式\n\t\t\t简介：运用共享技术有效地支持大量细粒度的对象。\n\t\t\t示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。","source":"_posts/Android中的设计模式.md","raw":"---\ntitle: Android中的设计模式\ndate: 2018-05-21 16:54:16\ntags: \"设计模式\"\ncategories: \"Android\"\n---\n（1）单例模式：\n\t\t\t简介：保证一个类仅有一个实例，并提供一个访问它的全局访问点。\n\t\t\t示例：Android中的系统级服务都是通过容器的单例模式实现方式，以单例形式存在，减少了资源消耗。\n\t\t\t比如LayoutInflater Service，将这些服务以键值对的形式存储在一个HashMap容器中，用户使用时只需要根据key来获取到对应的ServiceFetcher，然后通过ServcieFetcher对象的getService函数来获取到具体的服务对象，第一次获取时会调用ServcieFetcher的createService函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。\n（2）抽象工厂模式：\n\t\t\t简介：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\t\t\t示例：Android底层对MediaPlayer的创建。MediaPlayerFactory是Android底层为了创建不同的MediaPlayer所定义的一个类。\n（3）工厂模式：\n\t\t\t简介：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。\n\t\t\t示例：BitmapFactory位图工厂，专门用来将指定的图片转换为指定的位图Bitmap。\n（4）原型模式：\n\t\t\t简介：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。\n\t\t\t示例：比如我们需要一张Bitmap的几种不同格式：ARGB_8888、RGB_565、ARGB_4444、ALAPHA_8等。那我们就可以先创建一个ARGB_8888的Bitmap作为原型，在它的基础上，通过调用Bitmap.copy(Config)来创建出其它几种格式的Bitmap。另外一个例子就是Java中所有对象都有的一个名字叫clone的方法，已经原型模式的代名词了。在系统中要创建大量的对象，这些对象之间具有几乎完全相同的功能，只是在细节上有一点儿差别。\n（5）建造者模式：\n\t\t\t简介：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\t\t\t示例：AlertDialog.Builder   ImageLoader的初始配置。\n（6）适配器模式：\n\t\t\t简介：将一个类的接口转换成客户希望的另外一个接口。\n\t\t\t示例：不同的数据提供者使用一个适配器来向一个相同的客户提供服务。\n\t\t\tListView或GridView的Adapter。\n（7）桥接模式：\n\t\t\t简介：将抽象部分与它的实现部分分离，使它们都可以独立地变化。\n\t\t\t示例：Window和WindowManager之间的关系。\n\t\t\t在FrameWork中Window和PhoneWindow构成窗口的抽象部分，其中Window类为该抽象部分的抽象接口，PhoneWindow为抽象部分具体的实现及扩展。而WindowManager则为实现部分的基类，WindowManagerImpl则为实现部分具体的逻辑实现。\n（8）装饰模式：\n\t\t\t简介：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。\n\t\t\t示例：Activity继承自ContextThemeWrapper，ContextThemeWrapper继承自ContextWrapper，ContextWrapper才是继承自Context。ContextWrapper就是我们找的装饰者。\n（9）组合模式：\n\t\t\t简介：将对象组合成树形结构以表示“部分-整体”的层次结构。\n\t\t\t示例：View和ViewGroup的组合\n（10）外观模式\n\t\t\t简介：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，统一编程接口。\n\t\t\t示例：ContextImpl\n（11）享元模式：\n\t\t\t简介：运用共享技术有效地支持大量细粒度的对象。\n\t\t\t示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。\n（12）代理模式：\n\t\t\t简介：为其他对象提供一个代理以控制对这个对象的访问。\n\t\t\t示例：所有的AIDL都一个代理模式的例子。假设一个Activity A去绑定一个Service S，那么A调用S中的每一个方法其实都是通过系统的Binder机制的中转，然后调用S中的对应方法来做到的。Binder机制就起到了代理的作用。\n（13）观察者模式：\n\t\t\t简介：一个对象发生改变时，所有信赖于它的对象自动做相应改变。\n\t\t\t示例：我们可以通过BaseAdapter.registerDataSetObserver和BaseAdapter.unregisterDataSetObserver两方法来向BaseAdater注册、注销一个DataSetObserver。这个过程中，DataSetObserver就是一个观察者，它一旦发现BaseAdapter内部数据有变量，就会通过回调方法DataSetObserver.onChanged和DataSetObserver.onInvalidated来通知DataSetObserver的实现类。事件通知也是观察者模式。\n（14）中介者模式：\n\t\t\t简介：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n\t\t\t示例：Binder机制。\n(15)访问者模式:\n\t\t\t简介：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\t\t\t示例：编译时注解中的ElementVisitor中定义多个Visit接口，每个接口处理一种数据类型，这就是典型的访问者模式，访问者模式正好解决了数据结构和数据操作分离的问题，避免某些操作污染了数据对象类。\n（16） 解释器模式：\n\t\t\t简介：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\t\t\t示例：PackageParser这个类对AndroidManifest.xml这个配置文件的解析过程，\n（17）迭代器模式\n\t\t\t简介：提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。\n\t\t\t示例：在Android中除了各种数据结构体，如List，Map，等包含的迭代器以外，Android源码中也提供了迭代器遍历模式，比如数据库查询使用Cursor，当我们使用SQLiteDataBase的query方法查询数据库时，会返回一个Cursor游标对象，该游标对象实际上就是一个具体的迭代器。\n（18）备忘录模式\n\t\t\t简介：不需要了解对象的内部结构的情况下备份对象的状态，方便以后恢复。\n\t\t\t示例：Activity的onSaveInstanceState和onRestoreInstanceState就是通过Bundle这种序列化的数据结构来存储Activity的状态，至于其中存储的数据结构，这两个方法不用关心。\n（19）责任链模式\n\t\t\t简介：有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。\n\t\t\t示例:  责任链模式在Android源码中比较类似的实现莫过于对事件的分发处理，每当用户接触屏幕时候，Android都会将对应的事件包装成一个事件对象从ViewTree的顶部至上而下的分发传递。ViewGroup事件投递的递归调用就类似一条责任链，一旦寻找到责任者，那么就由责任者持有并消费该次事件，具体的体现在View的onTouchEvent方法中的返回值，如果OnTouchEvent返回false，那么意味着当前View不会是该次事件的责任人，将不会对该事件持有。\n（20）状态模式：\n\t\t\t简介：状态发生改变时，行为改变。\n\t\t\t示例：View.onVisibilityChanged方法，就是提供了一个状态模式的实现，允许在View的visibility发生改变时，引发执行onVisibilityChanged方法中的动作。\n（21）策略模式\n\t\t\t简介：定义了一系列封装了算法、行为的对象，他们可以相互替换。\n\t\t\t示例：Java.util.List就是定义了一个增（add）、删（remove）、改（set）、查（indexOf）策略，至于实现这个策略的ArrayList、LinkedList等类，只是在具体实现时采用了不同的算法。但因为它们策略一样，不考虑速度的情况下，使用时完全可以互相替换使用。\n（22）命令模式\n\t\t\t简介：把请求封装成一个对象发送出去，方便定制、排队、取消。\n\t\t\t示例：Handler.post后Handler.handleMessage。\n（23）享元模式\n\t\t\t简介：运用共享技术有效地支持大量细粒度的对象。\n\t\t\t示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。","slug":"Android中的设计模式","published":1,"updated":"2018-05-21T08:56:26.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkywe0002x8w56l08tmnl","content":"<p>（1）单例模式：<br>            简介：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>            示例：Android中的系统级服务都是通过容器的单例模式实现方式，以单例形式存在，减少了资源消耗。<br>            比如LayoutInflater Service，将这些服务以键值对的形式存储在一个HashMap容器中，用户使用时只需要根据key来获取到对应的ServiceFetcher，然后通过ServcieFetcher对象的getService函数来获取到具体的服务对象，第一次获取时会调用ServcieFetcher的createService函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。<br>（2）抽象工厂模式：<br>            简介：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br>            示例：Android底层对MediaPlayer的创建。MediaPlayerFactory是Android底层为了创建不同的MediaPlayer所定义的一个类。<br>（3）工厂模式：<br>            简介：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。<br>            示例：BitmapFactory位图工厂，专门用来将指定的图片转换为指定的位图Bitmap。<br>（4）原型模式：<br>            简介：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。<br>            示例：比如我们需要一张Bitmap的几种不同格式：ARGB_8888、RGB_565、ARGB_4444、ALAPHA_8等。那我们就可以先创建一个ARGB_8888的Bitmap作为原型，在它的基础上，通过调用Bitmap.copy(Config)来创建出其它几种格式的Bitmap。另外一个例子就是Java中所有对象都有的一个名字叫clone的方法，已经原型模式的代名词了。在系统中要创建大量的对象，这些对象之间具有几乎完全相同的功能，只是在细节上有一点儿差别。<br>（5）建造者模式：<br>            简介：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>            示例：AlertDialog.Builder   ImageLoader的初始配置。<br>（6）适配器模式：<br>            简介：将一个类的接口转换成客户希望的另外一个接口。<br>            示例：不同的数据提供者使用一个适配器来向一个相同的客户提供服务。<br>            ListView或GridView的Adapter。<br>（7）桥接模式：<br>            简介：将抽象部分与它的实现部分分离，使它们都可以独立地变化。<br>            示例：Window和WindowManager之间的关系。<br>            在FrameWork中Window和PhoneWindow构成窗口的抽象部分，其中Window类为该抽象部分的抽象接口，PhoneWindow为抽象部分具体的实现及扩展。而WindowManager则为实现部分的基类，WindowManagerImpl则为实现部分具体的逻辑实现。<br>（8）装饰模式：<br>            简介：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。<br>            示例：Activity继承自ContextThemeWrapper，ContextThemeWrapper继承自ContextWrapper，ContextWrapper才是继承自Context。ContextWrapper就是我们找的装饰者。<br>（9）组合模式：<br>            简介：将对象组合成树形结构以表示“部分-整体”的层次结构。<br>            示例：View和ViewGroup的组合<br>（10）外观模式<br>            简介：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，统一编程接口。<br>            示例：ContextImpl<br>（11）享元模式：<br>            简介：运用共享技术有效地支持大量细粒度的对象。<br>            示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。<br>（12）代理模式：<br>            简介：为其他对象提供一个代理以控制对这个对象的访问。<br>            示例：所有的AIDL都一个代理模式的例子。假设一个Activity A去绑定一个Service S，那么A调用S中的每一个方法其实都是通过系统的Binder机制的中转，然后调用S中的对应方法来做到的。Binder机制就起到了代理的作用。<br>（13）观察者模式：<br>            简介：一个对象发生改变时，所有信赖于它的对象自动做相应改变。<br>            示例：我们可以通过BaseAdapter.registerDataSetObserver和BaseAdapter.unregisterDataSetObserver两方法来向BaseAdater注册、注销一个DataSetObserver。这个过程中，DataSetObserver就是一个观察者，它一旦发现BaseAdapter内部数据有变量，就会通过回调方法DataSetObserver.onChanged和DataSetObserver.onInvalidated来通知DataSetObserver的实现类。事件通知也是观察者模式。<br>（14）中介者模式：<br>            简介：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br>            示例：Binder机制。<br>(15)访问者模式:<br>            简介：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。<br>            示例：编译时注解中的ElementVisitor中定义多个Visit接口，每个接口处理一种数据类型，这就是典型的访问者模式，访问者模式正好解决了数据结构和数据操作分离的问题，避免某些操作污染了数据对象类。<br>（16） 解释器模式：<br>            简介：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。<br>            示例：PackageParser这个类对AndroidManifest.xml这个配置文件的解析过程，<br>（17）迭代器模式<br>            简介：提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。<br>            示例：在Android中除了各种数据结构体，如List，Map，等包含的迭代器以外，Android源码中也提供了迭代器遍历模式，比如数据库查询使用Cursor，当我们使用SQLiteDataBase的query方法查询数据库时，会返回一个Cursor游标对象，该游标对象实际上就是一个具体的迭代器。<br>（18）备忘录模式<br>            简介：不需要了解对象的内部结构的情况下备份对象的状态，方便以后恢复。<br>            示例：Activity的onSaveInstanceState和onRestoreInstanceState就是通过Bundle这种序列化的数据结构来存储Activity的状态，至于其中存储的数据结构，这两个方法不用关心。<br>（19）责任链模式<br>            简介：有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。<br>            示例:  责任链模式在Android源码中比较类似的实现莫过于对事件的分发处理，每当用户接触屏幕时候，Android都会将对应的事件包装成一个事件对象从ViewTree的顶部至上而下的分发传递。ViewGroup事件投递的递归调用就类似一条责任链，一旦寻找到责任者，那么就由责任者持有并消费该次事件，具体的体现在View的onTouchEvent方法中的返回值，如果OnTouchEvent返回false，那么意味着当前View不会是该次事件的责任人，将不会对该事件持有。<br>（20）状态模式：<br>            简介：状态发生改变时，行为改变。<br>            示例：View.onVisibilityChanged方法，就是提供了一个状态模式的实现，允许在View的visibility发生改变时，引发执行onVisibilityChanged方法中的动作。<br>（21）策略模式<br>            简介：定义了一系列封装了算法、行为的对象，他们可以相互替换。<br>            示例：Java.util.List就是定义了一个增（add）、删（remove）、改（set）、查（indexOf）策略，至于实现这个策略的ArrayList、LinkedList等类，只是在具体实现时采用了不同的算法。但因为它们策略一样，不考虑速度的情况下，使用时完全可以互相替换使用。<br>（22）命令模式<br>            简介：把请求封装成一个对象发送出去，方便定制、排队、取消。<br>            示例：Handler.post后Handler.handleMessage。<br>（23）享元模式<br>            简介：运用共享技术有效地支持大量细粒度的对象。<br>            示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>（1）单例模式：<br>            简介：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>            示例：Android中的系统级服务都是通过容器的单例模式实现方式，以单例形式存在，减少了资源消耗。<br>            比如LayoutInflater Service，将这些服务以键值对的形式存储在一个HashMap容器中，用户使用时只需要根据key来获取到对应的ServiceFetcher，然后通过ServcieFetcher对象的getService函数来获取到具体的服务对象，第一次获取时会调用ServcieFetcher的createService函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。<br>（2）抽象工厂模式：<br>            简介：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br>            示例：Android底层对MediaPlayer的创建。MediaPlayerFactory是Android底层为了创建不同的MediaPlayer所定义的一个类。<br>（3）工厂模式：<br>            简介：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。<br>            示例：BitmapFactory位图工厂，专门用来将指定的图片转换为指定的位图Bitmap。<br>（4）原型模式：<br>            简介：用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。<br>            示例：比如我们需要一张Bitmap的几种不同格式：ARGB_8888、RGB_565、ARGB_4444、ALAPHA_8等。那我们就可以先创建一个ARGB_8888的Bitmap作为原型，在它的基础上，通过调用Bitmap.copy(Config)来创建出其它几种格式的Bitmap。另外一个例子就是Java中所有对象都有的一个名字叫clone的方法，已经原型模式的代名词了。在系统中要创建大量的对象，这些对象之间具有几乎完全相同的功能，只是在细节上有一点儿差别。<br>（5）建造者模式：<br>            简介：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>            示例：AlertDialog.Builder   ImageLoader的初始配置。<br>（6）适配器模式：<br>            简介：将一个类的接口转换成客户希望的另外一个接口。<br>            示例：不同的数据提供者使用一个适配器来向一个相同的客户提供服务。<br>            ListView或GridView的Adapter。<br>（7）桥接模式：<br>            简介：将抽象部分与它的实现部分分离，使它们都可以独立地变化。<br>            示例：Window和WindowManager之间的关系。<br>            在FrameWork中Window和PhoneWindow构成窗口的抽象部分，其中Window类为该抽象部分的抽象接口，PhoneWindow为抽象部分具体的实现及扩展。而WindowManager则为实现部分的基类，WindowManagerImpl则为实现部分具体的逻辑实现。<br>（8）装饰模式：<br>            简介：动态地给一个对象添加一些额外的职责。就扩展功能而言， 它比生成子类方式更为灵活。<br>            示例：Activity继承自ContextThemeWrapper，ContextThemeWrapper继承自ContextWrapper，ContextWrapper才是继承自Context。ContextWrapper就是我们找的装饰者。<br>（9）组合模式：<br>            简介：将对象组合成树形结构以表示“部分-整体”的层次结构。<br>            示例：View和ViewGroup的组合<br>（10）外观模式<br>            简介：为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，统一编程接口。<br>            示例：ContextImpl<br>（11）享元模式：<br>            简介：运用共享技术有效地支持大量细粒度的对象。<br>            示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。<br>（12）代理模式：<br>            简介：为其他对象提供一个代理以控制对这个对象的访问。<br>            示例：所有的AIDL都一个代理模式的例子。假设一个Activity A去绑定一个Service S，那么A调用S中的每一个方法其实都是通过系统的Binder机制的中转，然后调用S中的对应方法来做到的。Binder机制就起到了代理的作用。<br>（13）观察者模式：<br>            简介：一个对象发生改变时，所有信赖于它的对象自动做相应改变。<br>            示例：我们可以通过BaseAdapter.registerDataSetObserver和BaseAdapter.unregisterDataSetObserver两方法来向BaseAdater注册、注销一个DataSetObserver。这个过程中，DataSetObserver就是一个观察者，它一旦发现BaseAdapter内部数据有变量，就会通过回调方法DataSetObserver.onChanged和DataSetObserver.onInvalidated来通知DataSetObserver的实现类。事件通知也是观察者模式。<br>（14）中介者模式：<br>            简介：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。<br>            示例：Binder机制。<br>(15)访问者模式:<br>            简介：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。<br>            示例：编译时注解中的ElementVisitor中定义多个Visit接口，每个接口处理一种数据类型，这就是典型的访问者模式，访问者模式正好解决了数据结构和数据操作分离的问题，避免某些操作污染了数据对象类。<br>（16） 解释器模式：<br>            简介：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。<br>            示例：PackageParser这个类对AndroidManifest.xml这个配置文件的解析过程，<br>（17）迭代器模式<br>            简介：提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。<br>            示例：在Android中除了各种数据结构体，如List，Map，等包含的迭代器以外，Android源码中也提供了迭代器遍历模式，比如数据库查询使用Cursor，当我们使用SQLiteDataBase的query方法查询数据库时，会返回一个Cursor游标对象，该游标对象实际上就是一个具体的迭代器。<br>（18）备忘录模式<br>            简介：不需要了解对象的内部结构的情况下备份对象的状态，方便以后恢复。<br>            示例：Activity的onSaveInstanceState和onRestoreInstanceState就是通过Bundle这种序列化的数据结构来存储Activity的状态，至于其中存储的数据结构，这两个方法不用关心。<br>（19）责任链模式<br>            简介：有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。<br>            示例:  责任链模式在Android源码中比较类似的实现莫过于对事件的分发处理，每当用户接触屏幕时候，Android都会将对应的事件包装成一个事件对象从ViewTree的顶部至上而下的分发传递。ViewGroup事件投递的递归调用就类似一条责任链，一旦寻找到责任者，那么就由责任者持有并消费该次事件，具体的体现在View的onTouchEvent方法中的返回值，如果OnTouchEvent返回false，那么意味着当前View不会是该次事件的责任人，将不会对该事件持有。<br>（20）状态模式：<br>            简介：状态发生改变时，行为改变。<br>            示例：View.onVisibilityChanged方法，就是提供了一个状态模式的实现，允许在View的visibility发生改变时，引发执行onVisibilityChanged方法中的动作。<br>（21）策略模式<br>            简介：定义了一系列封装了算法、行为的对象，他们可以相互替换。<br>            示例：Java.util.List就是定义了一个增（add）、删（remove）、改（set）、查（indexOf）策略，至于实现这个策略的ArrayList、LinkedList等类，只是在具体实现时采用了不同的算法。但因为它们策略一样，不考虑速度的情况下，使用时完全可以互相替换使用。<br>（22）命令模式<br>            简介：把请求封装成一个对象发送出去，方便定制、排队、取消。<br>            示例：Handler.post后Handler.handleMessage。<br>（23）享元模式<br>            简介：运用共享技术有效地支持大量细粒度的对象。<br>            示例：Message.obtainMessage通过重用Message对象来避免大量的Message对象被频繁的创建和销毁。</p>\n"},{"title":"Android 基本技术点无线设备","author":"侯大帅","date":"2018-05-24T05:39:00.000Z","_content":"### 无线连接设备\n>1. Network Service Discovery:NSD网络服务发现。\n2. WiFi建立P2P连接\n3. 使用WiFi P2P服务\n\n#### NSD网络发现\n* NsdManager\n>管理涉及到服务注册、监听器、取消服务等，当业务完成要及时取消注册服务(取消注册、关闭搜索服务)，防止占用资源\n\n\t- registerService\n    \t\t注册监听器\n    - resolveService\n    \t\t解析监听器\n    - discoverServices\n    \t\t搜索可发现服务\n* NsdServiceInfo\n\t\t注册服务的信息\n        - setServiceName\n        - setPort\n        - setServiceType\n        不推荐硬编码设置端口号，建议使用这种：\n        ServerSocket sock = new ServerSocket(0);  \n        port = sock.getLocalPort();  \n        sock.close();  \n        其中的服务类型写法：指定应用使用的协议和传输层。语法是“_< protocol >._< transportlayer >”\n* NsdManager.DiscoveryListener\n\t\tmDiscoveryListener = new NsdManager.DiscoveryListener() {\n\n            //  Called as soon as service discovery begins.\n            @Override\n            public void onDiscoveryStarted(String regType) {\n                Log.d(TAG, \"Service discovery started\");\n            }\n\n            @Override\n            public void onServiceFound(NsdServiceInfo service) {\n                // A service was found!  Do something with it.\n                Log.d(TAG, \"Service discovery success\" + service);\n                if (!service.getServiceType().equals(\"_http._tcp.\")) {\n                    // Service type is the string containing the protocol and\n                    // transport layer for this service.\n                    Log.d(TAG, \"Unknown Service Type: \" + service.getServiceType());\n                } else if (service.getServiceName().equals(mServiceName)) {\n                    // The name of the service tells the user what they'd be\n                    // connecting to. It could be \"Bob's Chat App\".\n                    Log.d(TAG, \"Same machine: \" + mServiceName);\n                } else if (service.getServiceName().contains(\"NsdChat\")){\n                    mNsdManager.resolveService(service, mResolveListener);\n                }\n            }\n\n            @Override\n            public void onServiceLost(NsdServiceInfo service) {\n                // When the network service is no longer available.\n                // Internal bookkeeping code goes here.\n                Log.e(TAG, \"service lost\" + service);\n            }\n\n            @Override\n            public void onDiscoveryStopped(String serviceType) {\n                Log.i(TAG, \"Discovery stopped: \" + serviceType);\n            }\n\n            @Override\n            public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n                Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n                mNsdManager.stopServiceDiscovery(this);\n            }\n\n            @Override\n            public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n                Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n                mNsdManager.stopServiceDiscovery(this);\n            }\n        };\n* NsdManager.RegistrationListener\n\t\tmRegistrationListener = new NsdManager.RegistrationListener() {\n\n            @Override\n            public void onServiceRegistered(NsdServiceInfo NsdServiceInfo) {\n                // Save the service name.  Android may have changed it in order to\n                // resolve a conflict, so update the name you initially requested\n                // with the name Android actually used.\n                mServiceName = NsdServiceInfo.getServiceName();\n            }\n\n            @Override\n            public void onRegistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n                // Registration failed!  Put debugging code here to determine why.\n            }\n\n            @Override\n            public void onServiceUnregistered(NsdServiceInfo arg0) {\n                // Service has been unregistered.  This only happens when you call\n                // NsdManager.unregisterService() and pass in this listener.\n            }\n\n            @Override\n            public void onUnregistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n                // Unregistration failed.  Put debugging code here to determine why.\n            }\n        };\n* NsdManager.ResolveListener\n\t\t mResolveListener = new NsdManager.ResolveListener() {\n\n            @Override\n            public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n                // Called when the resolve fails.  Use the error code to debug.\n                Log.e(TAG, \"Resolve failed\" + errorCode);\n            }\n\n            @Override\n            public void onServiceResolved(NsdServiceInfo serviceInfo) {\n                Log.e(TAG, \"Resolve Succeeded. \" + serviceInfo);\n\n                if (serviceInfo.getServiceName().equals(mServiceName)) {\n                    Log.d(TAG, \"Same IP.\");\n                    return;\n                }\n            }\n        };\n  大致流程：注册本机服务 -> 注册监听 -> 注解解析 -> 搜索发现服务 -> 解析可发现的 -> 获取ip 端口号 -> 连接\n \n ----\n#### WiFi p2p连接\n> p2p不需要访问网络，但是会使用java中的socket，socket需网络权限(  CHANGE_WIFI_STATE、ACCESS_WIFI_STATE、INTERNET)\n\n- 设置广播接收器和p2p管理器\n\t首先注册广播，监听每次的wifi p2p事件变化，主要监听`WIFI_P2P_STATE_CHANGED_ACTION Wi-Fi P2P　是否开启`，`WIFI_P2P_PEERS_CHANGED_ACTION 对等节点（peer）列表发生了变化`,`WIFI_P2P_CONNECTION_CHANGED_ACTION 连接状态发生了改变`,`WIFI_P2P_THIS_DEVICE_CHANGED_ACTION 设备的详细配置发生了变化`这些广播，这些广播定义在`WifiP2pManager`类中。\n    实例化`Channel`对象，在后续的方法中基本都需要用到，`WifiP2pManager`的方法基本都需要这个，应该是传递数据封装数据用的。\n    \n      mChannel = mManager.initialize(this, getMainLooper(), null);\n        \n- 初始化对等节点发现（Peer Discovery）\n \t\n    discoverPeers() 搜索设备\n\n- 基本概念\n\t  WPS是啥？？？？：\n      （Wi-Fi Protected Setup，Wi-Fi保护设置）（有的叫做AOSS、有的叫做QSS，不过功能都一致。）是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线局域网的安装及安全性能配置工作。在传统方式下，用户新建一个无线网络时，必须在接入点手动设置网络名（SSID）和安全密钥，然后在客户端验证密钥以阻止“不速之客”的闯入。这整个过程需要用户具备Wi-Fi设备的背景知识和修改必要配置的能力。Wi- Fi Protected Setup能帮助用户自动设置网络名（SSID）、配置强大的WPA数据编码及认证功能，用户只需输入个人信息码（PIN方法）或按下按钮（按钮设置，或称PBC），即能安全地连入WLAN。这大大简化了无线安全设置的操作。Wi-Fi Protected Setup支持多种通过Wi-Fi认证的802.11产品，包括接入点、无线适配器、Wi-Fi电话以及其他消费性电子设备。\n      WPS分为PBC(BUTTON)和PIN两种方式：\n      A PBC: 按WPS按钮实现WPS安全连接.\n\t\t在AP中，在WPS设置中,设置为启用.\n\t\t按一下客户端(无线网卡)上的WPS按键,搜索WPS网络.\n\t\t按一下AP上的WPS按键,WPS开始链接协商,片刻后WPS安全连接成功建立.\n\t  B PIN\n\t    B1) PIN(Internal Registra, 相对于AP而言)：通过在路由器中输入客户端PIN码来实现WPS安全连接.\n\t\t 在WPS设置中,把状态设置为启用.\n     \t打开客户端WPS设置软件,选择在路由器中输入PIN的方式连接,同时软件上还会显示客户端当前的PIN码.\n    \t 打开路由器界面,在WPS模式里选择PIN模式,然后输入客户端的PIN码,点添加新设备,一会儿后,WPS安全连接成功建立.\n \t\tB2) PIN(External Registra, 相对于AP而言)：通过输入AP的PIN码实现WPS安全连接.在AP中，在WPS设置中,设置为启用.  记住AP的PIN码,然后打开客户端（无线网卡）WPS设置软件,选择以AP的PIN码来进行连接.\n        输入完PIN码后,点下一步,一会儿后,WPS安全连接成功建立.\n\n- 代码\n\n\n\tpublic class WifiP2PActivity extends AppCompatActivity {\n    String TAG = \" WifiP2P\";\n    WifiP2pManager mWifiP2pManager;\n    Channel mChannel;\n    IntentFilter mIntentFilter;\n    WifiP2PBReciver mReciver;\n    List<WifiP2pDevice> peers = new ArrayList();\n    WifiP2pConfig mWifiP2pConfig;\n    //获取设备列表\n    private WifiP2pManager.PeerListListener peerListListener = new WifiP2pManager.PeerListListener() {\n        @Override\n        public void onPeersAvailable(WifiP2pDeviceList peerList) {\n            // 获取设备列表 peerList.getDeviceList();\n            Log.i(TAG,\"获取的对等节点列表：\"+peerList.toString());\n            peers.clear();\n            peers.addAll(peerList.getDeviceList());\n            // 连接 不应该在这写，这是动态变化的，应该手动选择时从保存的对等节点列表中获取信息，去连接\n            mWifiP2pConfig = new WifiP2pConfig();\n            mWifiP2pConfig.deviceAddress = peers.get(0).deviceAddress;\n            mWifiP2pConfig.wps.setup = WpsInfo.PBC;\n            mWifiP2pManager.connect(mChannel, mWifiP2pConfig, new WifiP2pManager.ActionListener() {\n                @Override\n                public void onSuccess() {\n                    Log.i(TAG,\"连接成功了\");\n                }\n\n                @Override\n                public void onFailure(int reason) {\n                    Log.i(TAG,\"连接失败了:\"+reason);\n                }\n            });\n        }\n    };\n    WifiP2pManager.ConnectionInfoListener connectionInfoListener = new WifiP2pManager.ConnectionInfoListener() {\n        @Override\n        public void onConnectionInfoAvailable(WifiP2pInfo info) {\n            // InetAddress from WifiP2pInfo struct.\n            //当有多个设备同时试图连接到一台设备时（例如多人游戏或者聊天群），这一台设备将被指定为“群主”（group owner）。\n            String groupOwnerAddress = info.groupOwnerAddress.getHostAddress();\n            // After the group negotiation, we can determine the group owner.\n            if (info.groupFormed && info.isGroupOwner) {\n                // Do whatever tasks are specific to the group owner.\n                // One common case is creating a server thread and accepting\n                // incoming connections.\n            } else if (info.groupFormed) {\n                // The other device acts as the client. In this case,\n                // you'll want to create a client thread that connects to the group\n                // owner.\n            }\n        }\n    };\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_wifi_p2_p);\n\n        mIntentFilter = new IntentFilter();\n        //连接状态发生了改变\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n        //　指示设备的详细配置发生了变化\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n        //代表对等节点（peer）列表发生了变化\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n        //　指示　Wi-Fi P2P　是否开启\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n        mWifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n\n        mChannel = mWifiP2pManager.initialize(this, getMainLooper(), new WifiP2pManager.ChannelListener() {\n            @Override\n            public void onChannelDisconnected() {\n                Log.i(TAG,\"通道断开\");\n            }\n        });\n        //搜索对等节点 peers\n        mWifiP2pManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n            @Override\n            public void onSuccess() {\n                Log.i(TAG,\"搜索成功！\");\n            }\n\n            @Override\n            public void onFailure(int reason) {\n                //WifiP2pManager 中的失败值\n                /*** Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the operation failed due to an internal error.\n                */int ERROR               = 0;\n\n                /**\n                 * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the operation failed because p2p is unsupported on the device.\n                 */int P2P_UNSUPPORTED     = 1;\n                /**\n                 * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the operation failed because the framework is busy and\n                 * unable to service the request\n                 */int BUSY = 2;\n                /**\n                 * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the {@link #discoverServices} failed because no service\n                 * requests are added. Use {@link #addServiceRequest} to add a service\n                 * request.\n                 */int NO_SERVICE_REQUESTS = 3;\n                Log.e(TAG,\"搜索失败！\"+reason);\n            }\n        });\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        //注册接受wifi p2p 状态变化广播\n        mReciver = new WifiP2PBReciver();\n        getApplicationContext().registerReceiver(mReciver,mIntentFilter);\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        try{\n            unregisterReceiver(mReciver);\n        }catch (Exception e){\n\n        }\n    }\n\n    class WifiP2PBReciver extends BroadcastReceiver{\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String action = intent.getAction();\n            if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n                // Determine if Wifi P2P mode is enabled or not, alert\n                // the Activity.\n                int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n\n                if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n\n                } else {\n\n                }\n            } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n                // The peer list has changed!  We should probably do something about\n                // that.\n               //在此处获取设备列表变化后的数据\n                mWifiP2pManager.requestPeers(mChannel,peerListListener);\n\n            } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n                // Connection state changed!  We should probably do something about\n                // that.\n                NetworkInfo networkInfo = (NetworkInfo) intent\n                        .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n                if (networkInfo.isConnected()) {\n\n                    // We are connected with the other device, request connection\n                    // info to find group owner IP\n\n                    mWifiP2pManager.requestConnectionInfo(mChannel, connectionInfoListener);\n                }\n\n            } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n                WifiP2pDevice device = (WifiP2pDevice) intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);\n\n            }\n        }\n    }\n    }\n---- \n### WiFi P2P 服务发现\n\n   - 首先在本地注册一个服务，服务注册是要将服务类型、服务信息封装到WifiP2pServiceInfo中，再通过WifiP2pManager将服务添加到本地，本地服务添加后注册监听DnsSdTxtRecordListener来实时监听record记录数据，注册DnsSdServiceResponseListener接收服务的实际描述和连接的信息，前者处理记录连接的服务信息用来跟后者做对应关系处理。前者给你一组对他的服务的描述信息，然后在后者进行匹配，将描述信息与实际的硬件信息做匹配，把处理过的数据给用户看。连接后创建服务请求 addServiceRequest()，最后调用 discoverServices()\n\n\n- WifiP2pManager(添加服务到本地) \t\n      wifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n- WifiP2pServiceInfo (创建本地服务的参数配置信息)\n\t\tWifiP2pDnsSdServiceInfo.newInstance(\"instanceName\",\"serviceType\",map);\n      serviceType与NSD中的服务类型相同;\n      服务信息是通过存放在map方式存入，他人连接能够获取到该数据;\n ","source":"_posts/Android基本技术点回顾.md","raw":"title: Android 基本技术点无线设备\ntags:\n  - ''\n  - 网络发现\ncategories:\n  - ''\n  - Android\nauthor: 侯大帅\ndate: 2018-05-24 13:39:00\n---\n### 无线连接设备\n>1. Network Service Discovery:NSD网络服务发现。\n2. WiFi建立P2P连接\n3. 使用WiFi P2P服务\n\n#### NSD网络发现\n* NsdManager\n>管理涉及到服务注册、监听器、取消服务等，当业务完成要及时取消注册服务(取消注册、关闭搜索服务)，防止占用资源\n\n\t- registerService\n    \t\t注册监听器\n    - resolveService\n    \t\t解析监听器\n    - discoverServices\n    \t\t搜索可发现服务\n* NsdServiceInfo\n\t\t注册服务的信息\n        - setServiceName\n        - setPort\n        - setServiceType\n        不推荐硬编码设置端口号，建议使用这种：\n        ServerSocket sock = new ServerSocket(0);  \n        port = sock.getLocalPort();  \n        sock.close();  \n        其中的服务类型写法：指定应用使用的协议和传输层。语法是“_< protocol >._< transportlayer >”\n* NsdManager.DiscoveryListener\n\t\tmDiscoveryListener = new NsdManager.DiscoveryListener() {\n\n            //  Called as soon as service discovery begins.\n            @Override\n            public void onDiscoveryStarted(String regType) {\n                Log.d(TAG, \"Service discovery started\");\n            }\n\n            @Override\n            public void onServiceFound(NsdServiceInfo service) {\n                // A service was found!  Do something with it.\n                Log.d(TAG, \"Service discovery success\" + service);\n                if (!service.getServiceType().equals(\"_http._tcp.\")) {\n                    // Service type is the string containing the protocol and\n                    // transport layer for this service.\n                    Log.d(TAG, \"Unknown Service Type: \" + service.getServiceType());\n                } else if (service.getServiceName().equals(mServiceName)) {\n                    // The name of the service tells the user what they'd be\n                    // connecting to. It could be \"Bob's Chat App\".\n                    Log.d(TAG, \"Same machine: \" + mServiceName);\n                } else if (service.getServiceName().contains(\"NsdChat\")){\n                    mNsdManager.resolveService(service, mResolveListener);\n                }\n            }\n\n            @Override\n            public void onServiceLost(NsdServiceInfo service) {\n                // When the network service is no longer available.\n                // Internal bookkeeping code goes here.\n                Log.e(TAG, \"service lost\" + service);\n            }\n\n            @Override\n            public void onDiscoveryStopped(String serviceType) {\n                Log.i(TAG, \"Discovery stopped: \" + serviceType);\n            }\n\n            @Override\n            public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n                Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n                mNsdManager.stopServiceDiscovery(this);\n            }\n\n            @Override\n            public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n                Log.e(TAG, \"Discovery failed: Error code:\" + errorCode);\n                mNsdManager.stopServiceDiscovery(this);\n            }\n        };\n* NsdManager.RegistrationListener\n\t\tmRegistrationListener = new NsdManager.RegistrationListener() {\n\n            @Override\n            public void onServiceRegistered(NsdServiceInfo NsdServiceInfo) {\n                // Save the service name.  Android may have changed it in order to\n                // resolve a conflict, so update the name you initially requested\n                // with the name Android actually used.\n                mServiceName = NsdServiceInfo.getServiceName();\n            }\n\n            @Override\n            public void onRegistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n                // Registration failed!  Put debugging code here to determine why.\n            }\n\n            @Override\n            public void onServiceUnregistered(NsdServiceInfo arg0) {\n                // Service has been unregistered.  This only happens when you call\n                // NsdManager.unregisterService() and pass in this listener.\n            }\n\n            @Override\n            public void onUnregistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n                // Unregistration failed.  Put debugging code here to determine why.\n            }\n        };\n* NsdManager.ResolveListener\n\t\t mResolveListener = new NsdManager.ResolveListener() {\n\n            @Override\n            public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n                // Called when the resolve fails.  Use the error code to debug.\n                Log.e(TAG, \"Resolve failed\" + errorCode);\n            }\n\n            @Override\n            public void onServiceResolved(NsdServiceInfo serviceInfo) {\n                Log.e(TAG, \"Resolve Succeeded. \" + serviceInfo);\n\n                if (serviceInfo.getServiceName().equals(mServiceName)) {\n                    Log.d(TAG, \"Same IP.\");\n                    return;\n                }\n            }\n        };\n  大致流程：注册本机服务 -> 注册监听 -> 注解解析 -> 搜索发现服务 -> 解析可发现的 -> 获取ip 端口号 -> 连接\n \n ----\n#### WiFi p2p连接\n> p2p不需要访问网络，但是会使用java中的socket，socket需网络权限(  CHANGE_WIFI_STATE、ACCESS_WIFI_STATE、INTERNET)\n\n- 设置广播接收器和p2p管理器\n\t首先注册广播，监听每次的wifi p2p事件变化，主要监听`WIFI_P2P_STATE_CHANGED_ACTION Wi-Fi P2P　是否开启`，`WIFI_P2P_PEERS_CHANGED_ACTION 对等节点（peer）列表发生了变化`,`WIFI_P2P_CONNECTION_CHANGED_ACTION 连接状态发生了改变`,`WIFI_P2P_THIS_DEVICE_CHANGED_ACTION 设备的详细配置发生了变化`这些广播，这些广播定义在`WifiP2pManager`类中。\n    实例化`Channel`对象，在后续的方法中基本都需要用到，`WifiP2pManager`的方法基本都需要这个，应该是传递数据封装数据用的。\n    \n      mChannel = mManager.initialize(this, getMainLooper(), null);\n        \n- 初始化对等节点发现（Peer Discovery）\n \t\n    discoverPeers() 搜索设备\n\n- 基本概念\n\t  WPS是啥？？？？：\n      （Wi-Fi Protected Setup，Wi-Fi保护设置）（有的叫做AOSS、有的叫做QSS，不过功能都一致。）是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线局域网的安装及安全性能配置工作。在传统方式下，用户新建一个无线网络时，必须在接入点手动设置网络名（SSID）和安全密钥，然后在客户端验证密钥以阻止“不速之客”的闯入。这整个过程需要用户具备Wi-Fi设备的背景知识和修改必要配置的能力。Wi- Fi Protected Setup能帮助用户自动设置网络名（SSID）、配置强大的WPA数据编码及认证功能，用户只需输入个人信息码（PIN方法）或按下按钮（按钮设置，或称PBC），即能安全地连入WLAN。这大大简化了无线安全设置的操作。Wi-Fi Protected Setup支持多种通过Wi-Fi认证的802.11产品，包括接入点、无线适配器、Wi-Fi电话以及其他消费性电子设备。\n      WPS分为PBC(BUTTON)和PIN两种方式：\n      A PBC: 按WPS按钮实现WPS安全连接.\n\t\t在AP中，在WPS设置中,设置为启用.\n\t\t按一下客户端(无线网卡)上的WPS按键,搜索WPS网络.\n\t\t按一下AP上的WPS按键,WPS开始链接协商,片刻后WPS安全连接成功建立.\n\t  B PIN\n\t    B1) PIN(Internal Registra, 相对于AP而言)：通过在路由器中输入客户端PIN码来实现WPS安全连接.\n\t\t 在WPS设置中,把状态设置为启用.\n     \t打开客户端WPS设置软件,选择在路由器中输入PIN的方式连接,同时软件上还会显示客户端当前的PIN码.\n    \t 打开路由器界面,在WPS模式里选择PIN模式,然后输入客户端的PIN码,点添加新设备,一会儿后,WPS安全连接成功建立.\n \t\tB2) PIN(External Registra, 相对于AP而言)：通过输入AP的PIN码实现WPS安全连接.在AP中，在WPS设置中,设置为启用.  记住AP的PIN码,然后打开客户端（无线网卡）WPS设置软件,选择以AP的PIN码来进行连接.\n        输入完PIN码后,点下一步,一会儿后,WPS安全连接成功建立.\n\n- 代码\n\n\n\tpublic class WifiP2PActivity extends AppCompatActivity {\n    String TAG = \" WifiP2P\";\n    WifiP2pManager mWifiP2pManager;\n    Channel mChannel;\n    IntentFilter mIntentFilter;\n    WifiP2PBReciver mReciver;\n    List<WifiP2pDevice> peers = new ArrayList();\n    WifiP2pConfig mWifiP2pConfig;\n    //获取设备列表\n    private WifiP2pManager.PeerListListener peerListListener = new WifiP2pManager.PeerListListener() {\n        @Override\n        public void onPeersAvailable(WifiP2pDeviceList peerList) {\n            // 获取设备列表 peerList.getDeviceList();\n            Log.i(TAG,\"获取的对等节点列表：\"+peerList.toString());\n            peers.clear();\n            peers.addAll(peerList.getDeviceList());\n            // 连接 不应该在这写，这是动态变化的，应该手动选择时从保存的对等节点列表中获取信息，去连接\n            mWifiP2pConfig = new WifiP2pConfig();\n            mWifiP2pConfig.deviceAddress = peers.get(0).deviceAddress;\n            mWifiP2pConfig.wps.setup = WpsInfo.PBC;\n            mWifiP2pManager.connect(mChannel, mWifiP2pConfig, new WifiP2pManager.ActionListener() {\n                @Override\n                public void onSuccess() {\n                    Log.i(TAG,\"连接成功了\");\n                }\n\n                @Override\n                public void onFailure(int reason) {\n                    Log.i(TAG,\"连接失败了:\"+reason);\n                }\n            });\n        }\n    };\n    WifiP2pManager.ConnectionInfoListener connectionInfoListener = new WifiP2pManager.ConnectionInfoListener() {\n        @Override\n        public void onConnectionInfoAvailable(WifiP2pInfo info) {\n            // InetAddress from WifiP2pInfo struct.\n            //当有多个设备同时试图连接到一台设备时（例如多人游戏或者聊天群），这一台设备将被指定为“群主”（group owner）。\n            String groupOwnerAddress = info.groupOwnerAddress.getHostAddress();\n            // After the group negotiation, we can determine the group owner.\n            if (info.groupFormed && info.isGroupOwner) {\n                // Do whatever tasks are specific to the group owner.\n                // One common case is creating a server thread and accepting\n                // incoming connections.\n            } else if (info.groupFormed) {\n                // The other device acts as the client. In this case,\n                // you'll want to create a client thread that connects to the group\n                // owner.\n            }\n        }\n    };\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_wifi_p2_p);\n\n        mIntentFilter = new IntentFilter();\n        //连接状态发生了改变\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n        //　指示设备的详细配置发生了变化\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n        //代表对等节点（peer）列表发生了变化\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n        //　指示　Wi-Fi P2P　是否开启\n        mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n        mWifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n\n        mChannel = mWifiP2pManager.initialize(this, getMainLooper(), new WifiP2pManager.ChannelListener() {\n            @Override\n            public void onChannelDisconnected() {\n                Log.i(TAG,\"通道断开\");\n            }\n        });\n        //搜索对等节点 peers\n        mWifiP2pManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n            @Override\n            public void onSuccess() {\n                Log.i(TAG,\"搜索成功！\");\n            }\n\n            @Override\n            public void onFailure(int reason) {\n                //WifiP2pManager 中的失败值\n                /*** Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the operation failed due to an internal error.\n                */int ERROR               = 0;\n\n                /**\n                 * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the operation failed because p2p is unsupported on the device.\n                 */int P2P_UNSUPPORTED     = 1;\n                /**\n                 * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the operation failed because the framework is busy and\n                 * unable to service the request\n                 */int BUSY = 2;\n                /**\n                 * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n                 * Indicates that the {@link #discoverServices} failed because no service\n                 * requests are added. Use {@link #addServiceRequest} to add a service\n                 * request.\n                 */int NO_SERVICE_REQUESTS = 3;\n                Log.e(TAG,\"搜索失败！\"+reason);\n            }\n        });\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        //注册接受wifi p2p 状态变化广播\n        mReciver = new WifiP2PBReciver();\n        getApplicationContext().registerReceiver(mReciver,mIntentFilter);\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        try{\n            unregisterReceiver(mReciver);\n        }catch (Exception e){\n\n        }\n    }\n\n    class WifiP2PBReciver extends BroadcastReceiver{\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String action = intent.getAction();\n            if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n                // Determine if Wifi P2P mode is enabled or not, alert\n                // the Activity.\n                int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n\n                if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n\n                } else {\n\n                }\n            } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n                // The peer list has changed!  We should probably do something about\n                // that.\n               //在此处获取设备列表变化后的数据\n                mWifiP2pManager.requestPeers(mChannel,peerListListener);\n\n            } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n                // Connection state changed!  We should probably do something about\n                // that.\n                NetworkInfo networkInfo = (NetworkInfo) intent\n                        .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n                if (networkInfo.isConnected()) {\n\n                    // We are connected with the other device, request connection\n                    // info to find group owner IP\n\n                    mWifiP2pManager.requestConnectionInfo(mChannel, connectionInfoListener);\n                }\n\n            } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n                WifiP2pDevice device = (WifiP2pDevice) intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);\n\n            }\n        }\n    }\n    }\n---- \n### WiFi P2P 服务发现\n\n   - 首先在本地注册一个服务，服务注册是要将服务类型、服务信息封装到WifiP2pServiceInfo中，再通过WifiP2pManager将服务添加到本地，本地服务添加后注册监听DnsSdTxtRecordListener来实时监听record记录数据，注册DnsSdServiceResponseListener接收服务的实际描述和连接的信息，前者处理记录连接的服务信息用来跟后者做对应关系处理。前者给你一组对他的服务的描述信息，然后在后者进行匹配，将描述信息与实际的硬件信息做匹配，把处理过的数据给用户看。连接后创建服务请求 addServiceRequest()，最后调用 discoverServices()\n\n\n- WifiP2pManager(添加服务到本地) \t\n      wifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n- WifiP2pServiceInfo (创建本地服务的参数配置信息)\n\t\tWifiP2pDnsSdServiceInfo.newInstance(\"instanceName\",\"serviceType\",map);\n      serviceType与NSD中的服务类型相同;\n      服务信息是通过存放在map方式存入，他人连接能够获取到该数据;\n ","slug":"Android基本技术点回顾","published":1,"updated":"2018-05-24T09:19:18.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkywj0004x8w5m0m5ry27","content":"<h3 id=\"无线连接设备\"><a href=\"#无线连接设备\" class=\"headerlink\" title=\"无线连接设备\"></a>无线连接设备</h3><blockquote>\n<ol>\n<li>Network Service Discovery:NSD网络服务发现。</li>\n<li>WiFi建立P2P连接</li>\n<li>使用WiFi P2P服务</li>\n</ol>\n</blockquote>\n<h4 id=\"NSD网络发现\"><a href=\"#NSD网络发现\" class=\"headerlink\" title=\"NSD网络发现\"></a>NSD网络发现</h4><ul>\n<li><p>NsdManager</p>\n<blockquote>\n<p>管理涉及到服务注册、监听器、取消服务等，当业务完成要及时取消注册服务(取消注册、关闭搜索服务)，防止占用资源</p>\n</blockquote>\n<ul>\n<li>registerService<pre><code>注册监听器\n</code></pre></li>\n<li>resolveService<pre><code>解析监听器\n</code></pre></li>\n<li>discoverServices<pre><code>搜索可发现服务\n</code></pre></li>\n</ul>\n</li>\n<li>NsdServiceInfo<pre><code>注册服务的信息\n- setServiceName\n- setPort\n- setServiceType\n不推荐硬编码设置端口号，建议使用这种：\nServerSocket sock = new ServerSocket(0);  \nport = sock.getLocalPort();  \nsock.close();  \n其中的服务类型写法：指定应用使用的协议和传输层。语法是“_&lt; protocol &gt;._&lt; transportlayer &gt;”\n</code></pre></li>\n<li><p>NsdManager.DiscoveryListener</p>\n<pre><code>mDiscoveryListener = new NsdManager.DiscoveryListener() {\n\n    //  Called as soon as service discovery begins.\n    @Override\n    public void onDiscoveryStarted(String regType) {\n        Log.d(TAG, &quot;Service discovery started&quot;);\n    }\n\n    @Override\n    public void onServiceFound(NsdServiceInfo service) {\n        // A service was found!  Do something with it.\n        Log.d(TAG, &quot;Service discovery success&quot; + service);\n        if (!service.getServiceType().equals(&quot;_http._tcp.&quot;)) {\n            // Service type is the string containing the protocol and\n            // transport layer for this service.\n            Log.d(TAG, &quot;Unknown Service Type: &quot; + service.getServiceType());\n        } else if (service.getServiceName().equals(mServiceName)) {\n            // The name of the service tells the user what they&apos;d be\n            // connecting to. It could be &quot;Bob&apos;s Chat App&quot;.\n            Log.d(TAG, &quot;Same machine: &quot; + mServiceName);\n        } else if (service.getServiceName().contains(&quot;NsdChat&quot;)){\n            mNsdManager.resolveService(service, mResolveListener);\n        }\n    }\n\n    @Override\n    public void onServiceLost(NsdServiceInfo service) {\n        // When the network service is no longer available.\n        // Internal bookkeeping code goes here.\n        Log.e(TAG, &quot;service lost&quot; + service);\n    }\n\n    @Override\n    public void onDiscoveryStopped(String serviceType) {\n        Log.i(TAG, &quot;Discovery stopped: &quot; + serviceType);\n    }\n\n    @Override\n    public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n        Log.e(TAG, &quot;Discovery failed: Error code:&quot; + errorCode);\n        mNsdManager.stopServiceDiscovery(this);\n    }\n\n    @Override\n    public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n        Log.e(TAG, &quot;Discovery failed: Error code:&quot; + errorCode);\n        mNsdManager.stopServiceDiscovery(this);\n    }\n};\n</code></pre></li>\n<li><p>NsdManager.RegistrationListener</p>\n<pre><code>mRegistrationListener = new NsdManager.RegistrationListener() {\n\n    @Override\n    public void onServiceRegistered(NsdServiceInfo NsdServiceInfo) {\n        // Save the service name.  Android may have changed it in order to\n        // resolve a conflict, so update the name you initially requested\n        // with the name Android actually used.\n        mServiceName = NsdServiceInfo.getServiceName();\n    }\n\n    @Override\n    public void onRegistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n        // Registration failed!  Put debugging code here to determine why.\n    }\n\n    @Override\n    public void onServiceUnregistered(NsdServiceInfo arg0) {\n        // Service has been unregistered.  This only happens when you call\n        // NsdManager.unregisterService() and pass in this listener.\n    }\n\n    @Override\n    public void onUnregistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n        // Unregistration failed.  Put debugging code here to determine why.\n    }\n};\n</code></pre></li>\n<li><p>NsdManager.ResolveListener</p>\n<pre><code> mResolveListener = new NsdManager.ResolveListener() {\n\n    @Override\n    public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n        // Called when the resolve fails.  Use the error code to debug.\n        Log.e(TAG, &quot;Resolve failed&quot; + errorCode);\n    }\n\n    @Override\n    public void onServiceResolved(NsdServiceInfo serviceInfo) {\n        Log.e(TAG, &quot;Resolve Succeeded. &quot; + serviceInfo);\n\n        if (serviceInfo.getServiceName().equals(mServiceName)) {\n            Log.d(TAG, &quot;Same IP.&quot;);\n            return;\n        }\n    }\n};\n</code></pre><p>大致流程：注册本机服务 -&gt; 注册监听 -&gt; 注解解析 -&gt; 搜索发现服务 -&gt; 解析可发现的 -&gt; 获取ip 端口号 -&gt; 连接</p>\n<hr>\n<h4 id=\"WiFi-p2p连接\"><a href=\"#WiFi-p2p连接\" class=\"headerlink\" title=\"WiFi p2p连接\"></a>WiFi p2p连接</h4><blockquote>\n<p>p2p不需要访问网络，但是会使用java中的socket，socket需网络权限(  CHANGE_WIFI_STATE、ACCESS_WIFI_STATE、INTERNET)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>设置广播接收器和p2p管理器<br>  首先注册广播，监听每次的wifi p2p事件变化，主要监听<code>WIFI_P2P_STATE_CHANGED_ACTION Wi-Fi P2P　是否开启</code>，<code>WIFI_P2P_PEERS_CHANGED_ACTION 对等节点（peer）列表发生了变化</code>,<code>WIFI_P2P_CONNECTION_CHANGED_ACTION 连接状态发生了改变</code>,<code>WIFI_P2P_THIS_DEVICE_CHANGED_ACTION 设备的详细配置发生了变化</code>这些广播，这些广播定义在<code>WifiP2pManager</code>类中。<br>  实例化<code>Channel</code>对象，在后续的方法中基本都需要用到，<code>WifiP2pManager</code>的方法基本都需要这个，应该是传递数据封装数据用的。</p>\n<pre><code>mChannel = mManager.initialize(this, getMainLooper(), null);\n</code></pre></li>\n<li><p>初始化对等节点发现（Peer Discovery）</p>\n<p>  discoverPeers() 搜索设备</p>\n</li>\n<li><p>基本概念</p>\n<pre><code>WPS是啥？？？？：\n（Wi-Fi Protected Setup，Wi-Fi保护设置）（有的叫做AOSS、有的叫做QSS，不过功能都一致。）是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线局域网的安装及安全性能配置工作。在传统方式下，用户新建一个无线网络时，必须在接入点手动设置网络名（SSID）和安全密钥，然后在客户端验证密钥以阻止“不速之客”的闯入。这整个过程需要用户具备Wi-Fi设备的背景知识和修改必要配置的能力。Wi- Fi Protected Setup能帮助用户自动设置网络名（SSID）、配置强大的WPA数据编码及认证功能，用户只需输入个人信息码（PIN方法）或按下按钮（按钮设置，或称PBC），即能安全地连入WLAN。这大大简化了无线安全设置的操作。Wi-Fi Protected Setup支持多种通过Wi-Fi认证的802.11产品，包括接入点、无线适配器、Wi-Fi电话以及其他消费性电子设备。\nWPS分为PBC(BUTTON)和PIN两种方式：\nA PBC: 按WPS按钮实现WPS安全连接.\n  在AP中，在WPS设置中,设置为启用.\n  按一下客户端(无线网卡)上的WPS按键,搜索WPS网络.\n  按一下AP上的WPS按键,WPS开始链接协商,片刻后WPS安全连接成功建立.\nB PIN\n  B1) PIN(Internal Registra, 相对于AP而言)：通过在路由器中输入客户端PIN码来实现WPS安全连接.\n   在WPS设置中,把状态设置为启用.\n   打开客户端WPS设置软件,选择在路由器中输入PIN的方式连接,同时软件上还会显示客户端当前的PIN码.\n   打开路由器界面,在WPS模式里选择PIN模式,然后输入客户端的PIN码,点添加新设备,一会儿后,WPS安全连接成功建立.\n   B2) PIN(External Registra, 相对于AP而言)：通过输入AP的PIN码实现WPS安全连接.在AP中，在WPS设置中,设置为启用.  记住AP的PIN码,然后打开客户端（无线网卡）WPS设置软件,选择以AP的PIN码来进行连接.\n  输入完PIN码后,点下一步,一会儿后,WPS安全连接成功建立.\n</code></pre></li>\n<li><p>代码</p>\n</li>\n</ul>\n<pre><code>public class WifiP2PActivity extends AppCompatActivity {\nString TAG = &quot; WifiP2P&quot;;\nWifiP2pManager mWifiP2pManager;\nChannel mChannel;\nIntentFilter mIntentFilter;\nWifiP2PBReciver mReciver;\nList&lt;WifiP2pDevice&gt; peers = new ArrayList();\nWifiP2pConfig mWifiP2pConfig;\n//获取设备列表\nprivate WifiP2pManager.PeerListListener peerListListener = new WifiP2pManager.PeerListListener() {\n    @Override\n    public void onPeersAvailable(WifiP2pDeviceList peerList) {\n        // 获取设备列表 peerList.getDeviceList();\n        Log.i(TAG,&quot;获取的对等节点列表：&quot;+peerList.toString());\n        peers.clear();\n        peers.addAll(peerList.getDeviceList());\n        // 连接 不应该在这写，这是动态变化的，应该手动选择时从保存的对等节点列表中获取信息，去连接\n        mWifiP2pConfig = new WifiP2pConfig();\n        mWifiP2pConfig.deviceAddress = peers.get(0).deviceAddress;\n        mWifiP2pConfig.wps.setup = WpsInfo.PBC;\n        mWifiP2pManager.connect(mChannel, mWifiP2pConfig, new WifiP2pManager.ActionListener() {\n            @Override\n            public void onSuccess() {\n                Log.i(TAG,&quot;连接成功了&quot;);\n            }\n\n            @Override\n            public void onFailure(int reason) {\n                Log.i(TAG,&quot;连接失败了:&quot;+reason);\n            }\n        });\n    }\n};\nWifiP2pManager.ConnectionInfoListener connectionInfoListener = new WifiP2pManager.ConnectionInfoListener() {\n    @Override\n    public void onConnectionInfoAvailable(WifiP2pInfo info) {\n        // InetAddress from WifiP2pInfo struct.\n        //当有多个设备同时试图连接到一台设备时（例如多人游戏或者聊天群），这一台设备将被指定为“群主”（group owner）。\n        String groupOwnerAddress = info.groupOwnerAddress.getHostAddress();\n        // After the group negotiation, we can determine the group owner.\n        if (info.groupFormed &amp;&amp; info.isGroupOwner) {\n            // Do whatever tasks are specific to the group owner.\n            // One common case is creating a server thread and accepting\n            // incoming connections.\n        } else if (info.groupFormed) {\n            // The other device acts as the client. In this case,\n            // you&apos;ll want to create a client thread that connects to the group\n            // owner.\n        }\n    }\n};\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_wifi_p2_p);\n\n    mIntentFilter = new IntentFilter();\n    //连接状态发生了改变\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n    //　指示设备的详细配置发生了变化\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n    //代表对等节点（peer）列表发生了变化\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n    //　指示　Wi-Fi P2P　是否开启\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n    mWifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n\n    mChannel = mWifiP2pManager.initialize(this, getMainLooper(), new WifiP2pManager.ChannelListener() {\n        @Override\n        public void onChannelDisconnected() {\n            Log.i(TAG,&quot;通道断开&quot;);\n        }\n    });\n    //搜索对等节点 peers\n    mWifiP2pManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n        @Override\n        public void onSuccess() {\n            Log.i(TAG,&quot;搜索成功！&quot;);\n        }\n\n        @Override\n        public void onFailure(int reason) {\n            //WifiP2pManager 中的失败值\n            /*** Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the operation failed due to an internal error.\n            */int ERROR               = 0;\n\n            /**\n             * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the operation failed because p2p is unsupported on the device.\n             */int P2P_UNSUPPORTED     = 1;\n            /**\n             * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the operation failed because the framework is busy and\n             * unable to service the request\n             */int BUSY = 2;\n            /**\n             * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the {@link #discoverServices} failed because no service\n             * requests are added. Use {@link #addServiceRequest} to add a service\n             * request.\n             */int NO_SERVICE_REQUESTS = 3;\n            Log.e(TAG,&quot;搜索失败！&quot;+reason);\n        }\n    });\n}\n\n@Override\nprotected void onResume() {\n    super.onResume();\n    //注册接受wifi p2p 状态变化广播\n    mReciver = new WifiP2PBReciver();\n    getApplicationContext().registerReceiver(mReciver,mIntentFilter);\n}\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    try{\n        unregisterReceiver(mReciver);\n    }catch (Exception e){\n\n    }\n}\n\nclass WifiP2PBReciver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        String action = intent.getAction();\n        if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n            // Determine if Wifi P2P mode is enabled or not, alert\n            // the Activity.\n            int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n\n            if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n\n            } else {\n\n            }\n        } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n            // The peer list has changed!  We should probably do something about\n            // that.\n           //在此处获取设备列表变化后的数据\n            mWifiP2pManager.requestPeers(mChannel,peerListListener);\n\n        } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n            // Connection state changed!  We should probably do something about\n            // that.\n            NetworkInfo networkInfo = (NetworkInfo) intent\n                    .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n            if (networkInfo.isConnected()) {\n\n                // We are connected with the other device, request connection\n                // info to find group owner IP\n\n                mWifiP2pManager.requestConnectionInfo(mChannel, connectionInfoListener);\n            }\n\n        } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n            WifiP2pDevice device = (WifiP2pDevice) intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);\n\n        }\n    }\n}\n}\n</code></pre><hr>\n<h3 id=\"WiFi-P2P-服务发现\"><a href=\"#WiFi-P2P-服务发现\" class=\"headerlink\" title=\"WiFi P2P 服务发现\"></a>WiFi P2P 服务发现</h3><ul>\n<li>首先在本地注册一个服务，服务注册是要将服务类型、服务信息封装到WifiP2pServiceInfo中，再通过WifiP2pManager将服务添加到本地，本地服务添加后注册监听DnsSdTxtRecordListener来实时监听record记录数据，注册DnsSdServiceResponseListener接收服务的实际描述和连接的信息，前者处理记录连接的服务信息用来跟后者做对应关系处理。前者给你一组对他的服务的描述信息，然后在后者进行匹配，将描述信息与实际的硬件信息做匹配，把处理过的数据给用户看。连接后创建服务请求 addServiceRequest()，最后调用 discoverServices()</li>\n</ul>\n<ul>\n<li>WifiP2pManager(添加服务到本地)     <pre><code>wifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n</code></pre></li>\n<li>WifiP2pServiceInfo (创建本地服务的参数配置信息)<pre><code>  WifiP2pDnsSdServiceInfo.newInstance(&quot;instanceName&quot;,&quot;serviceType&quot;,map);\nserviceType与NSD中的服务类型相同;\n服务信息是通过存放在map方式存入，他人连接能够获取到该数据;\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"无线连接设备\"><a href=\"#无线连接设备\" class=\"headerlink\" title=\"无线连接设备\"></a>无线连接设备</h3><blockquote>\n<ol>\n<li>Network Service Discovery:NSD网络服务发现。</li>\n<li>WiFi建立P2P连接</li>\n<li>使用WiFi P2P服务</li>\n</ol>\n</blockquote>\n<h4 id=\"NSD网络发现\"><a href=\"#NSD网络发现\" class=\"headerlink\" title=\"NSD网络发现\"></a>NSD网络发现</h4><ul>\n<li><p>NsdManager</p>\n<blockquote>\n<p>管理涉及到服务注册、监听器、取消服务等，当业务完成要及时取消注册服务(取消注册、关闭搜索服务)，防止占用资源</p>\n</blockquote>\n<ul>\n<li>registerService<pre><code>注册监听器\n</code></pre></li>\n<li>resolveService<pre><code>解析监听器\n</code></pre></li>\n<li>discoverServices<pre><code>搜索可发现服务\n</code></pre></li>\n</ul>\n</li>\n<li>NsdServiceInfo<pre><code>注册服务的信息\n- setServiceName\n- setPort\n- setServiceType\n不推荐硬编码设置端口号，建议使用这种：\nServerSocket sock = new ServerSocket(0);  \nport = sock.getLocalPort();  \nsock.close();  \n其中的服务类型写法：指定应用使用的协议和传输层。语法是“_&lt; protocol &gt;._&lt; transportlayer &gt;”\n</code></pre></li>\n<li><p>NsdManager.DiscoveryListener</p>\n<pre><code>mDiscoveryListener = new NsdManager.DiscoveryListener() {\n\n    //  Called as soon as service discovery begins.\n    @Override\n    public void onDiscoveryStarted(String regType) {\n        Log.d(TAG, &quot;Service discovery started&quot;);\n    }\n\n    @Override\n    public void onServiceFound(NsdServiceInfo service) {\n        // A service was found!  Do something with it.\n        Log.d(TAG, &quot;Service discovery success&quot; + service);\n        if (!service.getServiceType().equals(&quot;_http._tcp.&quot;)) {\n            // Service type is the string containing the protocol and\n            // transport layer for this service.\n            Log.d(TAG, &quot;Unknown Service Type: &quot; + service.getServiceType());\n        } else if (service.getServiceName().equals(mServiceName)) {\n            // The name of the service tells the user what they&apos;d be\n            // connecting to. It could be &quot;Bob&apos;s Chat App&quot;.\n            Log.d(TAG, &quot;Same machine: &quot; + mServiceName);\n        } else if (service.getServiceName().contains(&quot;NsdChat&quot;)){\n            mNsdManager.resolveService(service, mResolveListener);\n        }\n    }\n\n    @Override\n    public void onServiceLost(NsdServiceInfo service) {\n        // When the network service is no longer available.\n        // Internal bookkeeping code goes here.\n        Log.e(TAG, &quot;service lost&quot; + service);\n    }\n\n    @Override\n    public void onDiscoveryStopped(String serviceType) {\n        Log.i(TAG, &quot;Discovery stopped: &quot; + serviceType);\n    }\n\n    @Override\n    public void onStartDiscoveryFailed(String serviceType, int errorCode) {\n        Log.e(TAG, &quot;Discovery failed: Error code:&quot; + errorCode);\n        mNsdManager.stopServiceDiscovery(this);\n    }\n\n    @Override\n    public void onStopDiscoveryFailed(String serviceType, int errorCode) {\n        Log.e(TAG, &quot;Discovery failed: Error code:&quot; + errorCode);\n        mNsdManager.stopServiceDiscovery(this);\n    }\n};\n</code></pre></li>\n<li><p>NsdManager.RegistrationListener</p>\n<pre><code>mRegistrationListener = new NsdManager.RegistrationListener() {\n\n    @Override\n    public void onServiceRegistered(NsdServiceInfo NsdServiceInfo) {\n        // Save the service name.  Android may have changed it in order to\n        // resolve a conflict, so update the name you initially requested\n        // with the name Android actually used.\n        mServiceName = NsdServiceInfo.getServiceName();\n    }\n\n    @Override\n    public void onRegistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n        // Registration failed!  Put debugging code here to determine why.\n    }\n\n    @Override\n    public void onServiceUnregistered(NsdServiceInfo arg0) {\n        // Service has been unregistered.  This only happens when you call\n        // NsdManager.unregisterService() and pass in this listener.\n    }\n\n    @Override\n    public void onUnregistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {\n        // Unregistration failed.  Put debugging code here to determine why.\n    }\n};\n</code></pre></li>\n<li><p>NsdManager.ResolveListener</p>\n<pre><code> mResolveListener = new NsdManager.ResolveListener() {\n\n    @Override\n    public void onResolveFailed(NsdServiceInfo serviceInfo, int errorCode) {\n        // Called when the resolve fails.  Use the error code to debug.\n        Log.e(TAG, &quot;Resolve failed&quot; + errorCode);\n    }\n\n    @Override\n    public void onServiceResolved(NsdServiceInfo serviceInfo) {\n        Log.e(TAG, &quot;Resolve Succeeded. &quot; + serviceInfo);\n\n        if (serviceInfo.getServiceName().equals(mServiceName)) {\n            Log.d(TAG, &quot;Same IP.&quot;);\n            return;\n        }\n    }\n};\n</code></pre><p>大致流程：注册本机服务 -&gt; 注册监听 -&gt; 注解解析 -&gt; 搜索发现服务 -&gt; 解析可发现的 -&gt; 获取ip 端口号 -&gt; 连接</p>\n<hr>\n<h4 id=\"WiFi-p2p连接\"><a href=\"#WiFi-p2p连接\" class=\"headerlink\" title=\"WiFi p2p连接\"></a>WiFi p2p连接</h4><blockquote>\n<p>p2p不需要访问网络，但是会使用java中的socket，socket需网络权限(  CHANGE_WIFI_STATE、ACCESS_WIFI_STATE、INTERNET)</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>设置广播接收器和p2p管理器<br>  首先注册广播，监听每次的wifi p2p事件变化，主要监听<code>WIFI_P2P_STATE_CHANGED_ACTION Wi-Fi P2P　是否开启</code>，<code>WIFI_P2P_PEERS_CHANGED_ACTION 对等节点（peer）列表发生了变化</code>,<code>WIFI_P2P_CONNECTION_CHANGED_ACTION 连接状态发生了改变</code>,<code>WIFI_P2P_THIS_DEVICE_CHANGED_ACTION 设备的详细配置发生了变化</code>这些广播，这些广播定义在<code>WifiP2pManager</code>类中。<br>  实例化<code>Channel</code>对象，在后续的方法中基本都需要用到，<code>WifiP2pManager</code>的方法基本都需要这个，应该是传递数据封装数据用的。</p>\n<pre><code>mChannel = mManager.initialize(this, getMainLooper(), null);\n</code></pre></li>\n<li><p>初始化对等节点发现（Peer Discovery）</p>\n<p>  discoverPeers() 搜索设备</p>\n</li>\n<li><p>基本概念</p>\n<pre><code>WPS是啥？？？？：\n（Wi-Fi Protected Setup，Wi-Fi保护设置）（有的叫做AOSS、有的叫做QSS，不过功能都一致。）是由Wi-Fi联盟组织实施的认证项目，主要致力于简化无线局域网的安装及安全性能配置工作。在传统方式下，用户新建一个无线网络时，必须在接入点手动设置网络名（SSID）和安全密钥，然后在客户端验证密钥以阻止“不速之客”的闯入。这整个过程需要用户具备Wi-Fi设备的背景知识和修改必要配置的能力。Wi- Fi Protected Setup能帮助用户自动设置网络名（SSID）、配置强大的WPA数据编码及认证功能，用户只需输入个人信息码（PIN方法）或按下按钮（按钮设置，或称PBC），即能安全地连入WLAN。这大大简化了无线安全设置的操作。Wi-Fi Protected Setup支持多种通过Wi-Fi认证的802.11产品，包括接入点、无线适配器、Wi-Fi电话以及其他消费性电子设备。\nWPS分为PBC(BUTTON)和PIN两种方式：\nA PBC: 按WPS按钮实现WPS安全连接.\n  在AP中，在WPS设置中,设置为启用.\n  按一下客户端(无线网卡)上的WPS按键,搜索WPS网络.\n  按一下AP上的WPS按键,WPS开始链接协商,片刻后WPS安全连接成功建立.\nB PIN\n  B1) PIN(Internal Registra, 相对于AP而言)：通过在路由器中输入客户端PIN码来实现WPS安全连接.\n   在WPS设置中,把状态设置为启用.\n   打开客户端WPS设置软件,选择在路由器中输入PIN的方式连接,同时软件上还会显示客户端当前的PIN码.\n   打开路由器界面,在WPS模式里选择PIN模式,然后输入客户端的PIN码,点添加新设备,一会儿后,WPS安全连接成功建立.\n   B2) PIN(External Registra, 相对于AP而言)：通过输入AP的PIN码实现WPS安全连接.在AP中，在WPS设置中,设置为启用.  记住AP的PIN码,然后打开客户端（无线网卡）WPS设置软件,选择以AP的PIN码来进行连接.\n  输入完PIN码后,点下一步,一会儿后,WPS安全连接成功建立.\n</code></pre></li>\n<li><p>代码</p>\n</li>\n</ul>\n<pre><code>public class WifiP2PActivity extends AppCompatActivity {\nString TAG = &quot; WifiP2P&quot;;\nWifiP2pManager mWifiP2pManager;\nChannel mChannel;\nIntentFilter mIntentFilter;\nWifiP2PBReciver mReciver;\nList&lt;WifiP2pDevice&gt; peers = new ArrayList();\nWifiP2pConfig mWifiP2pConfig;\n//获取设备列表\nprivate WifiP2pManager.PeerListListener peerListListener = new WifiP2pManager.PeerListListener() {\n    @Override\n    public void onPeersAvailable(WifiP2pDeviceList peerList) {\n        // 获取设备列表 peerList.getDeviceList();\n        Log.i(TAG,&quot;获取的对等节点列表：&quot;+peerList.toString());\n        peers.clear();\n        peers.addAll(peerList.getDeviceList());\n        // 连接 不应该在这写，这是动态变化的，应该手动选择时从保存的对等节点列表中获取信息，去连接\n        mWifiP2pConfig = new WifiP2pConfig();\n        mWifiP2pConfig.deviceAddress = peers.get(0).deviceAddress;\n        mWifiP2pConfig.wps.setup = WpsInfo.PBC;\n        mWifiP2pManager.connect(mChannel, mWifiP2pConfig, new WifiP2pManager.ActionListener() {\n            @Override\n            public void onSuccess() {\n                Log.i(TAG,&quot;连接成功了&quot;);\n            }\n\n            @Override\n            public void onFailure(int reason) {\n                Log.i(TAG,&quot;连接失败了:&quot;+reason);\n            }\n        });\n    }\n};\nWifiP2pManager.ConnectionInfoListener connectionInfoListener = new WifiP2pManager.ConnectionInfoListener() {\n    @Override\n    public void onConnectionInfoAvailable(WifiP2pInfo info) {\n        // InetAddress from WifiP2pInfo struct.\n        //当有多个设备同时试图连接到一台设备时（例如多人游戏或者聊天群），这一台设备将被指定为“群主”（group owner）。\n        String groupOwnerAddress = info.groupOwnerAddress.getHostAddress();\n        // After the group negotiation, we can determine the group owner.\n        if (info.groupFormed &amp;&amp; info.isGroupOwner) {\n            // Do whatever tasks are specific to the group owner.\n            // One common case is creating a server thread and accepting\n            // incoming connections.\n        } else if (info.groupFormed) {\n            // The other device acts as the client. In this case,\n            // you&apos;ll want to create a client thread that connects to the group\n            // owner.\n        }\n    }\n};\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_wifi_p2_p);\n\n    mIntentFilter = new IntentFilter();\n    //连接状态发生了改变\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);\n    //　指示设备的详细配置发生了变化\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION);\n    //代表对等节点（peer）列表发生了变化\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION);\n    //　指示　Wi-Fi P2P　是否开启\n    mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);\n\n    mWifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n\n    mChannel = mWifiP2pManager.initialize(this, getMainLooper(), new WifiP2pManager.ChannelListener() {\n        @Override\n        public void onChannelDisconnected() {\n            Log.i(TAG,&quot;通道断开&quot;);\n        }\n    });\n    //搜索对等节点 peers\n    mWifiP2pManager.discoverPeers(mChannel, new WifiP2pManager.ActionListener() {\n        @Override\n        public void onSuccess() {\n            Log.i(TAG,&quot;搜索成功！&quot;);\n        }\n\n        @Override\n        public void onFailure(int reason) {\n            //WifiP2pManager 中的失败值\n            /*** Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the operation failed due to an internal error.\n            */int ERROR               = 0;\n\n            /**\n             * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the operation failed because p2p is unsupported on the device.\n             */int P2P_UNSUPPORTED     = 1;\n            /**\n             * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the operation failed because the framework is busy and\n             * unable to service the request\n             */int BUSY = 2;\n            /**\n             * Passed with {@link WifiP2pManager.ActionListener#onFailure}.\n             * Indicates that the {@link #discoverServices} failed because no service\n             * requests are added. Use {@link #addServiceRequest} to add a service\n             * request.\n             */int NO_SERVICE_REQUESTS = 3;\n            Log.e(TAG,&quot;搜索失败！&quot;+reason);\n        }\n    });\n}\n\n@Override\nprotected void onResume() {\n    super.onResume();\n    //注册接受wifi p2p 状态变化广播\n    mReciver = new WifiP2PBReciver();\n    getApplicationContext().registerReceiver(mReciver,mIntentFilter);\n}\n\n@Override\nprotected void onPause() {\n    super.onPause();\n    try{\n        unregisterReceiver(mReciver);\n    }catch (Exception e){\n\n    }\n}\n\nclass WifiP2PBReciver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        String action = intent.getAction();\n        if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {\n            // Determine if Wifi P2P mode is enabled or not, alert\n            // the Activity.\n            int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);\n\n            if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {\n\n            } else {\n\n            }\n        } else if (WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION.equals(action)) {\n\n            // The peer list has changed!  We should probably do something about\n            // that.\n           //在此处获取设备列表变化后的数据\n            mWifiP2pManager.requestPeers(mChannel,peerListListener);\n\n        } else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {\n\n            // Connection state changed!  We should probably do something about\n            // that.\n            NetworkInfo networkInfo = (NetworkInfo) intent\n                    .getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);\n\n            if (networkInfo.isConnected()) {\n\n                // We are connected with the other device, request connection\n                // info to find group owner IP\n\n                mWifiP2pManager.requestConnectionInfo(mChannel, connectionInfoListener);\n            }\n\n        } else if (WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION.equals(action)) {\n            WifiP2pDevice device = (WifiP2pDevice) intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_DEVICE);\n\n        }\n    }\n}\n}\n</code></pre><hr>\n<h3 id=\"WiFi-P2P-服务发现\"><a href=\"#WiFi-P2P-服务发现\" class=\"headerlink\" title=\"WiFi P2P 服务发现\"></a>WiFi P2P 服务发现</h3><ul>\n<li>首先在本地注册一个服务，服务注册是要将服务类型、服务信息封装到WifiP2pServiceInfo中，再通过WifiP2pManager将服务添加到本地，本地服务添加后注册监听DnsSdTxtRecordListener来实时监听record记录数据，注册DnsSdServiceResponseListener接收服务的实际描述和连接的信息，前者处理记录连接的服务信息用来跟后者做对应关系处理。前者给你一组对他的服务的描述信息，然后在后者进行匹配，将描述信息与实际的硬件信息做匹配，把处理过的数据给用户看。连接后创建服务请求 addServiceRequest()，最后调用 discoverServices()</li>\n</ul>\n<ul>\n<li>WifiP2pManager(添加服务到本地)     <pre><code>wifiP2pManager = (WifiP2pManager) getApplicationContext().getSystemService(WIFI_P2P_SERVICE);\n</code></pre></li>\n<li>WifiP2pServiceInfo (创建本地服务的参数配置信息)<pre><code>  WifiP2pDnsSdServiceInfo.newInstance(&quot;instanceName&quot;,&quot;serviceType&quot;,map);\nserviceType与NSD中的服务类型相同;\n服务信息是通过存放在map方式存入，他人连接能够获取到该数据;\n</code></pre></li>\n</ul>\n"},{"title":"FileProvider","author":"大帅","date":"2018-05-24T09:42:00.000Z","_content":"为了给应用程序定义一个FileProvider，需要在Manifest清单文件中定义一个entry，该entry指明了需要使用的创建Content URI的Authority。此外，还需要一个XML文件的文件名，该XML文件指定了我们的应用可以共享的目录路径。\n\n下例展示了如何在清单文件中添加<provider>标签，来指定FileProvider类，Authority及XML文件名：\n  \t\t\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n    <application\n        ...>\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.example.myapp.fileprovider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" />\n        </provider>\n        ...\n    </application>\n\t</manifest>\n在“res/xml/”下创建文件“filepaths.xml”。在这个文件中，为每一个想要共享目录添加一个XML标签\n\t\t\n    <paths>\n    \t<files-path path=\"images/\" name=\"myimages\" />\n\t</paths>\n    \n<files-path>标签共享的是在我们应用的内部存储中“files/”目录下的目录。“path”属性字段指出了该子目录为“files/”目录下的子目录“images/”。“name”属性字段告知FileProvider在“files/images/”子目录中的文件的Content URI添加路径分段（path segment）标记：“myimages”。\n\n<paths>标签可以有多个子标签，每一个子标签用来指定不同的共享目录。除了<files-path>标签，还可以使用<external-path>来共享位于外部存储的目录；另外，<cache-path>标签用来共享在内部缓存目录下的子目录。   \n  在文件分享是时调用给与临时的权限：\n  ``Intent.addFlags(\n                       Intent.FLAG_GRANT_READ_URI_PERMISSION);``\n","source":"_posts/FileProvider.md","raw":"title: FileProvider\nauthor: 大帅\ntags:\n  - FileProvider\ncategories:\n  - Android\ndate: 2018-05-24 17:42:00\n---\n为了给应用程序定义一个FileProvider，需要在Manifest清单文件中定义一个entry，该entry指明了需要使用的创建Content URI的Authority。此外，还需要一个XML文件的文件名，该XML文件指定了我们的应用可以共享的目录路径。\n\n下例展示了如何在清单文件中添加<provider>标签，来指定FileProvider类，Authority及XML文件名：\n  \t\t\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\">\n    <application\n        ...>\n        <provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.example.myapp.fileprovider\"\n            android:grantUriPermissions=\"true\"\n            android:exported=\"false\">\n            <meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" />\n        </provider>\n        ...\n    </application>\n\t</manifest>\n在“res/xml/”下创建文件“filepaths.xml”。在这个文件中，为每一个想要共享目录添加一个XML标签\n\t\t\n    <paths>\n    \t<files-path path=\"images/\" name=\"myimages\" />\n\t</paths>\n    \n<files-path>标签共享的是在我们应用的内部存储中“files/”目录下的目录。“path”属性字段指出了该子目录为“files/”目录下的子目录“images/”。“name”属性字段告知FileProvider在“files/images/”子目录中的文件的Content URI添加路径分段（path segment）标记：“myimages”。\n\n<paths>标签可以有多个子标签，每一个子标签用来指定不同的共享目录。除了<files-path>标签，还可以使用<external-path>来共享位于外部存储的目录；另外，<cache-path>标签用来共享在内部缓存目录下的子目录。   \n  在文件分享是时调用给与临时的权限：\n  ``Intent.addFlags(\n                       Intent.FLAG_GRANT_READ_URI_PERMISSION);``\n","slug":"FileProvider","published":1,"updated":"2018-05-24T09:51:15.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkywo0008x8w5uxkzae9h","content":"<p>为了给应用程序定义一个FileProvider，需要在Manifest清单文件中定义一个entry，该entry指明了需要使用的创建Content URI的Authority。此外，还需要一个XML文件的文件名，该XML文件指定了我们的应用可以共享的目录路径。</p>\n<p>下例展示了如何在清单文件中添加<provider>标签，来指定FileProvider类，Authority及XML文件名：</provider></p>\n<pre><code>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\npackage=&quot;com.example.myapp&quot;&gt;\n&lt;application\n    ...&gt;\n    &lt;provider\n        android:name=&quot;android.support.v4.content.FileProvider&quot;\n        android:authorities=&quot;com.example.myapp.fileprovider&quot;\n        android:grantUriPermissions=&quot;true&quot;\n        android:exported=&quot;false&quot;&gt;\n        &lt;meta-data\n            android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;\n            android:resource=&quot;@xml/filepaths&quot; /&gt;\n    &lt;/provider&gt;\n    ...\n&lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre><p>在“res/xml/”下创建文件“filepaths.xml”。在这个文件中，为每一个想要共享目录添加一个XML标签</p>\n<pre><code>&lt;paths&gt;\n    &lt;files-path path=&quot;images/&quot; name=&quot;myimages&quot; /&gt;\n&lt;/paths&gt;\n</code></pre><p><files-path>标签共享的是在我们应用的内部存储中“files/”目录下的目录。“path”属性字段指出了该子目录为“files/”目录下的子目录“images/”。“name”属性字段告知FileProvider在“files/images/”子目录中的文件的Content URI添加路径分段（path segment）标记：“myimages”。</files-path></p>\n<p><paths>标签可以有多个子标签，每一个子标签用来指定不同的共享目录。除了<files-path>标签，还可以使用<external-path>来共享位于外部存储的目录；另外，<cache-path>标签用来共享在内部缓存目录下的子目录。<br>  在文件分享是时调用给与临时的权限：<br>  <code>Intent.addFlags(\n                       Intent.FLAG_GRANT_READ_URI_PERMISSION);</code></cache-path></external-path></files-path></paths></p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了给应用程序定义一个FileProvider，需要在Manifest清单文件中定义一个entry，该entry指明了需要使用的创建Content URI的Authority。此外，还需要一个XML文件的文件名，该XML文件指定了我们的应用可以共享的目录路径。</p>\n<p>下例展示了如何在清单文件中添加<provider>标签，来指定FileProvider类，Authority及XML文件名：</provider></p>\n<pre><code>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\npackage=&quot;com.example.myapp&quot;&gt;\n&lt;application\n    ...&gt;\n    &lt;provider\n        android:name=&quot;android.support.v4.content.FileProvider&quot;\n        android:authorities=&quot;com.example.myapp.fileprovider&quot;\n        android:grantUriPermissions=&quot;true&quot;\n        android:exported=&quot;false&quot;&gt;\n        &lt;meta-data\n            android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;\n            android:resource=&quot;@xml/filepaths&quot; /&gt;\n    &lt;/provider&gt;\n    ...\n&lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre><p>在“res/xml/”下创建文件“filepaths.xml”。在这个文件中，为每一个想要共享目录添加一个XML标签</p>\n<pre><code>&lt;paths&gt;\n    &lt;files-path path=&quot;images/&quot; name=&quot;myimages&quot; /&gt;\n&lt;/paths&gt;\n</code></pre><p><files-path>标签共享的是在我们应用的内部存储中“files/”目录下的目录。“path”属性字段指出了该子目录为“files/”目录下的子目录“images/”。“name”属性字段告知FileProvider在“files/images/”子目录中的文件的Content URI添加路径分段（path segment）标记：“myimages”。</files-path></p>\n<p><paths>标签可以有多个子标签，每一个子标签用来指定不同的共享目录。除了<files-path>标签，还可以使用<external-path>来共享位于外部存储的目录；另外，<cache-path>标签用来共享在内部缓存目录下的子目录。<br>  在文件分享是时调用给与临时的权限：<br>  <code>Intent.addFlags(\n                       Intent.FLAG_GRANT_READ_URI_PERMISSION);</code></cache-path></external-path></files-path></paths></p>\n"},{"title":"Palette","author":"大帅","date":"2018-05-25T03:19:00.000Z","_content":"### Palette\n'com.android.support:palette-v7:27.1.1' \n\t\t\t\n    Vibrant: 亮色\n\tVibrant dark: 深亮色\n\tVibrant light: 浅亮色\n\tMuted: 暗色\n\tMuted dark: 深暗色\n\tMuted light: 浅暗色\n","source":"_posts/alette.md","raw":"title: Palette\nauthor: 大帅\ntags:\n  - 颜色提取\ncategories:\n  - Android\ndate: 2018-05-25 11:19:00\n---\n### Palette\n'com.android.support:palette-v7:27.1.1' \n\t\t\t\n    Vibrant: 亮色\n\tVibrant dark: 深亮色\n\tVibrant light: 浅亮色\n\tMuted: 暗色\n\tMuted dark: 深暗色\n\tMuted light: 浅暗色\n","slug":"alette","published":1,"updated":"2018-05-25T03:21:29.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkywq0009x8w5jgzyktjy","content":"<h3 id=\"Palette\"><a href=\"#Palette\" class=\"headerlink\" title=\"Palette\"></a>Palette</h3><p>‘com.android.support:palette-v7:27.1.1’ </p>\n<pre><code>Vibrant: 亮色\nVibrant dark: 深亮色\nVibrant light: 浅亮色\nMuted: 暗色\nMuted dark: 深暗色\nMuted light: 浅暗色\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Palette\"><a href=\"#Palette\" class=\"headerlink\" title=\"Palette\"></a>Palette</h3><p>‘com.android.support:palette-v7:27.1.1’ </p>\n<pre><code>Vibrant: 亮色\nVibrant dark: 深亮色\nVibrant light: 浅亮色\nMuted: 暗色\nMuted dark: 深暗色\nMuted light: 浅暗色\n</code></pre>"},{"title":"Android statusBar","author":"大帅","date":"2018-05-25T02:51:00.000Z","_content":"\tView mDecorView;\n    private static String TAG = \"StatusBarActivity\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mDecorView = findViewById(android.R.id.content);\n        mDecorView.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {\n            @Override\n            public void onSystemUiVisibilityChange(int visibility) {\n                // Note that system bars will only be \"visible\" if none of the\n                // LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.\n                if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {\n                    // TODO: The system bars are visible. Make any desired\n                    // adjustments to your UI, such as showing the action bar or\n                    // other navigational controls.\n                } else {\n                    // TODO: The system bars are NOT visible. Make any desired\n                    // adjustments to your UI, such as hiding the action bar or\n                    // other navigational controls.\n                }\n            }\n        });\n        showSystemUI();\n        setContentView(R.layout.activity_status_bar);\n        findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n              hideSystemUI();\n            }\n        });\n    }\n    private void showSystemUI() {\n        //显示状态栏\n        mDecorView.setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n    }\n    private void hideSystemUI() {\n        // Set the IMMERSIVE flag. 设置沉浸式\n        //SYSTEM_UI_FLAG_IMMERSIVE_STICKY  内滑显示状态栏 会自动消失\n        //SYSTEM_UI_FLAG_IMMERSIVE 内滑显示状态栏 不会自动消失\n        // Set the content to appear under the system bars so that the content\n        // doesn't resize when the system bars hide and show.\n        mDecorView.setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE |\n                        View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar\n                        | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar\n                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }","source":"_posts/droid-statusBar.md","raw":"title: Android statusBar\nauthor: 大帅\ntags:\n  - statusBar\ncategories:\n  - Android\ndate: 2018-05-25 10:51:00\n---\n\tView mDecorView;\n    private static String TAG = \"StatusBarActivity\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mDecorView = findViewById(android.R.id.content);\n        mDecorView.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {\n            @Override\n            public void onSystemUiVisibilityChange(int visibility) {\n                // Note that system bars will only be \"visible\" if none of the\n                // LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.\n                if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {\n                    // TODO: The system bars are visible. Make any desired\n                    // adjustments to your UI, such as showing the action bar or\n                    // other navigational controls.\n                } else {\n                    // TODO: The system bars are NOT visible. Make any desired\n                    // adjustments to your UI, such as hiding the action bar or\n                    // other navigational controls.\n                }\n            }\n        });\n        showSystemUI();\n        setContentView(R.layout.activity_status_bar);\n        findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n              hideSystemUI();\n            }\n        });\n    }\n    private void showSystemUI() {\n        //显示状态栏\n        mDecorView.setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n    }\n    private void hideSystemUI() {\n        // Set the IMMERSIVE flag. 设置沉浸式\n        //SYSTEM_UI_FLAG_IMMERSIVE_STICKY  内滑显示状态栏 会自动消失\n        //SYSTEM_UI_FLAG_IMMERSIVE 内滑显示状态栏 不会自动消失\n        // Set the content to appear under the system bars so that the content\n        // doesn't resize when the system bars hide and show.\n        mDecorView.setSystemUiVisibility(\n                View.SYSTEM_UI_FLAG_LAYOUT_STABLE |\n                        View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar\n                        | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar\n                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n    }","slug":"droid-statusBar","published":1,"updated":"2018-05-25T02:56:09.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkywr000ax8w5hcm5530z","content":"<pre><code>View mDecorView;\nprivate static String TAG = &quot;StatusBarActivity&quot;;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    mDecorView = findViewById(android.R.id.content);\n    mDecorView.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {\n        @Override\n        public void onSystemUiVisibilityChange(int visibility) {\n            // Note that system bars will only be &quot;visible&quot; if none of the\n            // LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.\n            if ((visibility &amp; View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {\n                // TODO: The system bars are visible. Make any desired\n                // adjustments to your UI, such as showing the action bar or\n                // other navigational controls.\n            } else {\n                // TODO: The system bars are NOT visible. Make any desired\n                // adjustments to your UI, such as hiding the action bar or\n                // other navigational controls.\n            }\n        }\n    });\n    showSystemUI();\n    setContentView(R.layout.activity_status_bar);\n    findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n          hideSystemUI();\n        }\n    });\n}\nprivate void showSystemUI() {\n    //显示状态栏\n    mDecorView.setSystemUiVisibility(\n            View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n}\nprivate void hideSystemUI() {\n    // Set the IMMERSIVE flag. 设置沉浸式\n    //SYSTEM_UI_FLAG_IMMERSIVE_STICKY  内滑显示状态栏 会自动消失\n    //SYSTEM_UI_FLAG_IMMERSIVE 内滑显示状态栏 不会自动消失\n    // Set the content to appear under the system bars so that the content\n    // doesn&apos;t resize when the system bars hide and show.\n    mDecorView.setSystemUiVisibility(\n            View.SYSTEM_UI_FLAG_LAYOUT_STABLE |\n                    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar\n                    | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar\n                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>View mDecorView;\nprivate static String TAG = &quot;StatusBarActivity&quot;;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    mDecorView = findViewById(android.R.id.content);\n    mDecorView.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() {\n        @Override\n        public void onSystemUiVisibilityChange(int visibility) {\n            // Note that system bars will only be &quot;visible&quot; if none of the\n            // LOW_PROFILE, HIDE_NAVIGATION, or FULLSCREEN flags are set.\n            if ((visibility &amp; View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {\n                // TODO: The system bars are visible. Make any desired\n                // adjustments to your UI, such as showing the action bar or\n                // other navigational controls.\n            } else {\n                // TODO: The system bars are NOT visible. Make any desired\n                // adjustments to your UI, such as hiding the action bar or\n                // other navigational controls.\n            }\n        }\n    });\n    showSystemUI();\n    setContentView(R.layout.activity_status_bar);\n    findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n          hideSystemUI();\n        }\n    });\n}\nprivate void showSystemUI() {\n    //显示状态栏\n    mDecorView.setSystemUiVisibility(\n            View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);\n}\nprivate void hideSystemUI() {\n    // Set the IMMERSIVE flag. 设置沉浸式\n    //SYSTEM_UI_FLAG_IMMERSIVE_STICKY  内滑显示状态栏 会自动消失\n    //SYSTEM_UI_FLAG_IMMERSIVE 内滑显示状态栏 不会自动消失\n    // Set the content to appear under the system bars so that the content\n    // doesn&apos;t resize when the system bars hide and show.\n    mDecorView.setSystemUiVisibility(\n            View.SYSTEM_UI_FLAG_LAYOUT_STABLE |\n                    View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\n                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\n                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar\n                    | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar\n                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);\n}\n</code></pre>"},{"title":"Android 打印当前行数和名称方法","author":"大帅","date":"2018-05-24T08:12:00.000Z","_content":"### 获取类名称 行数\n\t\tpublic static String getFunctionName() {\n        StackTraceElement[] sts = Thread.currentThread().getStackTrace();\n\n        if (sts == null) {\n            return null;\n        }\n\n        for (StackTraceElement st : sts) {\n            if (st.isNativeMethod()) {\n                continue;\n            }\n\n            if (st.getClassName().equals(Thread.class.getName())) {\n                continue;\n            }\n\n            if (st.getClassName().equals(Logger.class.getName())) {\n                continue;\n            }\n\n            return \"[\" + Thread.currentThread().getName() + \"(\"\n                    + Thread.currentThread().getId() + \"): \" + st.getFileName()\n                    + \":\" + st.getLineNumber() + \"]\";\n        }\n\n        return null;\n    }\n### 打印超多数字\n    public static void i(String msg) {\n        if (debug) {\n            String message = createMessage(msg);\n            if (message.length() > 4000) {\n                int chunkCount = message.length() / 4000;     // integer division\n                for (int i = 0; i <= chunkCount; i++) {\n                    int max = 4000 * (i + 1);\n                    if (max >= message.length()) {\n                        Log.i(tag,message.substring(4000 * i)+\"\\n\");\n                    } else {\n                        Log.v(tag, message.substring(4000 * i, max)+\"\\n\");\n                    }\n                }\n            }else {\n                Log.i(tag, message);\n            }\n        }\n    }","source":"_posts/droid-打印当前行数和名称方法.md","raw":"title: Android 打印当前行数和名称方法\nauthor: 大帅\ntags:\n  - log\ncategories:\n  - Android\ndate: 2018-05-24 16:12:00\n---\n### 获取类名称 行数\n\t\tpublic static String getFunctionName() {\n        StackTraceElement[] sts = Thread.currentThread().getStackTrace();\n\n        if (sts == null) {\n            return null;\n        }\n\n        for (StackTraceElement st : sts) {\n            if (st.isNativeMethod()) {\n                continue;\n            }\n\n            if (st.getClassName().equals(Thread.class.getName())) {\n                continue;\n            }\n\n            if (st.getClassName().equals(Logger.class.getName())) {\n                continue;\n            }\n\n            return \"[\" + Thread.currentThread().getName() + \"(\"\n                    + Thread.currentThread().getId() + \"): \" + st.getFileName()\n                    + \":\" + st.getLineNumber() + \"]\";\n        }\n\n        return null;\n    }\n### 打印超多数字\n    public static void i(String msg) {\n        if (debug) {\n            String message = createMessage(msg);\n            if (message.length() > 4000) {\n                int chunkCount = message.length() / 4000;     // integer division\n                for (int i = 0; i <= chunkCount; i++) {\n                    int max = 4000 * (i + 1);\n                    if (max >= message.length()) {\n                        Log.i(tag,message.substring(4000 * i)+\"\\n\");\n                    } else {\n                        Log.v(tag, message.substring(4000 * i, max)+\"\\n\");\n                    }\n                }\n            }else {\n                Log.i(tag, message);\n            }\n        }\n    }","slug":"droid-打印当前行数和名称方法","published":1,"updated":"2018-05-24T08:16:05.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkywy000ex8w5omj9crln","content":"<h3 id=\"获取类名称-行数\"><a href=\"#获取类名称-行数\" class=\"headerlink\" title=\"获取类名称 行数\"></a>获取类名称 行数</h3><pre><code>    public static String getFunctionName() {\n    StackTraceElement[] sts = Thread.currentThread().getStackTrace();\n\n    if (sts == null) {\n        return null;\n    }\n\n    for (StackTraceElement st : sts) {\n        if (st.isNativeMethod()) {\n            continue;\n        }\n\n        if (st.getClassName().equals(Thread.class.getName())) {\n            continue;\n        }\n\n        if (st.getClassName().equals(Logger.class.getName())) {\n            continue;\n        }\n\n        return &quot;[&quot; + Thread.currentThread().getName() + &quot;(&quot;\n                + Thread.currentThread().getId() + &quot;): &quot; + st.getFileName()\n                + &quot;:&quot; + st.getLineNumber() + &quot;]&quot;;\n    }\n\n    return null;\n}\n</code></pre><h3 id=\"打印超多数字\"><a href=\"#打印超多数字\" class=\"headerlink\" title=\"打印超多数字\"></a>打印超多数字</h3><pre><code>public static void i(String msg) {\n    if (debug) {\n        String message = createMessage(msg);\n        if (message.length() &gt; 4000) {\n            int chunkCount = message.length() / 4000;     // integer division\n            for (int i = 0; i &lt;= chunkCount; i++) {\n                int max = 4000 * (i + 1);\n                if (max &gt;= message.length()) {\n                    Log.i(tag,message.substring(4000 * i)+&quot;\\n&quot;);\n                } else {\n                    Log.v(tag, message.substring(4000 * i, max)+&quot;\\n&quot;);\n                }\n            }\n        }else {\n            Log.i(tag, message);\n        }\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"获取类名称-行数\"><a href=\"#获取类名称-行数\" class=\"headerlink\" title=\"获取类名称 行数\"></a>获取类名称 行数</h3><pre><code>    public static String getFunctionName() {\n    StackTraceElement[] sts = Thread.currentThread().getStackTrace();\n\n    if (sts == null) {\n        return null;\n    }\n\n    for (StackTraceElement st : sts) {\n        if (st.isNativeMethod()) {\n            continue;\n        }\n\n        if (st.getClassName().equals(Thread.class.getName())) {\n            continue;\n        }\n\n        if (st.getClassName().equals(Logger.class.getName())) {\n            continue;\n        }\n\n        return &quot;[&quot; + Thread.currentThread().getName() + &quot;(&quot;\n                + Thread.currentThread().getId() + &quot;): &quot; + st.getFileName()\n                + &quot;:&quot; + st.getLineNumber() + &quot;]&quot;;\n    }\n\n    return null;\n}\n</code></pre><h3 id=\"打印超多数字\"><a href=\"#打印超多数字\" class=\"headerlink\" title=\"打印超多数字\"></a>打印超多数字</h3><pre><code>public static void i(String msg) {\n    if (debug) {\n        String message = createMessage(msg);\n        if (message.length() &gt; 4000) {\n            int chunkCount = message.length() / 4000;     // integer division\n            for (int i = 0; i &lt;= chunkCount; i++) {\n                int max = 4000 * (i + 1);\n                if (max &gt;= message.length()) {\n                    Log.i(tag,message.substring(4000 * i)+&quot;\\n&quot;);\n                } else {\n                    Log.v(tag, message.substring(4000 * i, max)+&quot;\\n&quot;);\n                }\n            }\n        }else {\n            Log.i(tag, message);\n        }\n    }\n}\n</code></pre>"},{"title":"Android 网络连接检测","author":"大帅","date":"2018-05-24T09:21:00.000Z","_content":"- 检测是否连接\n\t\t\n    \tprivate static final String DEBUG_TAG = \"NetworkStatusExample\";\n\t\tConnectivityManager connMgr = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n\t\tboolean isWifiConn = networkInfo.isConnected();\n\t\tnetworkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\n\t\tboolean isMobileConn = networkInfo.isConnected();\n\t\tLog.d(DEBUG_TAG, \"Wifi connected: \" + isWifiConn);\n\t\tLog.d(DEBUG_TAG, \"Mobile connected: \" + isMobileConn);\n","source":"_posts/droid-网络连接检测.md","raw":"title: Android 网络连接检测\nauthor: 大帅\ntags:\n  - 网络\ncategories:\n  - Android\ndate: 2018-05-24 17:21:00\n---\n- 检测是否连接\n\t\t\n    \tprivate static final String DEBUG_TAG = \"NetworkStatusExample\";\n\t\tConnectivityManager connMgr = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\n\t\tboolean isWifiConn = networkInfo.isConnected();\n\t\tnetworkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\n\t\tboolean isMobileConn = networkInfo.isConnected();\n\t\tLog.d(DEBUG_TAG, \"Wifi connected: \" + isWifiConn);\n\t\tLog.d(DEBUG_TAG, \"Mobile connected: \" + isMobileConn);\n","slug":"droid-网络连接检测","published":1,"updated":"2018-05-24T09:23:52.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyx2000fx8w51e1bwgdl","content":"<ul>\n<li><p>检测是否连接</p>\n<pre><code>private static final String DEBUG_TAG = &quot;NetworkStatusExample&quot;;\nConnectivityManager connMgr = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\nNetworkInfo networkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\nboolean isWifiConn = networkInfo.isConnected();\nnetworkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\nboolean isMobileConn = networkInfo.isConnected();\nLog.d(DEBUG_TAG, &quot;Wifi connected: &quot; + isWifiConn);\nLog.d(DEBUG_TAG, &quot;Mobile connected: &quot; + isMobileConn);\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>检测是否连接</p>\n<pre><code>private static final String DEBUG_TAG = &quot;NetworkStatusExample&quot;;\nConnectivityManager connMgr = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\nNetworkInfo networkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_WIFI);\nboolean isWifiConn = networkInfo.isConnected();\nnetworkInfo = connMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);\nboolean isMobileConn = networkInfo.isConnected();\nLog.d(DEBUG_TAG, &quot;Wifi connected: &quot; + isWifiConn);\nLog.d(DEBUG_TAG, &quot;Mobile connected: &quot; + isMobileConn);\n</code></pre></li>\n</ul>\n"},{"title":"Hello World","_content":"既然是程序员，第一个文章当然就是一个：HELLO WORLD!!!\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n既然是程序员，第一个文章当然就是一个：HELLO WORLD!!!\n","slug":"hello-world","published":1,"date":"2018-05-22T01:56:54.877Z","updated":"2018-05-21T05:07:26.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyx6000jx8w57wzy4hv6","content":"<p>既然是程序员，第一个文章当然就是一个：HELLO WORLD!!!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>既然是程序员，第一个文章当然就是一个：HELLO WORLD!!!</p>\n"},{"title":"java反射","date":"2018-05-21T08:04:46.000Z","_content":"### java反射实现方式 ###\n1. 实例化要反射的Class对象\nClass.forName(类名全路径); //通过Class的静态方法； \n对象.getClass() //通过对象.getClass方法；\nint.class //基本数据类型及基本数据类型的封装了，例如Integer；\n2. 获取父类\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Class<?> superclass = clazz.getSuperclass();\n3. 获取实现接口\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Class<?>[] interfaces = clazz.getInterfaces()\n4. 获取指定参数构造函数及实例化\nClass<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Constructor<?> constructor = clazz.getConstructor(Class<?>  ... class);//获取公共的\n        Constructor<?> constructor = clazz.getDeclaredConstructor()//获取私有的\n        constructor.newInstance(Object args);\n5. 获取所有构造函数及构造参数的类型\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Constructor<?>[] constructors = clazz.getConstructors();//公共的\n        Constructor<?>[] constructors = clazz.getDeclaredConstructors()//包括私有的\n\n         for (int i = 0; i < constructors.length; i++) {\n            Class<?> clazzs[] = constructors[i].getParameterTypes();//获取类型\n            System.out.print(\"constructors[\" + i + \"] (\");\n            for (int j = 0; j < clazzs.length; j++) {\n                if (j == clazzs.length - 1)\n                    System.out.print(clazzs[j].getName());\n                else\n                    System.out.print(clazzs[j].getName() + \",\");\n            }\n            System.out.println(\")\");\n        }\n6. 通过无参实例化对象\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法          \n        class.newInstance();\n7. 获取字段，修改字段\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法          \n\n        Field field = clazz.getField(String name);//获取公共字段\n        Field field = clazz.getDeclaredField(String name);//获取私有公共字段\n        Field[] field = clazz.getFields();//获取所有公共字段\n        Field[] field = clazz.getDeclaredFields();//获取包括私有所有字段\n\n        Field field = clazz.getDeclaredField(\"heihei\");\n        field.setAccessible(true);//设置java取消访问检查，也就是说如果是私有的也可以访问,\n        field.set(obj, \"Java反射机制\");\n8. 获取方法,运行方法\nClass<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法          \n\n        clazz.getMethod(String name ,Class<?> ... parame);//获取公共指定方法\n        clazz.getDeclaredMethod(String name ,Class<?> ... parame)//获取私有指定方法\n        clazz.getMethods()//获取公共所有方法\n        clazz.getDeclaredMethods();//获取包括私有全部方法\n\n        Method method = clazz.getMethod(\"add\");\n        method.invoke(clazz.newInstance());\n\n        method = clazz.getMethod(\"getInfo\", int.class, String.class);\n        method.setAccessible(true)//设置java取消访问检查，也就是说如果是私有的也可以访问,\n        method.invoke(clazz.newInstance(), 20, \"张三\");\n9. 获取数组或者list中的类型,如果不是数组或集合返回null\nClass<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法  \n        Class<?> componentType = clazz.getComponentType();\n","source":"_posts/java反射.md","raw":"---\ntitle: java反射\ndate: 2018-05-21 16:04:46\ntags: \"反射\"\ncategories: \"java\"\n---\n### java反射实现方式 ###\n1. 实例化要反射的Class对象\nClass.forName(类名全路径); //通过Class的静态方法； \n对象.getClass() //通过对象.getClass方法；\nint.class //基本数据类型及基本数据类型的封装了，例如Integer；\n2. 获取父类\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Class<?> superclass = clazz.getSuperclass();\n3. 获取实现接口\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Class<?>[] interfaces = clazz.getInterfaces()\n4. 获取指定参数构造函数及实例化\nClass<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Constructor<?> constructor = clazz.getConstructor(Class<?>  ... class);//获取公共的\n        Constructor<?> constructor = clazz.getDeclaredConstructor()//获取私有的\n        constructor.newInstance(Object args);\n5. 获取所有构造函数及构造参数的类型\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法\n        Constructor<?>[] constructors = clazz.getConstructors();//公共的\n        Constructor<?>[] constructors = clazz.getDeclaredConstructors()//包括私有的\n\n         for (int i = 0; i < constructors.length; i++) {\n            Class<?> clazzs[] = constructors[i].getParameterTypes();//获取类型\n            System.out.print(\"constructors[\" + i + \"] (\");\n            for (int j = 0; j < clazzs.length; j++) {\n                if (j == clazzs.length - 1)\n                    System.out.print(clazzs[j].getName());\n                else\n                    System.out.print(clazzs[j].getName() + \",\");\n            }\n            System.out.println(\")\");\n        }\n6. 通过无参实例化对象\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法          \n        class.newInstance();\n7. 获取字段，修改字段\n Class<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法          \n\n        Field field = clazz.getField(String name);//获取公共字段\n        Field field = clazz.getDeclaredField(String name);//获取私有公共字段\n        Field[] field = clazz.getFields();//获取所有公共字段\n        Field[] field = clazz.getDeclaredFields();//获取包括私有所有字段\n\n        Field field = clazz.getDeclaredField(\"heihei\");\n        field.setAccessible(true);//设置java取消访问检查，也就是说如果是私有的也可以访问,\n        field.set(obj, \"Java反射机制\");\n8. 获取方法,运行方法\nClass<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法          \n\n        clazz.getMethod(String name ,Class<?> ... parame);//获取公共指定方法\n        clazz.getDeclaredMethod(String name ,Class<?> ... parame)//获取私有指定方法\n        clazz.getMethods()//获取公共所有方法\n        clazz.getDeclaredMethods();//获取包括私有全部方法\n\n        Method method = clazz.getMethod(\"add\");\n        method.invoke(clazz.newInstance());\n\n        method = clazz.getMethod(\"getInfo\", int.class, String.class);\n        method.setAccessible(true)//设置java取消访问检查，也就是说如果是私有的也可以访问,\n        method.invoke(clazz.newInstance(), 20, \"张三\");\n9. 获取数组或者list中的类型,如果不是数组或集合返回null\nClass<?> clazz  = Class.forName(类名全路径); //通过Class的静态方法  \n        Class<?> componentType = clazz.getComponentType();\n","slug":"java反射","published":1,"updated":"2018-05-21T08:18:23.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyx8000mx8w59rjp1axe","content":"<h3 id=\"java反射实现方式\"><a href=\"#java反射实现方式\" class=\"headerlink\" title=\"java反射实现方式\"></a>java反射实现方式</h3><ol>\n<li>实例化要反射的Class对象<br>Class.forName(类名全路径); //通过Class的静态方法；<br>对象.getClass() //通过对象.getClass方法；<br>int.class //基本数据类型及基本数据类型的封装了，例如Integer；</li>\n<li>获取父类<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法<pre><code>Class&lt;?&gt; superclass = clazz.getSuperclass();\n</code></pre></li>\n<li>获取实现接口<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法<pre><code>Class&lt;?&gt;[] interfaces = clazz.getInterfaces()\n</code></pre></li>\n<li>获取指定参数构造函数及实例化<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法<pre><code>Constructor&lt;?&gt; constructor = clazz.getConstructor(Class&lt;?&gt;  ... class);//获取公共的\nConstructor&lt;?&gt; constructor = clazz.getDeclaredConstructor()//获取私有的\nconstructor.newInstance(Object args);\n</code></pre></li>\n<li><p>获取所有构造函数及构造参数的类型<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法</p>\n<pre><code>Constructor&lt;?&gt;[] constructors = clazz.getConstructors();//公共的\nConstructor&lt;?&gt;[] constructors = clazz.getDeclaredConstructors()//包括私有的\n\n for (int i = 0; i &lt; constructors.length; i++) {\n    Class&lt;?&gt; clazzs[] = constructors[i].getParameterTypes();//获取类型\n    System.out.print(&quot;constructors[&quot; + i + &quot;] (&quot;);\n    for (int j = 0; j &lt; clazzs.length; j++) {\n        if (j == clazzs.length - 1)\n            System.out.print(clazzs[j].getName());\n        else\n            System.out.print(clazzs[j].getName() + &quot;,&quot;);\n    }\n    System.out.println(&quot;)&quot;);\n}\n</code></pre></li>\n<li>通过无参实例化对象<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法          <pre><code>class.newInstance();\n</code></pre></li>\n<li><p>获取字段，修改字段<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法          </p>\n<pre><code>Field field = clazz.getField(String name);//获取公共字段\nField field = clazz.getDeclaredField(String name);//获取私有公共字段\nField[] field = clazz.getFields();//获取所有公共字段\nField[] field = clazz.getDeclaredFields();//获取包括私有所有字段\n\nField field = clazz.getDeclaredField(&quot;heihei&quot;);\nfield.setAccessible(true);//设置java取消访问检查，也就是说如果是私有的也可以访问,\nfield.set(obj, &quot;Java反射机制&quot;);\n</code></pre></li>\n<li><p>获取方法,运行方法<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法          </p>\n<pre><code>clazz.getMethod(String name ,Class&lt;?&gt; ... parame);//获取公共指定方法\nclazz.getDeclaredMethod(String name ,Class&lt;?&gt; ... parame)//获取私有指定方法\nclazz.getMethods()//获取公共所有方法\nclazz.getDeclaredMethods();//获取包括私有全部方法\n\nMethod method = clazz.getMethod(&quot;add&quot;);\nmethod.invoke(clazz.newInstance());\n\nmethod = clazz.getMethod(&quot;getInfo&quot;, int.class, String.class);\nmethod.setAccessible(true)//设置java取消访问检查，也就是说如果是私有的也可以访问,\nmethod.invoke(clazz.newInstance(), 20, &quot;张三&quot;);\n</code></pre></li>\n<li>获取数组或者list中的类型,如果不是数组或集合返回null<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法  <pre><code>Class&lt;?&gt; componentType = clazz.getComponentType();\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"java反射实现方式\"><a href=\"#java反射实现方式\" class=\"headerlink\" title=\"java反射实现方式\"></a>java反射实现方式</h3><ol>\n<li>实例化要反射的Class对象<br>Class.forName(类名全路径); //通过Class的静态方法；<br>对象.getClass() //通过对象.getClass方法；<br>int.class //基本数据类型及基本数据类型的封装了，例如Integer；</li>\n<li>获取父类<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法<pre><code>Class&lt;?&gt; superclass = clazz.getSuperclass();\n</code></pre></li>\n<li>获取实现接口<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法<pre><code>Class&lt;?&gt;[] interfaces = clazz.getInterfaces()\n</code></pre></li>\n<li>获取指定参数构造函数及实例化<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法<pre><code>Constructor&lt;?&gt; constructor = clazz.getConstructor(Class&lt;?&gt;  ... class);//获取公共的\nConstructor&lt;?&gt; constructor = clazz.getDeclaredConstructor()//获取私有的\nconstructor.newInstance(Object args);\n</code></pre></li>\n<li><p>获取所有构造函数及构造参数的类型<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法</p>\n<pre><code>Constructor&lt;?&gt;[] constructors = clazz.getConstructors();//公共的\nConstructor&lt;?&gt;[] constructors = clazz.getDeclaredConstructors()//包括私有的\n\n for (int i = 0; i &lt; constructors.length; i++) {\n    Class&lt;?&gt; clazzs[] = constructors[i].getParameterTypes();//获取类型\n    System.out.print(&quot;constructors[&quot; + i + &quot;] (&quot;);\n    for (int j = 0; j &lt; clazzs.length; j++) {\n        if (j == clazzs.length - 1)\n            System.out.print(clazzs[j].getName());\n        else\n            System.out.print(clazzs[j].getName() + &quot;,&quot;);\n    }\n    System.out.println(&quot;)&quot;);\n}\n</code></pre></li>\n<li>通过无参实例化对象<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法          <pre><code>class.newInstance();\n</code></pre></li>\n<li><p>获取字段，修改字段<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法          </p>\n<pre><code>Field field = clazz.getField(String name);//获取公共字段\nField field = clazz.getDeclaredField(String name);//获取私有公共字段\nField[] field = clazz.getFields();//获取所有公共字段\nField[] field = clazz.getDeclaredFields();//获取包括私有所有字段\n\nField field = clazz.getDeclaredField(&quot;heihei&quot;);\nfield.setAccessible(true);//设置java取消访问检查，也就是说如果是私有的也可以访问,\nfield.set(obj, &quot;Java反射机制&quot;);\n</code></pre></li>\n<li><p>获取方法,运行方法<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法          </p>\n<pre><code>clazz.getMethod(String name ,Class&lt;?&gt; ... parame);//获取公共指定方法\nclazz.getDeclaredMethod(String name ,Class&lt;?&gt; ... parame)//获取私有指定方法\nclazz.getMethods()//获取公共所有方法\nclazz.getDeclaredMethods();//获取包括私有全部方法\n\nMethod method = clazz.getMethod(&quot;add&quot;);\nmethod.invoke(clazz.newInstance());\n\nmethod = clazz.getMethod(&quot;getInfo&quot;, int.class, String.class);\nmethod.setAccessible(true)//设置java取消访问检查，也就是说如果是私有的也可以访问,\nmethod.invoke(clazz.newInstance(), 20, &quot;张三&quot;);\n</code></pre></li>\n<li>获取数组或者list中的类型,如果不是数组或集合返回null<br>Class&lt;?&gt; clazz  = Class.forName(类名全路径); //通过Class的静态方法  <pre><code>Class&lt;?&gt; componentType = clazz.getComponentType();\n</code></pre></li>\n</ol>\n"},{"title":"markdown编辑器","date":"2018-05-22T02:23:08.000Z","_content":"小书匠 [下载地址](http://soft.xiaoshujiang.com/download.html)\n能够将数据保存到github、云存贮等；\n","source":"_posts/markdown编辑器.md","raw":"---\ntitle: markdown编辑器\ndate: 2018-05-22 10:23:08\ntags: \n- markdown\ncategories:\n- 编辑器\n---\n小书匠 [下载地址](http://soft.xiaoshujiang.com/download.html)\n能够将数据保存到github、云存贮等；\n","slug":"markdown编辑器","published":1,"updated":"2018-05-22T03:25:39.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxb000px8w5ejlds95s","content":"<p>小书匠 <a href=\"http://soft.xiaoshujiang.com/download.html\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>能够将数据保存到github、云存贮等；</p>\n","site":{"data":{}},"excerpt":"","more":"<p>小书匠 <a href=\"http://soft.xiaoshujiang.com/download.html\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>能够将数据保存到github、云存贮等；</p>\n"},{"title":"Android 矢量图动画","author":"大帅","date":"2018-05-25T03:30:11.000Z","_content":"#### 矢量图\n[来源](https://blog.csdn.net/zwlove5280/article/details/73442464)\n\n在Android中正常的是：\n\t\t  \n    f <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n   \t\t...>\n        <path/>\n\t</vector>\n    \nvector标签中包含路径，动画就需要使用``<group> path... </group>``包裹路径，并对包裹路径的group设置动画属性来控制该标签内的路径变化；\n- xml实现动画方式\n\t\n    \t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t\t<animated-vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                 android:drawable=\"vector图片\">\n    \t\t<target\n        \t\tandroid:animation=\"@animator/动画xml\"\n        \t\tandroid:name=\"要做动画的path、在group中path的定义名称\"/>\n   \t \t<target\n      \t \t android:name=\"要做动画的path\"\n       \t \tandroid:animation=\"@animator/smile_morph\"/>\n\t\t</animated-vector>\n    AnimatedVectorDrawable smileDrawable = (AnimatedVectorDrawable) imageView.getDrawable();\n                smileDrawable.start();调用\n\n- java代码实现方式\n\n\n[矢量图动画网站](https://shapeshifter.design/)","source":"_posts/ndroid-矢量图动画.md","raw":"title: Android 矢量图动画\nauthor: 大帅\ndate: 2018-05-25 11:30:11\ntags:\n---\n#### 矢量图\n[来源](https://blog.csdn.net/zwlove5280/article/details/73442464)\n\n在Android中正常的是：\n\t\t  \n    f <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n   \t\t...>\n        <path/>\n\t</vector>\n    \nvector标签中包含路径，动画就需要使用``<group> path... </group>``包裹路径，并对包裹路径的group设置动画属性来控制该标签内的路径变化；\n- xml实现动画方式\n\t\n    \t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t\t<animated-vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n                 android:drawable=\"vector图片\">\n    \t\t<target\n        \t\tandroid:animation=\"@animator/动画xml\"\n        \t\tandroid:name=\"要做动画的path、在group中path的定义名称\"/>\n   \t \t<target\n      \t \t android:name=\"要做动画的path\"\n       \t \tandroid:animation=\"@animator/smile_morph\"/>\n\t\t</animated-vector>\n    AnimatedVectorDrawable smileDrawable = (AnimatedVectorDrawable) imageView.getDrawable();\n                smileDrawable.start();调用\n\n- java代码实现方式\n\n\n[矢量图动画网站](https://shapeshifter.design/)","slug":"ndroid-矢量图动画","published":1,"updated":"2018-05-25T03:52:23.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxe000tx8w5i4vml39a","content":"<h4 id=\"矢量图\"><a href=\"#矢量图\" class=\"headerlink\" title=\"矢量图\"></a>矢量图</h4><p><a href=\"https://blog.csdn.net/zwlove5280/article/details/73442464\" target=\"_blank\" rel=\"noopener\">来源</a></p>\n<p>在Android中正常的是：</p>\n<pre><code>f &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n       ...&gt;\n    &lt;path/&gt;\n&lt;/vector&gt;\n</code></pre><p>vector标签中包含路径，动画就需要使用<code>&lt;group&gt; path... &lt;/group&gt;</code>包裹路径，并对包裹路径的group设置动画属性来控制该标签内的路径变化；</p>\n<ul>\n<li><p>xml实现动画方式</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;animated-vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n         android:drawable=&quot;vector图片&quot;&gt;\n    &lt;target\n        android:animation=&quot;@animator/动画xml&quot;\n        android:name=&quot;要做动画的path、在group中path的定义名称&quot;/&gt;\n    &lt;target\n        android:name=&quot;要做动画的path&quot;\n        android:animation=&quot;@animator/smile_morph&quot;/&gt;\n&lt;/animated-vector&gt;\n</code></pre><p>  AnimatedVectorDrawable smileDrawable = (AnimatedVectorDrawable) imageView.getDrawable();</p>\n<pre><code>smileDrawable.start();调用\n</code></pre></li>\n<li><p>java代码实现方式</p>\n</li>\n</ul>\n<p><a href=\"https://shapeshifter.design/\" target=\"_blank\" rel=\"noopener\">矢量图动画网站</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"矢量图\"><a href=\"#矢量图\" class=\"headerlink\" title=\"矢量图\"></a>矢量图</h4><p><a href=\"https://blog.csdn.net/zwlove5280/article/details/73442464\" target=\"_blank\" rel=\"noopener\">来源</a></p>\n<p>在Android中正常的是：</p>\n<pre><code>f &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n       ...&gt;\n    &lt;path/&gt;\n&lt;/vector&gt;\n</code></pre><p>vector标签中包含路径，动画就需要使用<code>&lt;group&gt; path... &lt;/group&gt;</code>包裹路径，并对包裹路径的group设置动画属性来控制该标签内的路径变化；</p>\n<ul>\n<li><p>xml实现动画方式</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;animated-vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n         android:drawable=&quot;vector图片&quot;&gt;\n    &lt;target\n        android:animation=&quot;@animator/动画xml&quot;\n        android:name=&quot;要做动画的path、在group中path的定义名称&quot;/&gt;\n    &lt;target\n        android:name=&quot;要做动画的path&quot;\n        android:animation=&quot;@animator/smile_morph&quot;/&gt;\n&lt;/animated-vector&gt;\n</code></pre><p>  AnimatedVectorDrawable smileDrawable = (AnimatedVectorDrawable) imageView.getDrawable();</p>\n<pre><code>smileDrawable.start();调用\n</code></pre></li>\n<li><p>java代码实现方式</p>\n</li>\n</ul>\n<p><a href=\"https://shapeshifter.design/\" target=\"_blank\" rel=\"noopener\">矢量图动画网站</a></p>\n"},{"title":"SourceTree","author":"大帅","date":"2018-05-23T07:29:00.000Z","_content":"> git的图形化工具，只支持mac和windows\n\n#### 跳过账号登录\n在用户本地文件夹下的 SourceTree 目录下，找到accounts.json文件 没有就创建复制一下内容：\n\n\t[\n\t  {\n    \"$id\": \"1\",\n    \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\",\n    \"Authenticate\": true,\n    \"HostInstance\": {\n      \"$id\": \"2\",\n      \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\",\n      \"Host\": {\n        \"$id\": \"3\",\n        \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\",\n        \"Id\": \"atlassian account\"\n      },\n      \"BaseUrl\": \"https://id.atlassian.com/\"\n    },\n    \"Credentials\": {\n      \"$id\": \"4\",\n      \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\",\n      \"Username\": \"\",\n      \"Email\": null\n    },\n    \"IsDefault\": false\n  \t}\n\t]","source":"_posts/ourceTree.md","raw":"title: SourceTree\nauthor: 大帅\ntags:\n  - git\ncategories: []\ndate: 2018-05-23 15:29:00\n---\n> git的图形化工具，只支持mac和windows\n\n#### 跳过账号登录\n在用户本地文件夹下的 SourceTree 目录下，找到accounts.json文件 没有就创建复制一下内容：\n\n\t[\n\t  {\n    \"$id\": \"1\",\n    \"$type\": \"SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity\",\n    \"Authenticate\": true,\n    \"HostInstance\": {\n      \"$id\": \"2\",\n      \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount\",\n      \"Host\": {\n        \"$id\": \"3\",\n        \"$type\": \"SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount\",\n        \"Id\": \"atlassian account\"\n      },\n      \"BaseUrl\": \"https://id.atlassian.com/\"\n    },\n    \"Credentials\": {\n      \"$id\": \"4\",\n      \"$type\": \"SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account\",\n      \"Username\": \"\",\n      \"Email\": null\n    },\n    \"IsDefault\": false\n  \t}\n\t]","slug":"ourceTree","published":1,"updated":"2018-05-23T07:39:33.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxf000wx8w5a3dlxq05","content":"<blockquote>\n<p>git的图形化工具，只支持mac和windows</p>\n</blockquote>\n<h4 id=\"跳过账号登录\"><a href=\"#跳过账号登录\" class=\"headerlink\" title=\"跳过账号登录\"></a>跳过账号登录</h4><p>在用户本地文件夹下的 SourceTree 目录下，找到accounts.json文件 没有就创建复制一下内容：</p>\n<pre><code>[\n  {\n&quot;$id&quot;: &quot;1&quot;,\n&quot;$type&quot;: &quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;,\n&quot;Authenticate&quot;: true,\n&quot;HostInstance&quot;: {\n  &quot;$id&quot;: &quot;2&quot;,\n  &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;,\n  &quot;Host&quot;: {\n    &quot;$id&quot;: &quot;3&quot;,\n    &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;,\n    &quot;Id&quot;: &quot;atlassian account&quot;\n  },\n  &quot;BaseUrl&quot;: &quot;https://id.atlassian.com/&quot;\n},\n&quot;Credentials&quot;: {\n  &quot;$id&quot;: &quot;4&quot;,\n  &quot;$type&quot;: &quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;,\n  &quot;Username&quot;: &quot;&quot;,\n  &quot;Email&quot;: null\n},\n&quot;IsDefault&quot;: false\n  }\n]\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>git的图形化工具，只支持mac和windows</p>\n</blockquote>\n<h4 id=\"跳过账号登录\"><a href=\"#跳过账号登录\" class=\"headerlink\" title=\"跳过账号登录\"></a>跳过账号登录</h4><p>在用户本地文件夹下的 SourceTree 目录下，找到accounts.json文件 没有就创建复制一下内容：</p>\n<pre><code>[\n  {\n&quot;$id&quot;: &quot;1&quot;,\n&quot;$type&quot;: &quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;,\n&quot;Authenticate&quot;: true,\n&quot;HostInstance&quot;: {\n  &quot;$id&quot;: &quot;2&quot;,\n  &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;,\n  &quot;Host&quot;: {\n    &quot;$id&quot;: &quot;3&quot;,\n    &quot;$type&quot;: &quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;,\n    &quot;Id&quot;: &quot;atlassian account&quot;\n  },\n  &quot;BaseUrl&quot;: &quot;https://id.atlassian.com/&quot;\n},\n&quot;Credentials&quot;: {\n  &quot;$id&quot;: &quot;4&quot;,\n  &quot;$type&quot;: &quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;,\n  &quot;Username&quot;: &quot;&quot;,\n  &quot;Email&quot;: null\n},\n&quot;IsDefault&quot;: false\n  }\n]\n</code></pre>"},{"title":"vpn","author":"大帅","date":"2018-05-25T07:32:50.000Z","_content":"[搬瓦工](https://bandwagonhost.com/)\n账号：513952947@qq.com \n密码；** wh\n[服务器地址](https://kiwivm.64clouds.com/main.php)","source":"_posts/pn.md","raw":"title: vpn\nauthor: 大帅\ndate: 2018-05-25 15:32:50\ntags:\n---\n[搬瓦工](https://bandwagonhost.com/)\n账号：513952947@qq.com \n密码；** wh\n[服务器地址](https://kiwivm.64clouds.com/main.php)","slug":"pn","published":1,"updated":"2018-05-25T07:36:05.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxh000zx8w5m4ja9m07","content":"<p><a href=\"https://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">搬瓦工</a><br>账号：<a href=\"mailto:513952947@qq.com\" target=\"_blank\" rel=\"noopener\">513952947@qq.com</a><br>密码；** wh<br><a href=\"https://kiwivm.64clouds.com/main.php\" target=\"_blank\" rel=\"noopener\">服务器地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://bandwagonhost.com/\" target=\"_blank\" rel=\"noopener\">搬瓦工</a><br>账号：<a href=\"mailto:513952947@qq.com\" target=\"_blank\" rel=\"noopener\">513952947@qq.com</a><br>密码；** wh<br><a href=\"https://kiwivm.64clouds.com/main.php\" target=\"_blank\" rel=\"noopener\">服务器地址</a></p>\n"},{"title":"菜园子博客开始的地方","date":"2018-05-21T04:49:01.000Z","_content":"> 打今天开始打理自己菜园子，菜园子有三块地，笔记、生活照片、记事本\n没啥说的，希望能够坚持下去，早点给自己定个目标吧。","source":"_posts/post.md","raw":"---\ntitle: 菜园子博客开始的地方\ndate: 2018-05-21 12:49:01\ntags: \"给自己\"\n---\n> 打今天开始打理自己菜园子，菜园子有三块地，笔记、生活照片、记事本\n没啥说的，希望能够坚持下去，早点给自己定个目标吧。","slug":"post","published":1,"updated":"2018-05-21T05:03:35.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxj0012x8w578bilf1p","content":"<blockquote>\n<p>打今天开始打理自己菜园子，菜园子有三块地，笔记、生活照片、记事本<br>没啥说的，希望能够坚持下去，早点给自己定个目标吧。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>打今天开始打理自己菜园子，菜园子有三块地，笔记、生活照片、记事本<br>没啥说的，希望能够坚持下去，早点给自己定个目标吧。</p>\n</blockquote>\n"},{"title":"git学习笔记01","author":"大帅","date":"2018-05-23T08:23:00.000Z","_content":"### 基础的知识点 ###\n---\n* 基础\n\t\n\tgit保存所有的文件的快照的索引，而非对比数据的差异；\n操作大多数是在本地执行；\n* 三种状态：`已提交committed`、`已修改modified `、`已暂存staged`\n\n* 基本工作流程\n\t1. 本地工作目录修改文件\n    2. 将文件快照存放在暂存区域\n    3. 提交更新，找到暂存区快照，将快照永久存在git仓库目录\n* 大致的流程\n\n\t如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。\n    \n* 配置\n\t\n 1. 配置文件\n\tgit config配置git外观和行为的配置变量，在linux下有三个位置：`/etc/gitconfig`,`~/.gitconfig 或 ~/.config/git/config`,`当前使用仓库的 Git 目录中的 config `;\n在windows系统下：`$HOME`目录(`C:\\Users\\$USER)的 .gitconfig`),`git安装目录下的gitconfig文件`;\n\t\n  2. 配置用户信息\n\t\t\n        \t$ git config --global user.name \"maxsu\"\n\t\t\t$ git config --global user.email maxsu@yiibai.com\n    \n  3. 文本编辑器\n    \t\t$ git config --global core.editor emacs\n          如果不习惯使用vim就使用该方法替换掉；\n    \n  4. 获取配置信息\n   \t\t\tgit config --list\n\n\n\n\n\n\n","source":"_posts/t学习笔记01.md","raw":"title: git学习笔记01\nauthor: 大帅\ntags:\n  - git基础理论\n  - ''\ncategories:\n  - git\ndate: 2018-05-23 16:23:00\n---\n### 基础的知识点 ###\n---\n* 基础\n\t\n\tgit保存所有的文件的快照的索引，而非对比数据的差异；\n操作大多数是在本地执行；\n* 三种状态：`已提交committed`、`已修改modified `、`已暂存staged`\n\n* 基本工作流程\n\t1. 本地工作目录修改文件\n    2. 将文件快照存放在暂存区域\n    3. 提交更新，找到暂存区快照，将快照永久存在git仓库目录\n* 大致的流程\n\n\t如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。\n    \n* 配置\n\t\n 1. 配置文件\n\tgit config配置git外观和行为的配置变量，在linux下有三个位置：`/etc/gitconfig`,`~/.gitconfig 或 ~/.config/git/config`,`当前使用仓库的 Git 目录中的 config `;\n在windows系统下：`$HOME`目录(`C:\\Users\\$USER)的 .gitconfig`),`git安装目录下的gitconfig文件`;\n\t\n  2. 配置用户信息\n\t\t\n        \t$ git config --global user.name \"maxsu\"\n\t\t\t$ git config --global user.email maxsu@yiibai.com\n    \n  3. 文本编辑器\n    \t\t$ git config --global core.editor emacs\n          如果不习惯使用vim就使用该方法替换掉；\n    \n  4. 获取配置信息\n   \t\t\tgit config --list\n\n\n\n\n\n\n","slug":"t学习笔记01","published":1,"updated":"2018-05-23T09:12:32.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxl0015x8w5be31e85g","content":"<h3 id=\"基础的知识点\"><a href=\"#基础的知识点\" class=\"headerlink\" title=\"基础的知识点\"></a>基础的知识点</h3><hr>\n<ul>\n<li><p>基础</p>\n<p>  git保存所有的文件的快照的索引，而非对比数据的差异；<br>操作大多数是在本地执行；</p>\n</li>\n<li><p>三种状态：<code>已提交committed</code>、<code>已修改modified</code>、<code>已暂存staged</code></p>\n</li>\n<li><p>基本工作流程</p>\n<ol>\n<li>本地工作目录修改文件</li>\n<li>将文件快照存放在暂存区域</li>\n<li>提交更新，找到暂存区快照，将快照永久存在git仓库目录</li>\n</ol>\n</li>\n<li><p>大致的流程</p>\n<p>  如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p>\n</li>\n<li><p>配置</p>\n<ol>\n<li><p>配置文件<br>git config配置git外观和行为的配置变量，在linux下有三个位置：<code>/etc/gitconfig</code>,<code>~/.gitconfig 或 ~/.config/git/config</code>,<code>当前使用仓库的 Git 目录中的 config</code>;<br>在windows系统下：<code>$HOME</code>目录(<code>C:\\Users\\$USER)的 .gitconfig</code>),<code>git安装目录下的gitconfig文件</code>;</p>\n</li>\n<li><p>配置用户信息</p>\n<pre><code>$ git config --global user.name &quot;maxsu&quot;\n$ git config --global user.email maxsu@yiibai.com\n</code></pre></li>\n<li><p>文本编辑器</p>\n<pre><code>  $ git config --global core.editor emacs\n如果不习惯使用vim就使用该方法替换掉；\n</code></pre></li>\n<li><p>获取配置信息</p>\n<pre><code>git config --list\n</code></pre></li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基础的知识点\"><a href=\"#基础的知识点\" class=\"headerlink\" title=\"基础的知识点\"></a>基础的知识点</h3><hr>\n<ul>\n<li><p>基础</p>\n<p>  git保存所有的文件的快照的索引，而非对比数据的差异；<br>操作大多数是在本地执行；</p>\n</li>\n<li><p>三种状态：<code>已提交committed</code>、<code>已修改modified</code>、<code>已暂存staged</code></p>\n</li>\n<li><p>基本工作流程</p>\n<ol>\n<li>本地工作目录修改文件</li>\n<li>将文件快照存放在暂存区域</li>\n<li>提交更新，找到暂存区快照，将快照永久存在git仓库目录</li>\n</ol>\n</li>\n<li><p>大致的流程</p>\n<p>  如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p>\n</li>\n<li><p>配置</p>\n<ol>\n<li><p>配置文件<br>git config配置git外观和行为的配置变量，在linux下有三个位置：<code>/etc/gitconfig</code>,<code>~/.gitconfig 或 ~/.config/git/config</code>,<code>当前使用仓库的 Git 目录中的 config</code>;<br>在windows系统下：<code>$HOME</code>目录(<code>C:\\Users\\$USER)的 .gitconfig</code>),<code>git安装目录下的gitconfig文件</code>;</p>\n</li>\n<li><p>配置用户信息</p>\n<pre><code>$ git config --global user.name &quot;maxsu&quot;\n$ git config --global user.email maxsu@yiibai.com\n</code></pre></li>\n<li><p>文本编辑器</p>\n<pre><code>  $ git config --global core.editor emacs\n如果不习惯使用vim就使用该方法替换掉；\n</code></pre></li>\n<li><p>获取配置信息</p>\n<pre><code>git config --list\n</code></pre></li>\n</ol>\n</li>\n</ul>\n"},{"title":"git学习笔记03","author":"大帅","date":"2018-05-23T09:28:00.000Z","_content":"### git基本操作符\n* init\n\t\tgit init [-q | --quiet] [--bare] [--template=<template_directory>]\n      [--separate-git-dir <git dir>]\n      [--shared[=<permissions>]] [directory]\n\n* add\n\t\tgit add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n      [--chmod=(+|-)x] [--] [<pathspec>…​]\n  新文件创建，添加到git版本索引库中，加到暂存区，add操作要在commit之前使用。git  add -f选项添加被忽略的文件。\n  \t\t\n        $ git add .  # 将所有修改添加到暂存区\n        $ git add *  # Ant风格添加修改\n        $ git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区\n* clone\n\t\tgit clone [--template=<template_directory>]\n      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n      [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n      [--dissociate] [--separate-git-dir <git dir>]\n      [--depth <depth>] [--[no-]single-branch]\n      [--recurse-submodules] [--[no-]shallow-submodules]\n      [--jobs <n>] [--] <repository> [<directory>]\n\n* status\n\t\tgit status [<options>…​] [--] [<pathspec>…​]\n  tracked文件被监控文件，untracked文件为要被忽略的文件，不需要提交，在.gitignore文件中加入要忽略的文件通配符；通过`git status -uno`可以只列出所有已经被git管理的且被修改但没提交的文件\n\n* diff\n\t\tgit diff [options] \t[<commit>] [--] [<path>…​]\n\t\tgit diff [options] --cached [<commit>] [--] [<path>…​]\n\t\tgit diff [options] <commit> <commit> [--] [<path>…​]\n\t\tgit diff [options] <blob> <blob>\n\t\tgit diff [options] [--no-index] [--] <path> <path>\n  \n* commit\n\tgit commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n       [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n       [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n       [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n       [-i | -o] [-S[<keyid>]] [--] [<file>…​]\n\n\t\t$ git add . \n\t\t$ # 或者~\n\t\t$ git add newfile.txt\n\t\t$ git commit -m \"the commit message\" #\n\t\t$ git commit -a # 会先把所有已经track的文件的改动`git add`进来，然后提交(有点像svn的一次提交,不用先暂存)。对于没有track的文件,还是需要执行`git add <file>` 命令。\n\t\t$ git commit --amend # 增补提交，会使用与当前提交节点相同的父节点进行一次新的提交，旧的提交将会被取消。\n  ","source":"_posts/t学习笔记03.md","raw":"title: git学习笔记03\nauthor: 大帅\ntags:\n  - pull\n  - commit\n  - status\n  - init\n  - clone\n  - reset\n  - merge\n  - add\ncategories:\n  - git\ndate: 2018-05-23 17:28:00\n---\n### git基本操作符\n* init\n\t\tgit init [-q | --quiet] [--bare] [--template=<template_directory>]\n      [--separate-git-dir <git dir>]\n      [--shared[=<permissions>]] [directory]\n\n* add\n\t\tgit add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n      [--chmod=(+|-)x] [--] [<pathspec>…​]\n  新文件创建，添加到git版本索引库中，加到暂存区，add操作要在commit之前使用。git  add -f选项添加被忽略的文件。\n  \t\t\n        $ git add .  # 将所有修改添加到暂存区\n        $ git add *  # Ant风格添加修改\n        $ git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区\n* clone\n\t\tgit clone [--template=<template_directory>]\n      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n      [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n      [--dissociate] [--separate-git-dir <git dir>]\n      [--depth <depth>] [--[no-]single-branch]\n      [--recurse-submodules] [--[no-]shallow-submodules]\n      [--jobs <n>] [--] <repository> [<directory>]\n\n* status\n\t\tgit status [<options>…​] [--] [<pathspec>…​]\n  tracked文件被监控文件，untracked文件为要被忽略的文件，不需要提交，在.gitignore文件中加入要忽略的文件通配符；通过`git status -uno`可以只列出所有已经被git管理的且被修改但没提交的文件\n\n* diff\n\t\tgit diff [options] \t[<commit>] [--] [<path>…​]\n\t\tgit diff [options] --cached [<commit>] [--] [<path>…​]\n\t\tgit diff [options] <commit> <commit> [--] [<path>…​]\n\t\tgit diff [options] <blob> <blob>\n\t\tgit diff [options] [--no-index] [--] <path> <path>\n  \n* commit\n\tgit commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]\n       [--dry-run] [(-c | -C | --fixup | --squash) <commit>]\n       [-F <file> | -m <msg>] [--reset-author] [--allow-empty]\n       [--allow-empty-message] [--no-verify] [-e] [--author=<author>]\n       [--date=<date>] [--cleanup=<mode>] [--[no-]status]\n       [-i | -o] [-S[<keyid>]] [--] [<file>…​]\n\n\t\t$ git add . \n\t\t$ # 或者~\n\t\t$ git add newfile.txt\n\t\t$ git commit -m \"the commit message\" #\n\t\t$ git commit -a # 会先把所有已经track的文件的改动`git add`进来，然后提交(有点像svn的一次提交,不用先暂存)。对于没有track的文件,还是需要执行`git add <file>` 命令。\n\t\t$ git commit --amend # 增补提交，会使用与当前提交节点相同的父节点进行一次新的提交，旧的提交将会被取消。\n  ","slug":"t学习笔记03","published":1,"updated":"2018-05-23T09:58:45.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxn0017x8w5ut0rc2zr","content":"<h3 id=\"git基本操作符\"><a href=\"#git基本操作符\" class=\"headerlink\" title=\"git基本操作符\"></a>git基本操作符</h3><ul>\n<li><p>init</p>\n<pre><code>  git init [-q | --quiet] [--bare] [--template=&lt;template_directory&gt;]\n[--separate-git-dir &lt;git dir&gt;]\n[--shared[=&lt;permissions&gt;]] [directory]\n</code></pre></li>\n<li><p>add</p>\n<pre><code>  git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n[--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n[--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n[--chmod=(+|-)x] [--] [&lt;pathspec&gt;…​]\n</code></pre><p>新文件创建，添加到git版本索引库中，加到暂存区，add操作要在commit之前使用。git  add -f选项添加被忽略的文件。</p>\n<pre><code>$ git add .  # 将所有修改添加到暂存区\n$ git add *  # Ant风格添加修改\n$ git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区\n</code></pre></li>\n<li><p>clone</p>\n<pre><code>  git clone [--template=&lt;template_directory&gt;]\n[-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n[-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]\n[--dissociate] [--separate-git-dir &lt;git dir&gt;]\n[--depth &lt;depth&gt;] [--[no-]single-branch]\n[--recurse-submodules] [--[no-]shallow-submodules]\n[--jobs &lt;n&gt;] [--] &lt;repository&gt; [&lt;directory&gt;]\n</code></pre></li>\n<li><p>status</p>\n<pre><code>git status [&lt;options&gt;…​] [--] [&lt;pathspec&gt;…​]\n</code></pre><p>tracked文件被监控文件，untracked文件为要被忽略的文件，不需要提交，在.gitignore文件中加入要忽略的文件通配符；通过<code>git status -uno</code>可以只列出所有已经被git管理的且被修改但没提交的文件</p>\n</li>\n<li><p>diff</p>\n<pre><code>git diff [options]     [&lt;commit&gt;] [--] [&lt;path&gt;…​]\ngit diff [options] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…​]\ngit diff [options] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…​]\ngit diff [options] &lt;blob&gt; &lt;blob&gt;\ngit diff [options] [--no-index] [--] &lt;path&gt; &lt;path&gt;\n</code></pre></li>\n<li><p>commit<br>  git commit [-a | –interactive | –patch] [-s] [-v] [-u<mode>] [–amend]</mode></p>\n<pre><code>[--dry-run] [(-c | -C | --fixup | --squash) &lt;commit&gt;]\n[-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author] [--allow-empty]\n[--allow-empty-message] [--no-verify] [-e] [--author=&lt;author&gt;]\n[--date=&lt;date&gt;] [--cleanup=&lt;mode&gt;] [--[no-]status]\n[-i | -o] [-S[&lt;keyid&gt;]] [--] [&lt;file&gt;…​]\n\n $ git add . \n $ # 或者~\n $ git add newfile.txt\n $ git commit -m &quot;the commit message&quot; #\n $ git commit -a # 会先把所有已经track的文件的改动`git add`进来，然后提交(有点像svn的一次提交,不用先暂存)。对于没有track的文件,还是需要执行`git add &lt;file&gt;` 命令。\n $ git commit --amend # 增补提交，会使用与当前提交节点相同的父节点进行一次新的提交，旧的提交将会被取消。\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git基本操作符\"><a href=\"#git基本操作符\" class=\"headerlink\" title=\"git基本操作符\"></a>git基本操作符</h3><ul>\n<li><p>init</p>\n<pre><code>  git init [-q | --quiet] [--bare] [--template=&lt;template_directory&gt;]\n[--separate-git-dir &lt;git dir&gt;]\n[--shared[=&lt;permissions&gt;]] [directory]\n</code></pre></li>\n<li><p>add</p>\n<pre><code>  git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n[--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n[--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n[--chmod=(+|-)x] [--] [&lt;pathspec&gt;…​]\n</code></pre><p>新文件创建，添加到git版本索引库中，加到暂存区，add操作要在commit之前使用。git  add -f选项添加被忽略的文件。</p>\n<pre><code>$ git add .  # 将所有修改添加到暂存区\n$ git add *  # Ant风格添加修改\n$ git add *Controller   # 将以Controller结尾的文件的所有修改添加到暂存区\n</code></pre></li>\n<li><p>clone</p>\n<pre><code>  git clone [--template=&lt;template_directory&gt;]\n[-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n[-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]\n[--dissociate] [--separate-git-dir &lt;git dir&gt;]\n[--depth &lt;depth&gt;] [--[no-]single-branch]\n[--recurse-submodules] [--[no-]shallow-submodules]\n[--jobs &lt;n&gt;] [--] &lt;repository&gt; [&lt;directory&gt;]\n</code></pre></li>\n<li><p>status</p>\n<pre><code>git status [&lt;options&gt;…​] [--] [&lt;pathspec&gt;…​]\n</code></pre><p>tracked文件被监控文件，untracked文件为要被忽略的文件，不需要提交，在.gitignore文件中加入要忽略的文件通配符；通过<code>git status -uno</code>可以只列出所有已经被git管理的且被修改但没提交的文件</p>\n</li>\n<li><p>diff</p>\n<pre><code>git diff [options]     [&lt;commit&gt;] [--] [&lt;path&gt;…​]\ngit diff [options] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…​]\ngit diff [options] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…​]\ngit diff [options] &lt;blob&gt; &lt;blob&gt;\ngit diff [options] [--no-index] [--] &lt;path&gt; &lt;path&gt;\n</code></pre></li>\n<li><p>commit<br>  git commit [-a | –interactive | –patch] [-s] [-v] [-u<mode>] [–amend]</mode></p>\n<pre><code>[--dry-run] [(-c | -C | --fixup | --squash) &lt;commit&gt;]\n[-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author] [--allow-empty]\n[--allow-empty-message] [--no-verify] [-e] [--author=&lt;author&gt;]\n[--date=&lt;date&gt;] [--cleanup=&lt;mode&gt;] [--[no-]status]\n[-i | -o] [-S[&lt;keyid&gt;]] [--] [&lt;file&gt;…​]\n\n $ git add . \n $ # 或者~\n $ git add newfile.txt\n $ git commit -m &quot;the commit message&quot; #\n $ git commit -a # 会先把所有已经track的文件的改动`git add`进来，然后提交(有点像svn的一次提交,不用先暂存)。对于没有track的文件,还是需要执行`git add &lt;file&gt;` 命令。\n $ git commit --amend # 增补提交，会使用与当前提交节点相同的父节点进行一次新的提交，旧的提交将会被取消。\n</code></pre></li>\n</ul>\n"},{"title":"java的四种引用","author":"大帅","date":"2018-05-24T03:02:00.000Z","_content":"* 强引用 StrongReference\n    \t强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。  ps：强引用其实也就是我们平时A a = new A()这个意思。\n* 弱引用 WeakReference\n\t\t弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。\n\t\t弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n* 软引用 SoftReference\n\t\t如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存（下文给出示例）。\n\t\t软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。\n* 虚引用 PhantomReference\n\t\t“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。\n\t\t虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。\n\n\t\tReferenceQueue queue = new ReferenceQueue ();\n\n\t\tPhantomReference pr = new PhantomReference (object, queue); \n\n\t\t程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n        \n ### 场景\n 使用软引用构建敏感数据的缓存\n \n\t1 **为什么需要使用软引用**\n\n\t首先，我们看一个雇员信息查询系统的实例。我们将使用一个Java语言实现的雇员信息查询系统查询存储在磁盘文件或者数据库中的雇员人事档案信息。作为一个用户，我们完全有可能需要回头去查看几分钟甚至几秒钟前查看过的雇员档案信息(同样，我们在浏览WEB页面的时候也经常会使用“后退”按钮)。这时我们通常会有两种程序实现方式:一种是把过去查看过的雇员信息保存在内存中，每一个存储了雇员档案信息的Java对象的生命周期贯穿整个应用程序始终;另一种是当用户开始查看其他雇员的档案信息的时候，把存储了当前所查看的雇员档案信息的Java对象结束引用，使得垃圾收集线程可以回收其所占用的内存空间，当用户再次需要浏览该雇员的档案信息的时候，重新构建该雇员的信息。很显然，第一种实现方法将造成大量的内存浪费，而第二种实现的缺陷在于即使垃圾收集线程还没有进行垃圾收集，包含雇员档案信息的对象仍然完好地保存在内存中，应用程序也要重新构建一个对象。我们知道，访问磁盘文件、访问网络资源、查询数据库等操作都是影响应用程序执行性能的重要因素，如果能重新获取那些尚未被回收的Java对象的引用，必将减少不必要的访问，大大提高程序的运行速度。\n\n\t2 **如果使用软引用**\n\tSoftReference的特点是它的一个实例保存对一个Java对象的软引用，该软引用的存在不妨碍垃圾收集线程对该Java对象的回收。也就是说，一旦SoftReference保存了对一个Java对象的软引用后，在垃圾线程对这个Java对象回收前，SoftReference类所提供的get()方法返回Java对象的强引用。另外，一旦垃圾线程回收该Java对象之后，get()方法将返回null。\n\t看下面代码:\n\n\t\tMyObject aRef = new\n\t\tMyObject();\n\n\t\tSoftReference aSoftRef=new \t\t\tSoftReference(aRef); \n\n\t此时，对于这个MyObject对象，有两个引用路径，一个是来自SoftReference对象的软引用，一个来自变量aReference的强引用，所以这个MyObject对象是强可及对象。\n\t随即，我们可以结束aReference对这个MyObject实例的强引用:\n\taRef = null;\n\t此后，这个MyObject对象成为了软可及对象。如果垃圾收集线程进行内存垃圾收集，并不会因为有一个SoftReference对该对象的引用而始终保留该对象。Java虚拟机的垃圾收集线程对软可及对象和其他一般Java对象进行了区别对待:软可及对象的清理是由垃圾收集线程根据其特定算法按照内存需求决定的。也就是说，垃圾收集线程会在虚拟机抛出OutOfMemoryError之前回收软可及对象，而且虚拟机会尽可能优先回收长时间闲置不用的软可及对象，对那些刚刚构建的或刚刚使用过的“新”软可反对象会被虚拟机尽可能保留。在回收这些对象之前，我们可以通过:\n\n\t\tMyObject anotherRef=(MyObject)aSoftRef.get(); \n\n\t重新获得对该实例的强引用。而回收之后，调用get()方法就只能得到null了。\n\n\t3 ****使用ReferenceQueue清除失去了软引用对象的SoftReference****\n\t作为一个Java对象，SoftReference对象除了具有保存软引用的特殊性之外，也具有Java对象的一般性。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null,但这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。在java.lang.ref包里还提供了ReferenceQueue。如果在创建SoftReference对象的时候，使用了一个ReferenceQueue对象作为参数提供给SoftReference的构造方法，如:\n\n\t\tReferenceQueue queue = new ReferenceQueue();\n\t\n\t\tSoftReferenceref=new SoftReference(aMyObject, queue); \n\n\t那么当这个SoftReference所软引用的aMyOhject被垃圾收集器回收的同时，ref所强引用的SoftReference对象被列入ReferenceQueue。也就是说，ReferenceQueue中保存的对象是Reference对象，而且是已经失去了它所软引用的对象的Reference对象。另外从ReferenceQueue这个名字也可以看出，它是一个队列，当我们调用它的poll()方法的时候，如果这个队列中不是空队列，那么将返回队列前面的那个Reference对象。\n\t在任何时候，我们都可以调用ReferenceQueue的poll()方法来检查是否有它所关心的非强可及对象被回收。如果队列为空，将返回一个null,否则该方法返回队列中前面的一个Reference对象。利用这个方法，我们可以检查哪个SoftReference所软引用的对象已经被回收。于是我们可以把这些失去所软引用的对象的SoftReference对象清除掉。常用的方式为:\n\n\t\tSoftReference ref = null;\n\n\t\twhile ((ref = (EmployeeRef) q.poll()) != null) {\n\t\t// 清除ref\n\t\t}\n    \n\t[抄自--->Java四种引用包括强引用，软引用，弱引用，虚引用。](https://www.cnblogs.com/yw-ah/p/5830458.html)","source":"_posts/va的四种引用.md","raw":"title: java的四种引用\nauthor: 大帅\ntags:\n  - 引用\n  - ''\ncategories:\n  - Java\ndate: 2018-05-24 11:02:00\n---\n* 强引用 StrongReference\n    \t强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。  ps：强引用其实也就是我们平时A a = new A()这个意思。\n* 弱引用 WeakReference\n\t\t弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。\n\t\t弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n* 软引用 SoftReference\n\t\t如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存（下文给出示例）。\n\t\t软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。\n* 虚引用 PhantomReference\n\t\t“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。\n\t\t虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。\n\n\t\tReferenceQueue queue = new ReferenceQueue ();\n\n\t\tPhantomReference pr = new PhantomReference (object, queue); \n\n\t\t程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n        \n ### 场景\n 使用软引用构建敏感数据的缓存\n \n\t1 **为什么需要使用软引用**\n\n\t首先，我们看一个雇员信息查询系统的实例。我们将使用一个Java语言实现的雇员信息查询系统查询存储在磁盘文件或者数据库中的雇员人事档案信息。作为一个用户，我们完全有可能需要回头去查看几分钟甚至几秒钟前查看过的雇员档案信息(同样，我们在浏览WEB页面的时候也经常会使用“后退”按钮)。这时我们通常会有两种程序实现方式:一种是把过去查看过的雇员信息保存在内存中，每一个存储了雇员档案信息的Java对象的生命周期贯穿整个应用程序始终;另一种是当用户开始查看其他雇员的档案信息的时候，把存储了当前所查看的雇员档案信息的Java对象结束引用，使得垃圾收集线程可以回收其所占用的内存空间，当用户再次需要浏览该雇员的档案信息的时候，重新构建该雇员的信息。很显然，第一种实现方法将造成大量的内存浪费，而第二种实现的缺陷在于即使垃圾收集线程还没有进行垃圾收集，包含雇员档案信息的对象仍然完好地保存在内存中，应用程序也要重新构建一个对象。我们知道，访问磁盘文件、访问网络资源、查询数据库等操作都是影响应用程序执行性能的重要因素，如果能重新获取那些尚未被回收的Java对象的引用，必将减少不必要的访问，大大提高程序的运行速度。\n\n\t2 **如果使用软引用**\n\tSoftReference的特点是它的一个实例保存对一个Java对象的软引用，该软引用的存在不妨碍垃圾收集线程对该Java对象的回收。也就是说，一旦SoftReference保存了对一个Java对象的软引用后，在垃圾线程对这个Java对象回收前，SoftReference类所提供的get()方法返回Java对象的强引用。另外，一旦垃圾线程回收该Java对象之后，get()方法将返回null。\n\t看下面代码:\n\n\t\tMyObject aRef = new\n\t\tMyObject();\n\n\t\tSoftReference aSoftRef=new \t\t\tSoftReference(aRef); \n\n\t此时，对于这个MyObject对象，有两个引用路径，一个是来自SoftReference对象的软引用，一个来自变量aReference的强引用，所以这个MyObject对象是强可及对象。\n\t随即，我们可以结束aReference对这个MyObject实例的强引用:\n\taRef = null;\n\t此后，这个MyObject对象成为了软可及对象。如果垃圾收集线程进行内存垃圾收集，并不会因为有一个SoftReference对该对象的引用而始终保留该对象。Java虚拟机的垃圾收集线程对软可及对象和其他一般Java对象进行了区别对待:软可及对象的清理是由垃圾收集线程根据其特定算法按照内存需求决定的。也就是说，垃圾收集线程会在虚拟机抛出OutOfMemoryError之前回收软可及对象，而且虚拟机会尽可能优先回收长时间闲置不用的软可及对象，对那些刚刚构建的或刚刚使用过的“新”软可反对象会被虚拟机尽可能保留。在回收这些对象之前，我们可以通过:\n\n\t\tMyObject anotherRef=(MyObject)aSoftRef.get(); \n\n\t重新获得对该实例的强引用。而回收之后，调用get()方法就只能得到null了。\n\n\t3 ****使用ReferenceQueue清除失去了软引用对象的SoftReference****\n\t作为一个Java对象，SoftReference对象除了具有保存软引用的特殊性之外，也具有Java对象的一般性。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null,但这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。在java.lang.ref包里还提供了ReferenceQueue。如果在创建SoftReference对象的时候，使用了一个ReferenceQueue对象作为参数提供给SoftReference的构造方法，如:\n\n\t\tReferenceQueue queue = new ReferenceQueue();\n\t\n\t\tSoftReferenceref=new SoftReference(aMyObject, queue); \n\n\t那么当这个SoftReference所软引用的aMyOhject被垃圾收集器回收的同时，ref所强引用的SoftReference对象被列入ReferenceQueue。也就是说，ReferenceQueue中保存的对象是Reference对象，而且是已经失去了它所软引用的对象的Reference对象。另外从ReferenceQueue这个名字也可以看出，它是一个队列，当我们调用它的poll()方法的时候，如果这个队列中不是空队列，那么将返回队列前面的那个Reference对象。\n\t在任何时候，我们都可以调用ReferenceQueue的poll()方法来检查是否有它所关心的非强可及对象被回收。如果队列为空，将返回一个null,否则该方法返回队列中前面的一个Reference对象。利用这个方法，我们可以检查哪个SoftReference所软引用的对象已经被回收。于是我们可以把这些失去所软引用的对象的SoftReference对象清除掉。常用的方式为:\n\n\t\tSoftReference ref = null;\n\n\t\twhile ((ref = (EmployeeRef) q.poll()) != null) {\n\t\t// 清除ref\n\t\t}\n    \n\t[抄自--->Java四种引用包括强引用，软引用，弱引用，虚引用。](https://www.cnblogs.com/yw-ah/p/5830458.html)","slug":"va的四种引用","published":1,"updated":"2018-05-24T05:55:03.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxp001ax8w5s61s1d5z","content":"<ul>\n<li>强引用 StrongReference<pre><code>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。  ps：强引用其实也就是我们平时A a = new A()这个意思。\n</code></pre></li>\n<li><p>弱引用 WeakReference</p>\n<pre><code>弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。\n弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n</code></pre></li>\n<li><p>软引用 SoftReference</p>\n<pre><code>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存（下文给出示例）。\n软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。\n</code></pre></li>\n<li><p>虚引用 PhantomReference</p>\n<pre><code>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。\n虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。\n\nReferenceQueue queue = new ReferenceQueue ();\n\nPhantomReference pr = new PhantomReference (object, queue); \n\n程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n</code></pre><h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>使用软引用构建敏感数据的缓存</p>\n<p>  1 <strong>为什么需要使用软引用</strong></p>\n<p>  首先，我们看一个雇员信息查询系统的实例。我们将使用一个Java语言实现的雇员信息查询系统查询存储在磁盘文件或者数据库中的雇员人事档案信息。作为一个用户，我们完全有可能需要回头去查看几分钟甚至几秒钟前查看过的雇员档案信息(同样，我们在浏览WEB页面的时候也经常会使用“后退”按钮)。这时我们通常会有两种程序实现方式:一种是把过去查看过的雇员信息保存在内存中，每一个存储了雇员档案信息的Java对象的生命周期贯穿整个应用程序始终;另一种是当用户开始查看其他雇员的档案信息的时候，把存储了当前所查看的雇员档案信息的Java对象结束引用，使得垃圾收集线程可以回收其所占用的内存空间，当用户再次需要浏览该雇员的档案信息的时候，重新构建该雇员的信息。很显然，第一种实现方法将造成大量的内存浪费，而第二种实现的缺陷在于即使垃圾收集线程还没有进行垃圾收集，包含雇员档案信息的对象仍然完好地保存在内存中，应用程序也要重新构建一个对象。我们知道，访问磁盘文件、访问网络资源、查询数据库等操作都是影响应用程序执行性能的重要因素，如果能重新获取那些尚未被回收的Java对象的引用，必将减少不必要的访问，大大提高程序的运行速度。</p>\n<p>  2 <strong>如果使用软引用</strong><br>  SoftReference的特点是它的一个实例保存对一个Java对象的软引用，该软引用的存在不妨碍垃圾收集线程对该Java对象的回收。也就是说，一旦SoftReference保存了对一个Java对象的软引用后，在垃圾线程对这个Java对象回收前，SoftReference类所提供的get()方法返回Java对象的强引用。另外，一旦垃圾线程回收该Java对象之后，get()方法将返回null。<br>  看下面代码:</p>\n<pre><code>MyObject aRef = new\nMyObject();\n\nSoftReference aSoftRef=new             SoftReference(aRef); \n</code></pre><p>  此时，对于这个MyObject对象，有两个引用路径，一个是来自SoftReference对象的软引用，一个来自变量aReference的强引用，所以这个MyObject对象是强可及对象。<br>  随即，我们可以结束aReference对这个MyObject实例的强引用:<br>  aRef = null;<br>  此后，这个MyObject对象成为了软可及对象。如果垃圾收集线程进行内存垃圾收集，并不会因为有一个SoftReference对该对象的引用而始终保留该对象。Java虚拟机的垃圾收集线程对软可及对象和其他一般Java对象进行了区别对待:软可及对象的清理是由垃圾收集线程根据其特定算法按照内存需求决定的。也就是说，垃圾收集线程会在虚拟机抛出OutOfMemoryError之前回收软可及对象，而且虚拟机会尽可能优先回收长时间闲置不用的软可及对象，对那些刚刚构建的或刚刚使用过的“新”软可反对象会被虚拟机尽可能保留。在回收这些对象之前，我们可以通过:</p>\n<pre><code>MyObject anotherRef=(MyObject)aSoftRef.get(); \n</code></pre><p>  重新获得对该实例的强引用。而回收之后，调用get()方法就只能得到null了。</p>\n<p>  3 <strong><strong>使用ReferenceQueue清除失去了软引用对象的SoftReference</strong></strong><br>  作为一个Java对象，SoftReference对象除了具有保存软引用的特殊性之外，也具有Java对象的一般性。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null,但这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。在java.lang.ref包里还提供了ReferenceQueue。如果在创建SoftReference对象的时候，使用了一个ReferenceQueue对象作为参数提供给SoftReference的构造方法，如:</p>\n<pre><code>ReferenceQueue queue = new ReferenceQueue();\n\nSoftReferenceref=new SoftReference(aMyObject, queue); \n</code></pre><p>  那么当这个SoftReference所软引用的aMyOhject被垃圾收集器回收的同时，ref所强引用的SoftReference对象被列入ReferenceQueue。也就是说，ReferenceQueue中保存的对象是Reference对象，而且是已经失去了它所软引用的对象的Reference对象。另外从ReferenceQueue这个名字也可以看出，它是一个队列，当我们调用它的poll()方法的时候，如果这个队列中不是空队列，那么将返回队列前面的那个Reference对象。<br>  在任何时候，我们都可以调用ReferenceQueue的poll()方法来检查是否有它所关心的非强可及对象被回收。如果队列为空，将返回一个null,否则该方法返回队列中前面的一个Reference对象。利用这个方法，我们可以检查哪个SoftReference所软引用的对象已经被回收。于是我们可以把这些失去所软引用的对象的SoftReference对象清除掉。常用的方式为:</p>\n<pre><code>SoftReference ref = null;\n\nwhile ((ref = (EmployeeRef) q.poll()) != null) {\n// 清除ref\n}\n</code></pre><p>  <a href=\"https://www.cnblogs.com/yw-ah/p/5830458.html\" target=\"_blank\" rel=\"noopener\">抄自—&gt;Java四种引用包括强引用，软引用，弱引用，虚引用。</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>强引用 StrongReference<pre><code>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。  ps：强引用其实也就是我们平时A a = new A()这个意思。\n</code></pre></li>\n<li><p>弱引用 WeakReference</p>\n<pre><code>弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。\n弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n</code></pre></li>\n<li><p>软引用 SoftReference</p>\n<pre><code>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存（下文给出示例）。\n软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。\n</code></pre></li>\n<li><p>虚引用 PhantomReference</p>\n<pre><code>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。\n虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。\n\nReferenceQueue queue = new ReferenceQueue ();\n\nPhantomReference pr = new PhantomReference (object, queue); \n\n程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n</code></pre><h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>使用软引用构建敏感数据的缓存</p>\n<p>  1 <strong>为什么需要使用软引用</strong></p>\n<p>  首先，我们看一个雇员信息查询系统的实例。我们将使用一个Java语言实现的雇员信息查询系统查询存储在磁盘文件或者数据库中的雇员人事档案信息。作为一个用户，我们完全有可能需要回头去查看几分钟甚至几秒钟前查看过的雇员档案信息(同样，我们在浏览WEB页面的时候也经常会使用“后退”按钮)。这时我们通常会有两种程序实现方式:一种是把过去查看过的雇员信息保存在内存中，每一个存储了雇员档案信息的Java对象的生命周期贯穿整个应用程序始终;另一种是当用户开始查看其他雇员的档案信息的时候，把存储了当前所查看的雇员档案信息的Java对象结束引用，使得垃圾收集线程可以回收其所占用的内存空间，当用户再次需要浏览该雇员的档案信息的时候，重新构建该雇员的信息。很显然，第一种实现方法将造成大量的内存浪费，而第二种实现的缺陷在于即使垃圾收集线程还没有进行垃圾收集，包含雇员档案信息的对象仍然完好地保存在内存中，应用程序也要重新构建一个对象。我们知道，访问磁盘文件、访问网络资源、查询数据库等操作都是影响应用程序执行性能的重要因素，如果能重新获取那些尚未被回收的Java对象的引用，必将减少不必要的访问，大大提高程序的运行速度。</p>\n<p>  2 <strong>如果使用软引用</strong><br>  SoftReference的特点是它的一个实例保存对一个Java对象的软引用，该软引用的存在不妨碍垃圾收集线程对该Java对象的回收。也就是说，一旦SoftReference保存了对一个Java对象的软引用后，在垃圾线程对这个Java对象回收前，SoftReference类所提供的get()方法返回Java对象的强引用。另外，一旦垃圾线程回收该Java对象之后，get()方法将返回null。<br>  看下面代码:</p>\n<pre><code>MyObject aRef = new\nMyObject();\n\nSoftReference aSoftRef=new             SoftReference(aRef); \n</code></pre><p>  此时，对于这个MyObject对象，有两个引用路径，一个是来自SoftReference对象的软引用，一个来自变量aReference的强引用，所以这个MyObject对象是强可及对象。<br>  随即，我们可以结束aReference对这个MyObject实例的强引用:<br>  aRef = null;<br>  此后，这个MyObject对象成为了软可及对象。如果垃圾收集线程进行内存垃圾收集，并不会因为有一个SoftReference对该对象的引用而始终保留该对象。Java虚拟机的垃圾收集线程对软可及对象和其他一般Java对象进行了区别对待:软可及对象的清理是由垃圾收集线程根据其特定算法按照内存需求决定的。也就是说，垃圾收集线程会在虚拟机抛出OutOfMemoryError之前回收软可及对象，而且虚拟机会尽可能优先回收长时间闲置不用的软可及对象，对那些刚刚构建的或刚刚使用过的“新”软可反对象会被虚拟机尽可能保留。在回收这些对象之前，我们可以通过:</p>\n<pre><code>MyObject anotherRef=(MyObject)aSoftRef.get(); \n</code></pre><p>  重新获得对该实例的强引用。而回收之后，调用get()方法就只能得到null了。</p>\n<p>  3 <strong><strong>使用ReferenceQueue清除失去了软引用对象的SoftReference</strong></strong><br>  作为一个Java对象，SoftReference对象除了具有保存软引用的特殊性之外，也具有Java对象的一般性。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null,但这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。在java.lang.ref包里还提供了ReferenceQueue。如果在创建SoftReference对象的时候，使用了一个ReferenceQueue对象作为参数提供给SoftReference的构造方法，如:</p>\n<pre><code>ReferenceQueue queue = new ReferenceQueue();\n\nSoftReferenceref=new SoftReference(aMyObject, queue); \n</code></pre><p>  那么当这个SoftReference所软引用的aMyOhject被垃圾收集器回收的同时，ref所强引用的SoftReference对象被列入ReferenceQueue。也就是说，ReferenceQueue中保存的对象是Reference对象，而且是已经失去了它所软引用的对象的Reference对象。另外从ReferenceQueue这个名字也可以看出，它是一个队列，当我们调用它的poll()方法的时候，如果这个队列中不是空队列，那么将返回队列前面的那个Reference对象。<br>  在任何时候，我们都可以调用ReferenceQueue的poll()方法来检查是否有它所关心的非强可及对象被回收。如果队列为空，将返回一个null,否则该方法返回队列中前面的一个Reference对象。利用这个方法，我们可以检查哪个SoftReference所软引用的对象已经被回收。于是我们可以把这些失去所软引用的对象的SoftReference对象清除掉。常用的方式为:</p>\n<pre><code>SoftReference ref = null;\n\nwhile ((ref = (EmployeeRef) q.poll()) != null) {\n// 清除ref\n}\n</code></pre><p>  <a href=\"https://www.cnblogs.com/yw-ah/p/5830458.html\" target=\"_blank\" rel=\"noopener\">抄自—&gt;Java四种引用包括强引用，软引用，弱引用，虚引用。</a></p>\n</li>\n</ul>\n"},{"title":"git学习笔记02","author":"大帅","date":"2018-05-23T09:17:23.000Z","_content":"### git的流程\n创建仓库 -> 初始化仓库 -> 初始化项目 -> 个人拉取项目到本地 -> 本地文件添加 -> 本地文件修改 -> 提交 -> 差异合并 -> 更新 -> 合并 -> 提交 -> 推送\n\nhead代表的是分支","source":"_posts/t学习笔记02.md","raw":"title: git学习笔记02\nauthor: 大帅\ndate: 2018-05-23 17:17:23\ntags:\n---\n### git的流程\n创建仓库 -> 初始化仓库 -> 初始化项目 -> 个人拉取项目到本地 -> 本地文件添加 -> 本地文件修改 -> 提交 -> 差异合并 -> 更新 -> 合并 -> 提交 -> 推送\n\nhead代表的是分支","slug":"t学习笔记02","published":1,"updated":"2018-05-24T02:12:49.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxr001dx8w59peyw88p","content":"<h3 id=\"git的流程\"><a href=\"#git的流程\" class=\"headerlink\" title=\"git的流程\"></a>git的流程</h3><p>创建仓库 -&gt; 初始化仓库 -&gt; 初始化项目 -&gt; 个人拉取项目到本地 -&gt; 本地文件添加 -&gt; 本地文件修改 -&gt; 提交 -&gt; 差异合并 -&gt; 更新 -&gt; 合并 -&gt; 提交 -&gt; 推送</p>\n<p>head代表的是分支</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git的流程\"><a href=\"#git的流程\" class=\"headerlink\" title=\"git的流程\"></a>git的流程</h3><p>创建仓库 -&gt; 初始化仓库 -&gt; 初始化项目 -&gt; 个人拉取项目到本地 -&gt; 本地文件添加 -&gt; 本地文件修改 -&gt; 提交 -&gt; 差异合并 -&gt; 更新 -&gt; 合并 -&gt; 提交 -&gt; 推送</p>\n<p>head代表的是分支</p>\n"},{"title":"妞妞照片","date":"2018-05-21T07:08:38.000Z","_content":"{% asset_img 001.jpg 这个虎玩意就是妞妞 %}\n\n","source":"_posts/妞妞照片.md","raw":"---\ntitle: 妞妞照片\ndate: 2018-05-21 15:08:38\ntags: \"妞妞\"\ncategories: \"照片\"\n---\n{% asset_img 001.jpg 这个虎玩意就是妞妞 %}\n\n","slug":"妞妞照片","published":1,"updated":"2018-05-21T07:56:11.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxs001fx8w5kpa1zz23","content":"<img src=\"/2018/05/21/妞妞照片/001.jpg\" title=\"这个虎玩意就是妞妞\">\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/2018/05/21/妞妞照片/001.jpg\" title=\"这个虎玩意就是妞妞\">\n"},{"title":"局域网内 ip连接","author":"大帅","date":"2018-05-24T05:59:00.000Z","_content":"转载[https://blog.csdn.net/jspping/article/details/64438515](https://blog.csdn.net/jspping/article/details/64438515)\n在当今的互联网时代，很多互联网公司、方案公司、智能设备公司或多或少都会接触一些局域网内的相关开发，比如某公司研发了一个app，该app需求是在局域网和网域网都可以获取自己好友的消息或信息，网域网下技术人员可以通过服务器转接信息和发送，实现交互，但是在非联网的局域网下使用部分非使用网络的功能，这就需要研究一些比较不常用的类，在通常情况下，可能大部分人首先想到的肯定是0-255的逐个去ping，这样效率超级低！而且粗暴的方式还可能导致oom，之前说到的 ping ，就是比如局域网下发射信号的主机即服务器，这里我就形象的说是路由器吧，比如路由器的ip是192.168.0.1，那连接它的其他设备的ip被分配的ip也是192.168.0.xxx，这里的xxx是一个取值范围0-255，很多时候大家为了方便就采用循环来对0-255这样的一个一个的去ping，也就是像192.168.0.2、192.168.0.3......这样一直到255,效率非常慢。。。\n\n所以今天就给大家分享一个好东西，java.net.MulticastSocket\n\nMulticastSocket 继承自 DatagramSocket\n\n[java] view plain copy\n/* \n *  Licensed to the Apache Software Foundation (ASF) under one or more \n *  contributor license agreements.  See the NOTICE file distributed with \n *  this work for additional information regarding copyright ownership. \n *  The ASF licenses this file to You under the Apache License, Version 2.0 \n *  (the \"License\"); you may not use this file except in compliance with \n *  the License.  You may obtain a copy of the License at \n * \n *     http://www.apache.org/licenses/LICENSE-2.0 \n * \n *  Unless required by applicable law or agreed to in writing, software \n *  distributed under the License is distributed on an \"AS IS\" BASIS, \n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n *  See the License for the specific language governing permissions and \n *  limitations under the License. \n */  \n  \npackage java.net;  \n  \nimport java.io.IOException;  \nimport java.util.Enumeration;  \nimport libcore.io.IoUtils;  \n  \n/** \n * This class implements a multicast socket for sending and receiving IP \n * multicast datagram packets. \n * \n * @see DatagramSocket \n */  \npublic class MulticastSocket extends DatagramSocket {  \n    /** \n     * Stores the address supplied to setInterface so we can return it from getInterface. The \n     * translation to an interface index is lossy because an interface can have multiple addresses. \n     */  \n    private InetAddress setAddress;  \n  \n    /** \n     * Constructs a multicast socket, bound to any available port on the \n     * local host. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public MulticastSocket() throws IOException {  \n        setReuseAddress(true);  \n    }  \n  \n    /** \n     * Constructs a multicast socket, bound to the specified {@code port} on the \n     * local host. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public MulticastSocket(int port) throws IOException {  \n        super(port);  \n        setReuseAddress(true);  \n    }  \n  \n    /** \n     * Constructs a {@code MulticastSocket} bound to the address and port specified by \n     * {@code localAddress}, or an unbound {@code MulticastSocket} if {@code localAddress == null}. \n     * \n     * @throws IllegalArgumentException if {@code localAddress} is not supported (because it's not \n     * an {@code InetSocketAddress}, say). \n     * @throws IOException if an error occurs. \n     */  \n    public MulticastSocket(SocketAddress localAddress) throws IOException {  \n        super(localAddress);  \n        setReuseAddress(true);  \n    }  \n  \n    /** \n     * Returns an address of the outgoing network interface used by this socket. To avoid \n     * inherent unpredictability, new code should use {@link #getNetworkInterface} instead. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public InetAddress getInterface() throws SocketException {  \n        checkOpen();  \n        if (setAddress != null) {  \n            return setAddress;  \n        }  \n        InetAddress ipvXaddress = (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);  \n        if (ipvXaddress.isAnyLocalAddress()) {  \n            // the address was not set at the IPv4 level so check the IPv6  \n            // level  \n            NetworkInterface theInterface = getNetworkInterface();  \n            if (theInterface != null) {  \n                Enumeration<InetAddress> addresses = theInterface.getInetAddresses();  \n                if (addresses != null) {  \n                    while (addresses.hasMoreElements()) {  \n                        InetAddress nextAddress = addresses.nextElement();  \n                        if (nextAddress instanceof Inet6Address) {  \n                            return nextAddress;  \n                        }  \n                    }  \n                }  \n            }  \n        }  \n        return ipvXaddress;  \n    }  \n  \n    /** \n     * Returns the outgoing network interface used by this socket. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public NetworkInterface getNetworkInterface() throws SocketException {  \n        checkOpen();  \n        int index = (Integer) impl.getOption(SocketOptions.IP_MULTICAST_IF2);  \n        if (index != 0) {  \n            return NetworkInterface.getByIndex(index);  \n        }  \n        return NetworkInterface.forUnboundMulticastSocket();  \n    }  \n  \n    /** \n     * Returns the time-to-live (TTL) for multicast packets sent on this socket. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public int getTimeToLive() throws IOException {  \n        checkOpen();  \n        return impl.getTimeToLive();  \n    }  \n  \n    /** \n     * Returns the time-to-live (TTL) for multicast packets sent on this socket. \n     * \n     * @throws IOException if an error occurs. \n     * @deprecated Use {@link #getTimeToLive} instead. \n     */  \n    @Deprecated  \n    public byte getTTL() throws IOException {  \n        checkOpen();  \n        return impl.getTTL();  \n    }  \n  \n    /** \n     * Adds this socket to the specified multicast group. A socket must join a \n     * group before data may be received. A socket may be a member of multiple \n     * groups but may join any group only once. \n     * \n     * @param groupAddr \n     *            the multicast group to be joined. \n     * @throws IOException if an error occurs. \n     */  \n    public void joinGroup(InetAddress groupAddr) throws IOException {  \n        checkJoinOrLeave(groupAddr);  \n        impl.join(groupAddr);  \n    }  \n  \n    /** \n     * Adds this socket to the specified multicast group. A socket must join a \n     * group before data may be received. A socket may be a member of multiple \n     * groups but may join any group only once. \n     * \n     * @param groupAddress \n     *            the multicast group to be joined. \n     * @param netInterface \n     *            the network interface on which the datagram packets will be \n     *            received. \n     * @throws IOException \n     *                if the specified address is not a multicast address. \n     * @throws IllegalArgumentException \n     *                if no multicast group is specified. \n     */  \n    public void joinGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {  \n        checkJoinOrLeave(groupAddress, netInterface);  \n        impl.joinGroup(groupAddress, netInterface);  \n    }  \n  \n    /** \n     * Removes this socket from the specified multicast group. \n     * \n     * @param groupAddr \n     *            the multicast group to be left. \n     * @throws NullPointerException \n     *                if {@code groupAddr} is {@code null}. \n     * @throws IOException \n     *                if the specified group address is not a multicast address. \n     */  \n    public void leaveGroup(InetAddress groupAddr) throws IOException {  \n        checkJoinOrLeave(groupAddr);  \n        impl.leave(groupAddr);  \n    }  \n  \n    /** \n     * Removes this socket from the specified multicast group. \n     * \n     * @param groupAddress \n     *            the multicast group to be left. \n     * @param netInterface \n     *            the network interface on which the addresses should be \n     *            dropped. \n     * @throws IOException \n     *                if the specified group address is not a multicast address. \n     * @throws IllegalArgumentException \n     *                if {@code groupAddress} is {@code null}. \n     */  \n    public void leaveGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {  \n        checkJoinOrLeave(groupAddress, netInterface);  \n        impl.leaveGroup(groupAddress, netInterface);  \n    }  \n  \n    private void checkJoinOrLeave(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {  \n        checkOpen();  \n        if (groupAddress == null) {  \n            throw new IllegalArgumentException(\"groupAddress == null\");  \n        }  \n  \n        if (netInterface != null && !netInterface.getInetAddresses().hasMoreElements()) {  \n            throw new SocketException(\"No address associated with interface: \" + netInterface);  \n        }  \n  \n        if (!(groupAddress instanceof InetSocketAddress)) {  \n            throw new IllegalArgumentException(\"Group address not an InetSocketAddress: \" +  \n                    groupAddress.getClass());  \n        }  \n  \n        InetAddress groupAddr = ((InetSocketAddress) groupAddress).getAddress();  \n        if (groupAddr == null) {  \n            throw new SocketException(\"Group address has no address: \" + groupAddress);  \n        }  \n  \n        if (!groupAddr.isMulticastAddress()) {  \n            throw new IOException(\"Not a multicast group: \" + groupAddr);  \n        }  \n    }  \n  \n    private void checkJoinOrLeave(InetAddress groupAddr) throws IOException {  \n        checkOpen();  \n        if (groupAddr == null) {  \n            throw new IllegalArgumentException(\"groupAddress == null\");  \n        }  \n        if (!groupAddr.isMulticastAddress()) {  \n            throw new IOException(\"Not a multicast group: \" + groupAddr);  \n        }  \n    }  \n  \n    /** \n     * Sends the given {@code packet} on this socket, using the given {@code ttl}. This method is \n     * deprecated because it modifies the TTL socket option for this socket twice on each call. \n     * \n     * @throws IOException if an error occurs. \n     * @deprecated Use {@link #setTimeToLive} instead. \n     */  \n    @Deprecated  \n    public void send(DatagramPacket packet, byte ttl) throws IOException {  \n        checkOpen();  \n        InetAddress packAddr = packet.getAddress();  \n        int currTTL = getTimeToLive();  \n        if (packAddr.isMulticastAddress() && (byte) currTTL != ttl) {  \n            try {  \n                setTimeToLive(ttl & 0xff);  \n                impl.send(packet);  \n            } finally {  \n                setTimeToLive(currTTL);  \n            }  \n        } else {  \n            impl.send(packet);  \n        }  \n    }  \n  \n    /** \n     * Sets the outgoing network interface used by this socket. The interface used is the first \n     * interface found to have the given {@code address}. To avoid inherent unpredictability, \n     * new code should use {@link #getNetworkInterface} instead. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public void setInterface(InetAddress address) throws SocketException {  \n        checkOpen();  \n        if (address == null) {  \n            throw new NullPointerException(\"address == null\");  \n        }  \n  \n        NetworkInterface networkInterface = NetworkInterface.getByInetAddress(address);  \n        if (networkInterface == null) {  \n            throw new SocketException(\"Address not associated with an interface: \" + address);  \n        }  \n        impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());  \n        this.setAddress = address;  \n    }  \n  \n    /** \n     * Sets the outgoing network interface used by this socket to the given \n     * {@code networkInterface}. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public void setNetworkInterface(NetworkInterface networkInterface) throws SocketException {  \n        checkOpen();  \n        if (networkInterface == null) {  \n            throw new SocketException(\"networkInterface == null\");  \n        }  \n  \n        impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());  \n        this.setAddress = null;  \n    }  \n  \n    /** \n     * Sets the time-to-live (TTL) for multicast packets sent on this socket. \n     * Valid TTL values are between 0 and 255 inclusive. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public void setTimeToLive(int ttl) throws IOException {  \n        checkOpen();  \n        if (ttl < 0 || ttl > 255) {  \n            throw new IllegalArgumentException(\"TimeToLive out of bounds: \" + ttl);  \n        }  \n        impl.setTimeToLive(ttl);  \n    }  \n  \n    /** \n     * Sets the time-to-live (TTL) for multicast packets sent on this socket. \n     * Valid TTL values are between 0 and 255 inclusive. \n     * \n     * @throws IOException if an error occurs. \n     * @deprecated Use {@link #setTimeToLive} instead. \n     */  \n    @Deprecated  \n    public void setTTL(byte ttl) throws IOException {  \n        checkOpen();  \n        impl.setTTL(ttl);  \n    }  \n  \n    @Override  \n    synchronized void createSocket(int aPort, InetAddress addr) throws SocketException {  \n        impl = factory != null ? factory.createDatagramSocketImpl() : new PlainDatagramSocketImpl();  \n        impl.create();  \n        try {  \n            impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.TRUE);  \n            impl.bind(aPort, addr);  \n            isBound = true;  \n        } catch (SocketException e) {  \n            close();  \n            throw e;  \n        }  \n    }  \n  \n    /** \n     * Returns true if multicast loopback is <i>disabled</i>. \n     * See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the \n     * opposite of the underlying Unix {@code IP_MULTICAST_LOOP}. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public boolean getLoopbackMode() throws SocketException {  \n        checkOpen();  \n        return !((Boolean) impl.getOption(SocketOptions.IP_MULTICAST_LOOP)).booleanValue();  \n    }  \n  \n    /** \n     * Disables multicast loopback if {@code disable == true}. \n     * See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the \n     * opposite of the underlying Unix {@code IP_MULTICAST_LOOP}: true means disabled, false \n     * means enabled. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public void setLoopbackMode(boolean disable) throws SocketException {  \n        checkOpen();  \n        impl.setOption(SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(!disable));  \n    }  \n}  \n\n了解一下该类后可以开始下面的编程，首先说一下客户端，再说服务端，最后说明使用方法\n①客户端代码核心：\n\n[java] view plain copy\n@Override  \nprotected void onResume() {  \n    super.onResume();  \n    /** \n     * @author Engineer-Jsp \n     * 笔者在该 Activity 的 onResume()函数初始化接收的侦听 \n     */  \n    onBrodacastReceiver();  \n}  \n②onBrodacastReceiver()函数：\n[java] view plain copy\nMulticastSocket multicastSocket;  \n  \n/** \n * @author Engineer-Jsp \n * onBrodacastReceiver() \n */  \nprivate void onBrodacastReceiver() {  \n    new Thread(new Runnable() {  \n        @Override  \n        public void run() {  \n            try {  \n                // 接收数据时需要指定监听的端口号  \n                multicastSocket = new MulticastSocket(10001);  \n                // 创建组播ID地址  \n                InetAddress address = InetAddress.getByName(\"239.0.0.1\");  \n                // 加入地址  \n                multicastSocket.joinGroup(address);  \n                // 包长  \n                byte[] buf = new byte[1024];  \n                while (true) {  \n                    // 数据报  \n                    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n                    // 接收数据，同样会进入阻塞状态  \n                    multicastSocket.receive(datagramPacket);   \n                    // 从buffer中截取收到的数据  \n                    byte[] message = new byte[datagramPacket.getLength()];  \n                    // 数组拷贝  \n                    System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n                    // 打印来自组播里其他服务的or客户端的ip  \n                    System.out.println(datagramPacket.getAddress());  \n                    // 打印来自组播里其他服务的or客户端的消息  \n                    System.out.println(new String(message));  \n                    // 收到消息后可以进行记录然后二次确认，如果只是想获取ip，在发送方收到该消息后可关闭套接字，从而释放资源  \n                    onBrodacastSend(datagramPacket.getAddress());  \n                }  \n            } catch (IOException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }).start();  \n}  \n\n③ onBrodacastSend() 函数\n[java] view plain copy\n/** \n * onBrodacastSend() \n * @author Engineer-Jsp \n * @param address ip \n */  \nprivate void onBrodacastSend(InetAddress address) {  \n    // 假设 239.0.0.1 已经收到了来自其他组ip段的消息，为了进行二次确认，发送 \"snoop\"  \n    // 进行确认，当发送方收到该消息可以释放资源  \n    String out = \"snoop\";  \n    // 获取\"snoop\"的字节数组  \n    byte[] buf = out.getBytes();  \n    // 组报  \n    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n    // 设置地址，该地址来自onBrodacastReceiver()函数阻塞数据报，datagramPacket.getAddress()  \n    datagramPacket.setAddress(address);  \n    // 发送的端口号  \n    datagramPacket.setPort(8082);  \n    try {  \n        // 开始发送  \n        multicastSocket.send(datagramPacket);  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n\n这是客户端的代码，下面开始上服务端的代码\n①初始化\n\n[java] view plain copy\n@Override  \nprotected void onResume() {  \n    super.onResume();  \n    /** \n     * @author Engineer-Jsp  \n     * 笔者在该 Activity 的 onResume()函数初始化接收和发送 \n     * onBrodacastSend() 发送 \n     * onBrodacastReceiver() 接收 \n     */  \n    onBrodacastSend();  \n    onBrodacastReceiver();  \n}  \n② onBrodacastSend() 函数\n[java] view plain copy\nInetAddress address;  \nMulticastSocket multicastSocket;  \n  \n/** \n * @author Engineer-Jsp  \n * onBrodacastSend() 发送 \n */  \nprivate void onBrodacastSend() {  \n    try {  \n        // 侦听的端口  \n        multicastSocket = new MulticastSocket(8082);  \n        // 使用D类地址，该地址为发起组播的那个ip段，即侦听10001的套接字  \n        address = InetAddress.getByName(\"239.0.0.1\");  \n        new Thread(new Runnable() {  \n            @Override  \n            public void run() {  \n                while (true) {  \n                    // 获取当前时间  \n                    String time = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());  \n                    // 当前时间+标识后缀  \n                    time = time + \" >>> form server onBrodacastSend()\";  \n                    // 获取当前时间+标识后缀的字节数组  \n                    byte[] buf = time.getBytes();  \n                    // 组报  \n                    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n                    // 向组播ID，即接收group /239.0.0.1  端口 10001  \n                    datagramPacket.setAddress(address);   \n                    // 发送的端口号  \n                    datagramPacket.setPort(10001);  \n                    try {  \n                        // 开始发送  \n                        multicastSocket.send(datagramPacket);  \n                        // 每执行一次，线程休眠2s，然后继续下一次任务  \n                        Thread.sleep(2000);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    } catch (IOException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        }).start();  \n    } catch (UnknownHostException e) {  \n        e.printStackTrace();  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n\n\n③onBrodacastReceiver(）函数\n[java] view plain copy\n/** \n * @author Engineer-Jsp  \n * onBrodacastReceiver() 接收 \n */  \nprivate void onBrodacastReceiver() {  \n    new Thread(new Runnable() {  \n        @Override  \n        public void run() {  \n            try {  \n                // 字节数组的格式，即最大大小  \n                byte[] buf = new byte[1024];  \n                while (true) {  \n                    // 组报格式  \n                    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n                    // 接收来自group组播10001端口的二次确认，阻塞  \n                    multicastSocket.receive(datagramPacket);  \n                    // 从buf中截取收到的数据  \n                    byte[] message = new byte[datagramPacket.getLength()];  \n                    // 数组拷贝  \n                    System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n                    // 这里打印ip字段  \n                    System.out.println(datagramPacket.getAddress());  \n                    // 打印组播端口10001发送过来的消息  \n                    System.out.println(new String(message));  \n                    // 这里可以根据结接收到的内容进行分发处理，假如收到 10001的 \"snoop\"字段为关闭命令，即可在此处关闭套接字从而释放资源  \n                }  \n            } catch (IOException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }).start();  \n}  \n\n这是服务端的代码，也分享完了，下面画一个图来大概描述一下他们的工作流程图示意：\n\n\n使用方法：①首先需要在同一wifi网络下 ②需要获取所有ip的手机安装客户端，即侦听10001的那个端口 ③所有需要将信息共享并组播到 239.0.0.1:10001这个group的安装服务端 ④开启服务端与客户端开始进行数据的交互\n\n以上是大致的描述图，帮助大家理解，谢谢观博！","source":"_posts/局域网内-ip连接.md","raw":"title: 局域网内 ip连接\nauthor: 大帅\ntags:\n  - MulticastSocket\n  - ''\ncategories:\n  - Android\ndate: 2018-05-24 13:59:00\n---\n转载[https://blog.csdn.net/jspping/article/details/64438515](https://blog.csdn.net/jspping/article/details/64438515)\n在当今的互联网时代，很多互联网公司、方案公司、智能设备公司或多或少都会接触一些局域网内的相关开发，比如某公司研发了一个app，该app需求是在局域网和网域网都可以获取自己好友的消息或信息，网域网下技术人员可以通过服务器转接信息和发送，实现交互，但是在非联网的局域网下使用部分非使用网络的功能，这就需要研究一些比较不常用的类，在通常情况下，可能大部分人首先想到的肯定是0-255的逐个去ping，这样效率超级低！而且粗暴的方式还可能导致oom，之前说到的 ping ，就是比如局域网下发射信号的主机即服务器，这里我就形象的说是路由器吧，比如路由器的ip是192.168.0.1，那连接它的其他设备的ip被分配的ip也是192.168.0.xxx，这里的xxx是一个取值范围0-255，很多时候大家为了方便就采用循环来对0-255这样的一个一个的去ping，也就是像192.168.0.2、192.168.0.3......这样一直到255,效率非常慢。。。\n\n所以今天就给大家分享一个好东西，java.net.MulticastSocket\n\nMulticastSocket 继承自 DatagramSocket\n\n[java] view plain copy\n/* \n *  Licensed to the Apache Software Foundation (ASF) under one or more \n *  contributor license agreements.  See the NOTICE file distributed with \n *  this work for additional information regarding copyright ownership. \n *  The ASF licenses this file to You under the Apache License, Version 2.0 \n *  (the \"License\"); you may not use this file except in compliance with \n *  the License.  You may obtain a copy of the License at \n * \n *     http://www.apache.org/licenses/LICENSE-2.0 \n * \n *  Unless required by applicable law or agreed to in writing, software \n *  distributed under the License is distributed on an \"AS IS\" BASIS, \n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n *  See the License for the specific language governing permissions and \n *  limitations under the License. \n */  \n  \npackage java.net;  \n  \nimport java.io.IOException;  \nimport java.util.Enumeration;  \nimport libcore.io.IoUtils;  \n  \n/** \n * This class implements a multicast socket for sending and receiving IP \n * multicast datagram packets. \n * \n * @see DatagramSocket \n */  \npublic class MulticastSocket extends DatagramSocket {  \n    /** \n     * Stores the address supplied to setInterface so we can return it from getInterface. The \n     * translation to an interface index is lossy because an interface can have multiple addresses. \n     */  \n    private InetAddress setAddress;  \n  \n    /** \n     * Constructs a multicast socket, bound to any available port on the \n     * local host. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public MulticastSocket() throws IOException {  \n        setReuseAddress(true);  \n    }  \n  \n    /** \n     * Constructs a multicast socket, bound to the specified {@code port} on the \n     * local host. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public MulticastSocket(int port) throws IOException {  \n        super(port);  \n        setReuseAddress(true);  \n    }  \n  \n    /** \n     * Constructs a {@code MulticastSocket} bound to the address and port specified by \n     * {@code localAddress}, or an unbound {@code MulticastSocket} if {@code localAddress == null}. \n     * \n     * @throws IllegalArgumentException if {@code localAddress} is not supported (because it's not \n     * an {@code InetSocketAddress}, say). \n     * @throws IOException if an error occurs. \n     */  \n    public MulticastSocket(SocketAddress localAddress) throws IOException {  \n        super(localAddress);  \n        setReuseAddress(true);  \n    }  \n  \n    /** \n     * Returns an address of the outgoing network interface used by this socket. To avoid \n     * inherent unpredictability, new code should use {@link #getNetworkInterface} instead. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public InetAddress getInterface() throws SocketException {  \n        checkOpen();  \n        if (setAddress != null) {  \n            return setAddress;  \n        }  \n        InetAddress ipvXaddress = (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);  \n        if (ipvXaddress.isAnyLocalAddress()) {  \n            // the address was not set at the IPv4 level so check the IPv6  \n            // level  \n            NetworkInterface theInterface = getNetworkInterface();  \n            if (theInterface != null) {  \n                Enumeration<InetAddress> addresses = theInterface.getInetAddresses();  \n                if (addresses != null) {  \n                    while (addresses.hasMoreElements()) {  \n                        InetAddress nextAddress = addresses.nextElement();  \n                        if (nextAddress instanceof Inet6Address) {  \n                            return nextAddress;  \n                        }  \n                    }  \n                }  \n            }  \n        }  \n        return ipvXaddress;  \n    }  \n  \n    /** \n     * Returns the outgoing network interface used by this socket. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public NetworkInterface getNetworkInterface() throws SocketException {  \n        checkOpen();  \n        int index = (Integer) impl.getOption(SocketOptions.IP_MULTICAST_IF2);  \n        if (index != 0) {  \n            return NetworkInterface.getByIndex(index);  \n        }  \n        return NetworkInterface.forUnboundMulticastSocket();  \n    }  \n  \n    /** \n     * Returns the time-to-live (TTL) for multicast packets sent on this socket. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public int getTimeToLive() throws IOException {  \n        checkOpen();  \n        return impl.getTimeToLive();  \n    }  \n  \n    /** \n     * Returns the time-to-live (TTL) for multicast packets sent on this socket. \n     * \n     * @throws IOException if an error occurs. \n     * @deprecated Use {@link #getTimeToLive} instead. \n     */  \n    @Deprecated  \n    public byte getTTL() throws IOException {  \n        checkOpen();  \n        return impl.getTTL();  \n    }  \n  \n    /** \n     * Adds this socket to the specified multicast group. A socket must join a \n     * group before data may be received. A socket may be a member of multiple \n     * groups but may join any group only once. \n     * \n     * @param groupAddr \n     *            the multicast group to be joined. \n     * @throws IOException if an error occurs. \n     */  \n    public void joinGroup(InetAddress groupAddr) throws IOException {  \n        checkJoinOrLeave(groupAddr);  \n        impl.join(groupAddr);  \n    }  \n  \n    /** \n     * Adds this socket to the specified multicast group. A socket must join a \n     * group before data may be received. A socket may be a member of multiple \n     * groups but may join any group only once. \n     * \n     * @param groupAddress \n     *            the multicast group to be joined. \n     * @param netInterface \n     *            the network interface on which the datagram packets will be \n     *            received. \n     * @throws IOException \n     *                if the specified address is not a multicast address. \n     * @throws IllegalArgumentException \n     *                if no multicast group is specified. \n     */  \n    public void joinGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {  \n        checkJoinOrLeave(groupAddress, netInterface);  \n        impl.joinGroup(groupAddress, netInterface);  \n    }  \n  \n    /** \n     * Removes this socket from the specified multicast group. \n     * \n     * @param groupAddr \n     *            the multicast group to be left. \n     * @throws NullPointerException \n     *                if {@code groupAddr} is {@code null}. \n     * @throws IOException \n     *                if the specified group address is not a multicast address. \n     */  \n    public void leaveGroup(InetAddress groupAddr) throws IOException {  \n        checkJoinOrLeave(groupAddr);  \n        impl.leave(groupAddr);  \n    }  \n  \n    /** \n     * Removes this socket from the specified multicast group. \n     * \n     * @param groupAddress \n     *            the multicast group to be left. \n     * @param netInterface \n     *            the network interface on which the addresses should be \n     *            dropped. \n     * @throws IOException \n     *                if the specified group address is not a multicast address. \n     * @throws IllegalArgumentException \n     *                if {@code groupAddress} is {@code null}. \n     */  \n    public void leaveGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {  \n        checkJoinOrLeave(groupAddress, netInterface);  \n        impl.leaveGroup(groupAddress, netInterface);  \n    }  \n  \n    private void checkJoinOrLeave(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {  \n        checkOpen();  \n        if (groupAddress == null) {  \n            throw new IllegalArgumentException(\"groupAddress == null\");  \n        }  \n  \n        if (netInterface != null && !netInterface.getInetAddresses().hasMoreElements()) {  \n            throw new SocketException(\"No address associated with interface: \" + netInterface);  \n        }  \n  \n        if (!(groupAddress instanceof InetSocketAddress)) {  \n            throw new IllegalArgumentException(\"Group address not an InetSocketAddress: \" +  \n                    groupAddress.getClass());  \n        }  \n  \n        InetAddress groupAddr = ((InetSocketAddress) groupAddress).getAddress();  \n        if (groupAddr == null) {  \n            throw new SocketException(\"Group address has no address: \" + groupAddress);  \n        }  \n  \n        if (!groupAddr.isMulticastAddress()) {  \n            throw new IOException(\"Not a multicast group: \" + groupAddr);  \n        }  \n    }  \n  \n    private void checkJoinOrLeave(InetAddress groupAddr) throws IOException {  \n        checkOpen();  \n        if (groupAddr == null) {  \n            throw new IllegalArgumentException(\"groupAddress == null\");  \n        }  \n        if (!groupAddr.isMulticastAddress()) {  \n            throw new IOException(\"Not a multicast group: \" + groupAddr);  \n        }  \n    }  \n  \n    /** \n     * Sends the given {@code packet} on this socket, using the given {@code ttl}. This method is \n     * deprecated because it modifies the TTL socket option for this socket twice on each call. \n     * \n     * @throws IOException if an error occurs. \n     * @deprecated Use {@link #setTimeToLive} instead. \n     */  \n    @Deprecated  \n    public void send(DatagramPacket packet, byte ttl) throws IOException {  \n        checkOpen();  \n        InetAddress packAddr = packet.getAddress();  \n        int currTTL = getTimeToLive();  \n        if (packAddr.isMulticastAddress() && (byte) currTTL != ttl) {  \n            try {  \n                setTimeToLive(ttl & 0xff);  \n                impl.send(packet);  \n            } finally {  \n                setTimeToLive(currTTL);  \n            }  \n        } else {  \n            impl.send(packet);  \n        }  \n    }  \n  \n    /** \n     * Sets the outgoing network interface used by this socket. The interface used is the first \n     * interface found to have the given {@code address}. To avoid inherent unpredictability, \n     * new code should use {@link #getNetworkInterface} instead. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public void setInterface(InetAddress address) throws SocketException {  \n        checkOpen();  \n        if (address == null) {  \n            throw new NullPointerException(\"address == null\");  \n        }  \n  \n        NetworkInterface networkInterface = NetworkInterface.getByInetAddress(address);  \n        if (networkInterface == null) {  \n            throw new SocketException(\"Address not associated with an interface: \" + address);  \n        }  \n        impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());  \n        this.setAddress = address;  \n    }  \n  \n    /** \n     * Sets the outgoing network interface used by this socket to the given \n     * {@code networkInterface}. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public void setNetworkInterface(NetworkInterface networkInterface) throws SocketException {  \n        checkOpen();  \n        if (networkInterface == null) {  \n            throw new SocketException(\"networkInterface == null\");  \n        }  \n  \n        impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());  \n        this.setAddress = null;  \n    }  \n  \n    /** \n     * Sets the time-to-live (TTL) for multicast packets sent on this socket. \n     * Valid TTL values are between 0 and 255 inclusive. \n     * \n     * @throws IOException if an error occurs. \n     */  \n    public void setTimeToLive(int ttl) throws IOException {  \n        checkOpen();  \n        if (ttl < 0 || ttl > 255) {  \n            throw new IllegalArgumentException(\"TimeToLive out of bounds: \" + ttl);  \n        }  \n        impl.setTimeToLive(ttl);  \n    }  \n  \n    /** \n     * Sets the time-to-live (TTL) for multicast packets sent on this socket. \n     * Valid TTL values are between 0 and 255 inclusive. \n     * \n     * @throws IOException if an error occurs. \n     * @deprecated Use {@link #setTimeToLive} instead. \n     */  \n    @Deprecated  \n    public void setTTL(byte ttl) throws IOException {  \n        checkOpen();  \n        impl.setTTL(ttl);  \n    }  \n  \n    @Override  \n    synchronized void createSocket(int aPort, InetAddress addr) throws SocketException {  \n        impl = factory != null ? factory.createDatagramSocketImpl() : new PlainDatagramSocketImpl();  \n        impl.create();  \n        try {  \n            impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.TRUE);  \n            impl.bind(aPort, addr);  \n            isBound = true;  \n        } catch (SocketException e) {  \n            close();  \n            throw e;  \n        }  \n    }  \n  \n    /** \n     * Returns true if multicast loopback is <i>disabled</i>. \n     * See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the \n     * opposite of the underlying Unix {@code IP_MULTICAST_LOOP}. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public boolean getLoopbackMode() throws SocketException {  \n        checkOpen();  \n        return !((Boolean) impl.getOption(SocketOptions.IP_MULTICAST_LOOP)).booleanValue();  \n    }  \n  \n    /** \n     * Disables multicast loopback if {@code disable == true}. \n     * See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the \n     * opposite of the underlying Unix {@code IP_MULTICAST_LOOP}: true means disabled, false \n     * means enabled. \n     * \n     * @throws SocketException if an error occurs. \n     */  \n    public void setLoopbackMode(boolean disable) throws SocketException {  \n        checkOpen();  \n        impl.setOption(SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(!disable));  \n    }  \n}  \n\n了解一下该类后可以开始下面的编程，首先说一下客户端，再说服务端，最后说明使用方法\n①客户端代码核心：\n\n[java] view plain copy\n@Override  \nprotected void onResume() {  \n    super.onResume();  \n    /** \n     * @author Engineer-Jsp \n     * 笔者在该 Activity 的 onResume()函数初始化接收的侦听 \n     */  \n    onBrodacastReceiver();  \n}  \n②onBrodacastReceiver()函数：\n[java] view plain copy\nMulticastSocket multicastSocket;  \n  \n/** \n * @author Engineer-Jsp \n * onBrodacastReceiver() \n */  \nprivate void onBrodacastReceiver() {  \n    new Thread(new Runnable() {  \n        @Override  \n        public void run() {  \n            try {  \n                // 接收数据时需要指定监听的端口号  \n                multicastSocket = new MulticastSocket(10001);  \n                // 创建组播ID地址  \n                InetAddress address = InetAddress.getByName(\"239.0.0.1\");  \n                // 加入地址  \n                multicastSocket.joinGroup(address);  \n                // 包长  \n                byte[] buf = new byte[1024];  \n                while (true) {  \n                    // 数据报  \n                    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n                    // 接收数据，同样会进入阻塞状态  \n                    multicastSocket.receive(datagramPacket);   \n                    // 从buffer中截取收到的数据  \n                    byte[] message = new byte[datagramPacket.getLength()];  \n                    // 数组拷贝  \n                    System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n                    // 打印来自组播里其他服务的or客户端的ip  \n                    System.out.println(datagramPacket.getAddress());  \n                    // 打印来自组播里其他服务的or客户端的消息  \n                    System.out.println(new String(message));  \n                    // 收到消息后可以进行记录然后二次确认，如果只是想获取ip，在发送方收到该消息后可关闭套接字，从而释放资源  \n                    onBrodacastSend(datagramPacket.getAddress());  \n                }  \n            } catch (IOException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }).start();  \n}  \n\n③ onBrodacastSend() 函数\n[java] view plain copy\n/** \n * onBrodacastSend() \n * @author Engineer-Jsp \n * @param address ip \n */  \nprivate void onBrodacastSend(InetAddress address) {  \n    // 假设 239.0.0.1 已经收到了来自其他组ip段的消息，为了进行二次确认，发送 \"snoop\"  \n    // 进行确认，当发送方收到该消息可以释放资源  \n    String out = \"snoop\";  \n    // 获取\"snoop\"的字节数组  \n    byte[] buf = out.getBytes();  \n    // 组报  \n    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n    // 设置地址，该地址来自onBrodacastReceiver()函数阻塞数据报，datagramPacket.getAddress()  \n    datagramPacket.setAddress(address);  \n    // 发送的端口号  \n    datagramPacket.setPort(8082);  \n    try {  \n        // 开始发送  \n        multicastSocket.send(datagramPacket);  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n\n这是客户端的代码，下面开始上服务端的代码\n①初始化\n\n[java] view plain copy\n@Override  \nprotected void onResume() {  \n    super.onResume();  \n    /** \n     * @author Engineer-Jsp  \n     * 笔者在该 Activity 的 onResume()函数初始化接收和发送 \n     * onBrodacastSend() 发送 \n     * onBrodacastReceiver() 接收 \n     */  \n    onBrodacastSend();  \n    onBrodacastReceiver();  \n}  \n② onBrodacastSend() 函数\n[java] view plain copy\nInetAddress address;  \nMulticastSocket multicastSocket;  \n  \n/** \n * @author Engineer-Jsp  \n * onBrodacastSend() 发送 \n */  \nprivate void onBrodacastSend() {  \n    try {  \n        // 侦听的端口  \n        multicastSocket = new MulticastSocket(8082);  \n        // 使用D类地址，该地址为发起组播的那个ip段，即侦听10001的套接字  \n        address = InetAddress.getByName(\"239.0.0.1\");  \n        new Thread(new Runnable() {  \n            @Override  \n            public void run() {  \n                while (true) {  \n                    // 获取当前时间  \n                    String time = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());  \n                    // 当前时间+标识后缀  \n                    time = time + \" >>> form server onBrodacastSend()\";  \n                    // 获取当前时间+标识后缀的字节数组  \n                    byte[] buf = time.getBytes();  \n                    // 组报  \n                    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n                    // 向组播ID，即接收group /239.0.0.1  端口 10001  \n                    datagramPacket.setAddress(address);   \n                    // 发送的端口号  \n                    datagramPacket.setPort(10001);  \n                    try {  \n                        // 开始发送  \n                        multicastSocket.send(datagramPacket);  \n                        // 每执行一次，线程休眠2s，然后继续下一次任务  \n                        Thread.sleep(2000);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    } catch (IOException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        }).start();  \n    } catch (UnknownHostException e) {  \n        e.printStackTrace();  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n\n\n③onBrodacastReceiver(）函数\n[java] view plain copy\n/** \n * @author Engineer-Jsp  \n * onBrodacastReceiver() 接收 \n */  \nprivate void onBrodacastReceiver() {  \n    new Thread(new Runnable() {  \n        @Override  \n        public void run() {  \n            try {  \n                // 字节数组的格式，即最大大小  \n                byte[] buf = new byte[1024];  \n                while (true) {  \n                    // 组报格式  \n                    DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n                    // 接收来自group组播10001端口的二次确认，阻塞  \n                    multicastSocket.receive(datagramPacket);  \n                    // 从buf中截取收到的数据  \n                    byte[] message = new byte[datagramPacket.getLength()];  \n                    // 数组拷贝  \n                    System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n                    // 这里打印ip字段  \n                    System.out.println(datagramPacket.getAddress());  \n                    // 打印组播端口10001发送过来的消息  \n                    System.out.println(new String(message));  \n                    // 这里可以根据结接收到的内容进行分发处理，假如收到 10001的 \"snoop\"字段为关闭命令，即可在此处关闭套接字从而释放资源  \n                }  \n            } catch (IOException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }).start();  \n}  \n\n这是服务端的代码，也分享完了，下面画一个图来大概描述一下他们的工作流程图示意：\n\n\n使用方法：①首先需要在同一wifi网络下 ②需要获取所有ip的手机安装客户端，即侦听10001的那个端口 ③所有需要将信息共享并组播到 239.0.0.1:10001这个group的安装服务端 ④开启服务端与客户端开始进行数据的交互\n\n以上是大致的描述图，帮助大家理解，谢谢观博！","slug":"局域网内-ip连接","published":1,"updated":"2018-05-24T06:02:02.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxv001ix8w5zl89htz9","content":"<p>转载<a href=\"https://blog.csdn.net/jspping/article/details/64438515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jspping/article/details/64438515</a><br>在当今的互联网时代，很多互联网公司、方案公司、智能设备公司或多或少都会接触一些局域网内的相关开发，比如某公司研发了一个app，该app需求是在局域网和网域网都可以获取自己好友的消息或信息，网域网下技术人员可以通过服务器转接信息和发送，实现交互，但是在非联网的局域网下使用部分非使用网络的功能，这就需要研究一些比较不常用的类，在通常情况下，可能大部分人首先想到的肯定是0-255的逐个去ping，这样效率超级低！而且粗暴的方式还可能导致oom，之前说到的 ping ，就是比如局域网下发射信号的主机即服务器，这里我就形象的说是路由器吧，比如路由器的ip是192.168.0.1，那连接它的其他设备的ip被分配的ip也是192.168.0.xxx，这里的xxx是一个取值范围0-255，很多时候大家为了方便就采用循环来对0-255这样的一个一个的去ping，也就是像192.168.0.2、192.168.0.3……这样一直到255,效率非常慢。。。</p>\n<p>所以今天就给大家分享一个好东西，java.net.MulticastSocket</p>\n<p>MulticastSocket 继承自 DatagramSocket</p>\n<p>[java] view plain copy<br>/* </p>\n<ul>\n<li>Licensed to the Apache Software Foundation (ASF) under one or more </li>\n<li>contributor license agreements.  See the NOTICE file distributed with </li>\n<li>this work for additional information regarding copyright ownership. </li>\n<li>The ASF licenses this file to You under the Apache License, Version 2.0 </li>\n<li>(the “License”); you may not use this file except in compliance with </li>\n<li>the License.  You may obtain a copy of the License at </li>\n<li></li>\n<li><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" target=\"_blank\" rel=\"noopener\">http://www.apache.org/licenses/LICENSE-2.0</a> </li>\n<li></li>\n<li>Unless required by applicable law or agreed to in writing, software </li>\n<li>distributed under the License is distributed on an “AS IS” BASIS, </li>\n<li>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. </li>\n<li>See the License for the specific language governing permissions and </li>\n<li>limitations under the License.<br>*/  </li>\n</ul>\n<p>package java.net;  </p>\n<p>import java.io.IOException;<br>import java.util.Enumeration;<br>import libcore.io.IoUtils;  </p>\n<p>/** </p>\n<ul>\n<li>This class implements a multicast socket for sending and receiving IP </li>\n<li>multicast datagram packets. </li>\n<li></li>\n<li><p>@see DatagramSocket<br>*/<br>public class MulticastSocket extends DatagramSocket {<br> /** </p>\n<ul>\n<li>Stores the address supplied to setInterface so we can return it from getInterface. The </li>\n<li><p>translation to an interface index is lossy because an interface can have multiple addresses.<br>*/<br>private InetAddress setAddress;  </p>\n<p>/** </p>\n</li>\n<li>Constructs a multicast socket, bound to any available port on the </li>\n<li>local host. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public MulticastSocket() throws IOException {<br> setReuseAddress(true);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Constructs a multicast socket, bound to the specified {@code port} on the </li>\n<li>local host. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public MulticastSocket(int port) throws IOException {<br> super(port);<br> setReuseAddress(true);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Constructs a {@code MulticastSocket} bound to the address and port specified by </li>\n<li>{@code localAddress}, or an unbound {@code MulticastSocket} if {@code localAddress == null}. </li>\n<li></li>\n<li>@throws IllegalArgumentException if {@code localAddress} is not supported (because it’s not </li>\n<li>an {@code InetSocketAddress}, say). </li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public MulticastSocket(SocketAddress localAddress) throws IOException {<br> super(localAddress);<br> setReuseAddress(true);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns an address of the outgoing network interface used by this socket. To avoid </li>\n<li>inherent unpredictability, new code should use {@link #getNetworkInterface} instead. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public InetAddress getInterface() throws SocketException {<br> checkOpen();<br> if (setAddress != null) {  </p>\n<pre><code>return setAddress;  \n</code></pre><p> }<br> InetAddress ipvXaddress = (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);<br> if (ipvXaddress.isAnyLocalAddress()) {  </p>\n<pre><code>// the address was not set at the IPv4 level so check the IPv6  \n// level  \nNetworkInterface theInterface = getNetworkInterface();  \nif (theInterface != null) {  \n    Enumeration&lt;InetAddress&gt; addresses = theInterface.getInetAddresses();  \n    if (addresses != null) {  \n        while (addresses.hasMoreElements()) {  \n            InetAddress nextAddress = addresses.nextElement();  \n            if (nextAddress instanceof Inet6Address) {  \n                return nextAddress;  \n            }  \n        }  \n    }  \n}  \n</code></pre><p> }<br> return ipvXaddress;<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns the outgoing network interface used by this socket. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public NetworkInterface getNetworkInterface() throws SocketException {<br> checkOpen();<br> int index = (Integer) impl.getOption(SocketOptions.IP_MULTICAST_IF2);<br> if (index != 0) {  </p>\n<pre><code>return NetworkInterface.getByIndex(index);  \n</code></pre><p> }<br> return NetworkInterface.forUnboundMulticastSocket();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public int getTimeToLive() throws IOException {<br> checkOpen();<br> return impl.getTimeToLive();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li></li>\n<li>@throws IOException if an error occurs. </li>\n<li><p>@deprecated Use {@link #getTimeToLive} instead.<br>*/<br>@Deprecated<br>public byte getTTL() throws IOException {<br> checkOpen();<br> return impl.getTTL();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Adds this socket to the specified multicast group. A socket must join a </li>\n<li>group before data may be received. A socket may be a member of multiple </li>\n<li>groups but may join any group only once. </li>\n<li></li>\n<li>@param groupAddr </li>\n<li>the multicast group to be joined. </li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public void joinGroup(InetAddress groupAddr) throws IOException {<br> checkJoinOrLeave(groupAddr);<br> impl.join(groupAddr);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Adds this socket to the specified multicast group. A socket must join a </li>\n<li>group before data may be received. A socket may be a member of multiple </li>\n<li>groups but may join any group only once. </li>\n<li></li>\n<li>@param groupAddress </li>\n<li>the multicast group to be joined. </li>\n<li>@param netInterface </li>\n<li>the network interface on which the datagram packets will be </li>\n<li>received. </li>\n<li>@throws IOException </li>\n<li>if the specified address is not a multicast address. </li>\n<li>@throws IllegalArgumentException </li>\n<li><p>if no multicast group is specified.<br>*/<br>public void joinGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {<br>checkJoinOrLeave(groupAddress, netInterface);<br>impl.joinGroup(groupAddress, netInterface);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Removes this socket from the specified multicast group. </li>\n<li></li>\n<li>@param groupAddr </li>\n<li>the multicast group to be left. </li>\n<li>@throws NullPointerException </li>\n<li>if {@code groupAddr} is {@code null}. </li>\n<li>@throws IOException </li>\n<li><p>if the specified group address is not a multicast address.<br>*/<br>public void leaveGroup(InetAddress groupAddr) throws IOException {<br>checkJoinOrLeave(groupAddr);<br>impl.leave(groupAddr);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Removes this socket from the specified multicast group. </li>\n<li></li>\n<li>@param groupAddress </li>\n<li>the multicast group to be left. </li>\n<li>@param netInterface </li>\n<li>the network interface on which the addresses should be </li>\n<li>dropped. </li>\n<li>@throws IOException </li>\n<li>if the specified group address is not a multicast address. </li>\n<li>@throws IllegalArgumentException </li>\n<li><p>if {@code groupAddress} is {@code null}.<br>*/<br>public void leaveGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {<br>checkJoinOrLeave(groupAddress, netInterface);<br>impl.leaveGroup(groupAddress, netInterface);<br>}  </p>\n<p>private void checkJoinOrLeave(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {<br>checkOpen();<br>if (groupAddress == null) {<br>throw new IllegalArgumentException(“groupAddress == null”);<br>}  </p>\n<p>if (netInterface != null &amp;&amp; !netInterface.getInetAddresses().hasMoreElements()) {<br>throw new SocketException(“No address associated with interface: “ + netInterface);<br>}  </p>\n<p>if (!(groupAddress instanceof InetSocketAddress)) {<br>throw new IllegalArgumentException(“Group address not an InetSocketAddress: “ +<br>groupAddress.getClass());<br>}  </p>\n<p>InetAddress groupAddr = ((InetSocketAddress) groupAddress).getAddress();<br>if (groupAddr == null) {<br>throw new SocketException(“Group address has no address: “ + groupAddress);<br>}  </p>\n<p>if (!groupAddr.isMulticastAddress()) {<br>throw new IOException(“Not a multicast group: “ + groupAddr);<br>}<br>}  </p>\n<p>private void checkJoinOrLeave(InetAddress groupAddr) throws IOException {<br>checkOpen();<br>if (groupAddr == null) {<br>throw new IllegalArgumentException(“groupAddress == null”);<br>}<br>if (!groupAddr.isMulticastAddress()) {<br>throw new IOException(“Not a multicast group: “ + groupAddr);<br>}<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sends the given {@code packet} on this socket, using the given {@code ttl}. This method is </li>\n<li>deprecated because it modifies the TTL socket option for this socket twice on each call. </li>\n<li></li>\n<li>@throws IOException if an error occurs. </li>\n<li><p>@deprecated Use {@link #setTimeToLive} instead.<br>*/<br>@Deprecated<br>public void send(DatagramPacket packet, byte ttl) throws IOException {<br> checkOpen();<br> InetAddress packAddr = packet.getAddress();<br> int currTTL = getTimeToLive();<br> if (packAddr.isMulticastAddress() &amp;&amp; (byte) currTTL != ttl) {  </p>\n<pre><code>try {  \n    setTimeToLive(ttl &amp; 0xff);  \n    impl.send(packet);  \n} finally {  \n    setTimeToLive(currTTL);  \n}  \n</code></pre><p> } else {  </p>\n<pre><code>impl.send(packet);  \n</code></pre><p> }<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the outgoing network interface used by this socket. The interface used is the first </li>\n<li>interface found to have the given {@code address}. To avoid inherent unpredictability, </li>\n<li>new code should use {@link #getNetworkInterface} instead. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public void setInterface(InetAddress address) throws SocketException {<br> checkOpen();<br> if (address == null) {  </p>\n<pre><code>throw new NullPointerException(&quot;address == null&quot;);  \n</code></pre><p> }  </p>\n<p> NetworkInterface networkInterface = NetworkInterface.getByInetAddress(address);<br> if (networkInterface == null) {  </p>\n<pre><code>throw new SocketException(&quot;Address not associated with an interface: &quot; + address);  \n</code></pre><p> }<br> impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());<br> this.setAddress = address;<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the outgoing network interface used by this socket to the given </li>\n<li>{@code networkInterface}. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public void setNetworkInterface(NetworkInterface networkInterface) throws SocketException {<br> checkOpen();<br> if (networkInterface == null) {  </p>\n<pre><code>throw new SocketException(&quot;networkInterface == null&quot;);  \n</code></pre><p> }  </p>\n<p> impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());<br> this.setAddress = null;<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li>Valid TTL values are between 0 and 255 inclusive. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public void setTimeToLive(int ttl) throws IOException {<br> checkOpen();<br> if (ttl &lt; 0 || ttl &gt; 255) {  </p>\n<pre><code>throw new IllegalArgumentException(&quot;TimeToLive out of bounds: &quot; + ttl);  \n</code></pre><p> }<br> impl.setTimeToLive(ttl);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li>Valid TTL values are between 0 and 255 inclusive. </li>\n<li></li>\n<li>@throws IOException if an error occurs. </li>\n<li><p>@deprecated Use {@link #setTimeToLive} instead.<br>*/<br>@Deprecated<br>public void setTTL(byte ttl) throws IOException {<br> checkOpen();<br> impl.setTTL(ttl);<br>}  </p>\n<p>@Override<br>synchronized void createSocket(int aPort, InetAddress addr) throws SocketException {<br> impl = factory != null ? factory.createDatagramSocketImpl() : new PlainDatagramSocketImpl();<br> impl.create();<br> try {  </p>\n<pre><code>impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.TRUE);  \nimpl.bind(aPort, addr);  \nisBound = true;  \n</code></pre><p> } catch (SocketException e) {  </p>\n<pre><code>close();  \nthrow e;  \n</code></pre><p> }<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns true if multicast loopback is <i>disabled</i>. </li>\n<li>See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the </li>\n<li>opposite of the underlying Unix {@code IP_MULTICAST_LOOP}. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public boolean getLoopbackMode() throws SocketException {<br> checkOpen();<br> return !((Boolean) impl.getOption(SocketOptions.IP_MULTICAST_LOOP)).booleanValue();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Disables multicast loopback if {@code disable == true}. </li>\n<li>See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the </li>\n<li>opposite of the underlying Unix {@code IP_MULTICAST_LOOP}: true means disabled, false </li>\n<li>means enabled. </li>\n<li></li>\n<li>@throws SocketException if an error occurs.<br>*/<br>public void setLoopbackMode(boolean disable) throws SocketException {<br> checkOpen();<br> impl.setOption(SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(!disable));<br>}<br>}  </li>\n</ul>\n</li>\n</ul>\n<p>了解一下该类后可以开始下面的编程，首先说一下客户端，再说服务端，最后说明使用方法<br>①客户端代码核心：</p>\n<p>[java] view plain copy<br>@Override<br>protected void onResume() {<br>    super.onResume();<br>    /** </p>\n<pre><code> * @author Engineer-Jsp \n * 笔者在该 Activity 的 onResume()函数初始化接收的侦听 \n */  \nonBrodacastReceiver();  \n</code></pre><p>}<br>②onBrodacastReceiver()函数：<br>[java] view plain copy<br>MulticastSocket multicastSocket;  </p>\n<p>/** </p>\n<ul>\n<li>@author Engineer-Jsp </li>\n<li>onBrodacastReceiver()<br>*/<br>private void onBrodacastReceiver() {<br> new Thread(new Runnable() {  <pre><code>@Override  \npublic void run() {  \n    try {  \n        // 接收数据时需要指定监听的端口号  \n        multicastSocket = new MulticastSocket(10001);  \n        // 创建组播ID地址  \n        InetAddress address = InetAddress.getByName(&quot;239.0.0.1&quot;);  \n        // 加入地址  \n        multicastSocket.joinGroup(address);  \n        // 包长  \n        byte[] buf = new byte[1024];  \n        while (true) {  \n            // 数据报  \n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n            // 接收数据，同样会进入阻塞状态  \n            multicastSocket.receive(datagramPacket);   \n            // 从buffer中截取收到的数据  \n            byte[] message = new byte[datagramPacket.getLength()];  \n            // 数组拷贝  \n            System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n            // 打印来自组播里其他服务的or客户端的ip  \n            System.out.println(datagramPacket.getAddress());  \n            // 打印来自组播里其他服务的or客户端的消息  \n            System.out.println(new String(message));  \n            // 收到消息后可以进行记录然后二次确认，如果只是想获取ip，在发送方收到该消息后可关闭套接字，从而释放资源  \n            onBrodacastSend(datagramPacket.getAddress());  \n        }  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n</code></pre> }).start();<br>}  </li>\n</ul>\n<p>③ onBrodacastSend() 函数<br>[java] view plain copy<br>/** </p>\n<ul>\n<li>onBrodacastSend() </li>\n<li>@author Engineer-Jsp </li>\n<li>@param address ip<br>*/<br>private void onBrodacastSend(InetAddress address) {<br> // 假设 239.0.0.1 已经收到了来自其他组ip段的消息，为了进行二次确认，发送 “snoop”<br> // 进行确认，当发送方收到该消息可以释放资源<br> String out = “snoop”;<br> // 获取”snoop”的字节数组<br> byte[] buf = out.getBytes();<br> // 组报<br> DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);<br> // 设置地址，该地址来自onBrodacastReceiver()函数阻塞数据报，datagramPacket.getAddress()<br> datagramPacket.setAddress(address);<br> // 发送的端口号<br> datagramPacket.setPort(8082);<br> try {  <pre><code>// 开始发送  \nmulticastSocket.send(datagramPacket);  \n</code></pre> } catch (IOException e) {  <pre><code>e.printStackTrace();  \n</code></pre> }<br>}  </li>\n</ul>\n<p>这是客户端的代码，下面开始上服务端的代码<br>①初始化</p>\n<p>[java] view plain copy<br>@Override<br>protected void onResume() {<br>    super.onResume();<br>    /** </p>\n<pre><code> * @author Engineer-Jsp  \n * 笔者在该 Activity 的 onResume()函数初始化接收和发送 \n * onBrodacastSend() 发送 \n * onBrodacastReceiver() 接收 \n */  \nonBrodacastSend();  \nonBrodacastReceiver();  \n</code></pre><p>}<br>② onBrodacastSend() 函数<br>[java] view plain copy<br>InetAddress address;<br>MulticastSocket multicastSocket;  </p>\n<p>/** </p>\n<ul>\n<li>@author Engineer-Jsp  </li>\n<li>onBrodacastSend() 发送<br>*/<br>private void onBrodacastSend() {<br> try {  <pre><code>// 侦听的端口  \nmulticastSocket = new MulticastSocket(8082);  \n// 使用D类地址，该地址为发起组播的那个ip段，即侦听10001的套接字  \naddress = InetAddress.getByName(&quot;239.0.0.1&quot;);  \nnew Thread(new Runnable() {  \n    @Override  \n    public void run() {  \n        while (true) {  \n            // 获取当前时间  \n            String time = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date());  \n            // 当前时间+标识后缀  \n            time = time + &quot; &gt;&gt;&gt; form server onBrodacastSend()&quot;;  \n            // 获取当前时间+标识后缀的字节数组  \n            byte[] buf = time.getBytes();  \n            // 组报  \n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n            // 向组播ID，即接收group /239.0.0.1  端口 10001  \n            datagramPacket.setAddress(address);   \n            // 发送的端口号  \n            datagramPacket.setPort(10001);  \n            try {  \n                // 开始发送  \n                multicastSocket.send(datagramPacket);  \n                // 每执行一次，线程休眠2s，然后继续下一次任务  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                e.printStackTrace();  \n            } catch (IOException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }  \n}).start();  \n</code></pre> } catch (UnknownHostException e) {  <pre><code>e.printStackTrace();  \n</code></pre> } catch (IOException e) {  <pre><code>e.printStackTrace();  \n</code></pre> }<br>}  </li>\n</ul>\n<p>③onBrodacastReceiver(）函数<br>[java] view plain copy<br>/** </p>\n<ul>\n<li>@author Engineer-Jsp  </li>\n<li>onBrodacastReceiver() 接收<br>*/<br>private void onBrodacastReceiver() {<br> new Thread(new Runnable() {  <pre><code>@Override  \npublic void run() {  \n    try {  \n        // 字节数组的格式，即最大大小  \n        byte[] buf = new byte[1024];  \n        while (true) {  \n            // 组报格式  \n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n            // 接收来自group组播10001端口的二次确认，阻塞  \n            multicastSocket.receive(datagramPacket);  \n            // 从buf中截取收到的数据  \n            byte[] message = new byte[datagramPacket.getLength()];  \n            // 数组拷贝  \n            System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n            // 这里打印ip字段  \n            System.out.println(datagramPacket.getAddress());  \n            // 打印组播端口10001发送过来的消息  \n            System.out.println(new String(message));  \n            // 这里可以根据结接收到的内容进行分发处理，假如收到 10001的 &quot;snoop&quot;字段为关闭命令，即可在此处关闭套接字从而释放资源  \n        }  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n</code></pre> }).start();<br>}  </li>\n</ul>\n<p>这是服务端的代码，也分享完了，下面画一个图来大概描述一下他们的工作流程图示意：</p>\n<p>使用方法：①首先需要在同一wifi网络下 ②需要获取所有ip的手机安装客户端，即侦听10001的那个端口 ③所有需要将信息共享并组播到 239.0.0.1:10001这个group的安装服务端 ④开启服务端与客户端开始进行数据的交互</p>\n<p>以上是大致的描述图，帮助大家理解，谢谢观博！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>转载<a href=\"https://blog.csdn.net/jspping/article/details/64438515\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/jspping/article/details/64438515</a><br>在当今的互联网时代，很多互联网公司、方案公司、智能设备公司或多或少都会接触一些局域网内的相关开发，比如某公司研发了一个app，该app需求是在局域网和网域网都可以获取自己好友的消息或信息，网域网下技术人员可以通过服务器转接信息和发送，实现交互，但是在非联网的局域网下使用部分非使用网络的功能，这就需要研究一些比较不常用的类，在通常情况下，可能大部分人首先想到的肯定是0-255的逐个去ping，这样效率超级低！而且粗暴的方式还可能导致oom，之前说到的 ping ，就是比如局域网下发射信号的主机即服务器，这里我就形象的说是路由器吧，比如路由器的ip是192.168.0.1，那连接它的其他设备的ip被分配的ip也是192.168.0.xxx，这里的xxx是一个取值范围0-255，很多时候大家为了方便就采用循环来对0-255这样的一个一个的去ping，也就是像192.168.0.2、192.168.0.3……这样一直到255,效率非常慢。。。</p>\n<p>所以今天就给大家分享一个好东西，java.net.MulticastSocket</p>\n<p>MulticastSocket 继承自 DatagramSocket</p>\n<p>[java] view plain copy<br>/* </p>\n<ul>\n<li>Licensed to the Apache Software Foundation (ASF) under one or more </li>\n<li>contributor license agreements.  See the NOTICE file distributed with </li>\n<li>this work for additional information regarding copyright ownership. </li>\n<li>The ASF licenses this file to You under the Apache License, Version 2.0 </li>\n<li>(the “License”); you may not use this file except in compliance with </li>\n<li>the License.  You may obtain a copy of the License at </li>\n<li></li>\n<li><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" target=\"_blank\" rel=\"noopener\">http://www.apache.org/licenses/LICENSE-2.0</a> </li>\n<li></li>\n<li>Unless required by applicable law or agreed to in writing, software </li>\n<li>distributed under the License is distributed on an “AS IS” BASIS, </li>\n<li>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. </li>\n<li>See the License for the specific language governing permissions and </li>\n<li>limitations under the License.<br>*/  </li>\n</ul>\n<p>package java.net;  </p>\n<p>import java.io.IOException;<br>import java.util.Enumeration;<br>import libcore.io.IoUtils;  </p>\n<p>/** </p>\n<ul>\n<li>This class implements a multicast socket for sending and receiving IP </li>\n<li>multicast datagram packets. </li>\n<li></li>\n<li><p>@see DatagramSocket<br>*/<br>public class MulticastSocket extends DatagramSocket {<br> /** </p>\n<ul>\n<li>Stores the address supplied to setInterface so we can return it from getInterface. The </li>\n<li><p>translation to an interface index is lossy because an interface can have multiple addresses.<br>*/<br>private InetAddress setAddress;  </p>\n<p>/** </p>\n</li>\n<li>Constructs a multicast socket, bound to any available port on the </li>\n<li>local host. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public MulticastSocket() throws IOException {<br> setReuseAddress(true);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Constructs a multicast socket, bound to the specified {@code port} on the </li>\n<li>local host. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public MulticastSocket(int port) throws IOException {<br> super(port);<br> setReuseAddress(true);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Constructs a {@code MulticastSocket} bound to the address and port specified by </li>\n<li>{@code localAddress}, or an unbound {@code MulticastSocket} if {@code localAddress == null}. </li>\n<li></li>\n<li>@throws IllegalArgumentException if {@code localAddress} is not supported (because it’s not </li>\n<li>an {@code InetSocketAddress}, say). </li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public MulticastSocket(SocketAddress localAddress) throws IOException {<br> super(localAddress);<br> setReuseAddress(true);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns an address of the outgoing network interface used by this socket. To avoid </li>\n<li>inherent unpredictability, new code should use {@link #getNetworkInterface} instead. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public InetAddress getInterface() throws SocketException {<br> checkOpen();<br> if (setAddress != null) {  </p>\n<pre><code>return setAddress;  \n</code></pre><p> }<br> InetAddress ipvXaddress = (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);<br> if (ipvXaddress.isAnyLocalAddress()) {  </p>\n<pre><code>// the address was not set at the IPv4 level so check the IPv6  \n// level  \nNetworkInterface theInterface = getNetworkInterface();  \nif (theInterface != null) {  \n    Enumeration&lt;InetAddress&gt; addresses = theInterface.getInetAddresses();  \n    if (addresses != null) {  \n        while (addresses.hasMoreElements()) {  \n            InetAddress nextAddress = addresses.nextElement();  \n            if (nextAddress instanceof Inet6Address) {  \n                return nextAddress;  \n            }  \n        }  \n    }  \n}  \n</code></pre><p> }<br> return ipvXaddress;<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns the outgoing network interface used by this socket. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public NetworkInterface getNetworkInterface() throws SocketException {<br> checkOpen();<br> int index = (Integer) impl.getOption(SocketOptions.IP_MULTICAST_IF2);<br> if (index != 0) {  </p>\n<pre><code>return NetworkInterface.getByIndex(index);  \n</code></pre><p> }<br> return NetworkInterface.forUnboundMulticastSocket();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public int getTimeToLive() throws IOException {<br> checkOpen();<br> return impl.getTimeToLive();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li></li>\n<li>@throws IOException if an error occurs. </li>\n<li><p>@deprecated Use {@link #getTimeToLive} instead.<br>*/<br>@Deprecated<br>public byte getTTL() throws IOException {<br> checkOpen();<br> return impl.getTTL();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Adds this socket to the specified multicast group. A socket must join a </li>\n<li>group before data may be received. A socket may be a member of multiple </li>\n<li>groups but may join any group only once. </li>\n<li></li>\n<li>@param groupAddr </li>\n<li>the multicast group to be joined. </li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public void joinGroup(InetAddress groupAddr) throws IOException {<br> checkJoinOrLeave(groupAddr);<br> impl.join(groupAddr);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Adds this socket to the specified multicast group. A socket must join a </li>\n<li>group before data may be received. A socket may be a member of multiple </li>\n<li>groups but may join any group only once. </li>\n<li></li>\n<li>@param groupAddress </li>\n<li>the multicast group to be joined. </li>\n<li>@param netInterface </li>\n<li>the network interface on which the datagram packets will be </li>\n<li>received. </li>\n<li>@throws IOException </li>\n<li>if the specified address is not a multicast address. </li>\n<li>@throws IllegalArgumentException </li>\n<li><p>if no multicast group is specified.<br>*/<br>public void joinGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {<br>checkJoinOrLeave(groupAddress, netInterface);<br>impl.joinGroup(groupAddress, netInterface);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Removes this socket from the specified multicast group. </li>\n<li></li>\n<li>@param groupAddr </li>\n<li>the multicast group to be left. </li>\n<li>@throws NullPointerException </li>\n<li>if {@code groupAddr} is {@code null}. </li>\n<li>@throws IOException </li>\n<li><p>if the specified group address is not a multicast address.<br>*/<br>public void leaveGroup(InetAddress groupAddr) throws IOException {<br>checkJoinOrLeave(groupAddr);<br>impl.leave(groupAddr);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Removes this socket from the specified multicast group. </li>\n<li></li>\n<li>@param groupAddress </li>\n<li>the multicast group to be left. </li>\n<li>@param netInterface </li>\n<li>the network interface on which the addresses should be </li>\n<li>dropped. </li>\n<li>@throws IOException </li>\n<li>if the specified group address is not a multicast address. </li>\n<li>@throws IllegalArgumentException </li>\n<li><p>if {@code groupAddress} is {@code null}.<br>*/<br>public void leaveGroup(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {<br>checkJoinOrLeave(groupAddress, netInterface);<br>impl.leaveGroup(groupAddress, netInterface);<br>}  </p>\n<p>private void checkJoinOrLeave(SocketAddress groupAddress, NetworkInterface netInterface) throws IOException {<br>checkOpen();<br>if (groupAddress == null) {<br>throw new IllegalArgumentException(“groupAddress == null”);<br>}  </p>\n<p>if (netInterface != null &amp;&amp; !netInterface.getInetAddresses().hasMoreElements()) {<br>throw new SocketException(“No address associated with interface: “ + netInterface);<br>}  </p>\n<p>if (!(groupAddress instanceof InetSocketAddress)) {<br>throw new IllegalArgumentException(“Group address not an InetSocketAddress: “ +<br>groupAddress.getClass());<br>}  </p>\n<p>InetAddress groupAddr = ((InetSocketAddress) groupAddress).getAddress();<br>if (groupAddr == null) {<br>throw new SocketException(“Group address has no address: “ + groupAddress);<br>}  </p>\n<p>if (!groupAddr.isMulticastAddress()) {<br>throw new IOException(“Not a multicast group: “ + groupAddr);<br>}<br>}  </p>\n<p>private void checkJoinOrLeave(InetAddress groupAddr) throws IOException {<br>checkOpen();<br>if (groupAddr == null) {<br>throw new IllegalArgumentException(“groupAddress == null”);<br>}<br>if (!groupAddr.isMulticastAddress()) {<br>throw new IOException(“Not a multicast group: “ + groupAddr);<br>}<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sends the given {@code packet} on this socket, using the given {@code ttl}. This method is </li>\n<li>deprecated because it modifies the TTL socket option for this socket twice on each call. </li>\n<li></li>\n<li>@throws IOException if an error occurs. </li>\n<li><p>@deprecated Use {@link #setTimeToLive} instead.<br>*/<br>@Deprecated<br>public void send(DatagramPacket packet, byte ttl) throws IOException {<br> checkOpen();<br> InetAddress packAddr = packet.getAddress();<br> int currTTL = getTimeToLive();<br> if (packAddr.isMulticastAddress() &amp;&amp; (byte) currTTL != ttl) {  </p>\n<pre><code>try {  \n    setTimeToLive(ttl &amp; 0xff);  \n    impl.send(packet);  \n} finally {  \n    setTimeToLive(currTTL);  \n}  \n</code></pre><p> } else {  </p>\n<pre><code>impl.send(packet);  \n</code></pre><p> }<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the outgoing network interface used by this socket. The interface used is the first </li>\n<li>interface found to have the given {@code address}. To avoid inherent unpredictability, </li>\n<li>new code should use {@link #getNetworkInterface} instead. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public void setInterface(InetAddress address) throws SocketException {<br> checkOpen();<br> if (address == null) {  </p>\n<pre><code>throw new NullPointerException(&quot;address == null&quot;);  \n</code></pre><p> }  </p>\n<p> NetworkInterface networkInterface = NetworkInterface.getByInetAddress(address);<br> if (networkInterface == null) {  </p>\n<pre><code>throw new SocketException(&quot;Address not associated with an interface: &quot; + address);  \n</code></pre><p> }<br> impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());<br> this.setAddress = address;<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the outgoing network interface used by this socket to the given </li>\n<li>{@code networkInterface}. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public void setNetworkInterface(NetworkInterface networkInterface) throws SocketException {<br> checkOpen();<br> if (networkInterface == null) {  </p>\n<pre><code>throw new SocketException(&quot;networkInterface == null&quot;);  \n</code></pre><p> }  </p>\n<p> impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());<br> this.setAddress = null;<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li>Valid TTL values are between 0 and 255 inclusive. </li>\n<li></li>\n<li><p>@throws IOException if an error occurs.<br>*/<br>public void setTimeToLive(int ttl) throws IOException {<br> checkOpen();<br> if (ttl &lt; 0 || ttl &gt; 255) {  </p>\n<pre><code>throw new IllegalArgumentException(&quot;TimeToLive out of bounds: &quot; + ttl);  \n</code></pre><p> }<br> impl.setTimeToLive(ttl);<br>}  </p>\n<p>/** </p>\n</li>\n<li>Sets the time-to-live (TTL) for multicast packets sent on this socket. </li>\n<li>Valid TTL values are between 0 and 255 inclusive. </li>\n<li></li>\n<li>@throws IOException if an error occurs. </li>\n<li><p>@deprecated Use {@link #setTimeToLive} instead.<br>*/<br>@Deprecated<br>public void setTTL(byte ttl) throws IOException {<br> checkOpen();<br> impl.setTTL(ttl);<br>}  </p>\n<p>@Override<br>synchronized void createSocket(int aPort, InetAddress addr) throws SocketException {<br> impl = factory != null ? factory.createDatagramSocketImpl() : new PlainDatagramSocketImpl();<br> impl.create();<br> try {  </p>\n<pre><code>impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.TRUE);  \nimpl.bind(aPort, addr);  \nisBound = true;  \n</code></pre><p> } catch (SocketException e) {  </p>\n<pre><code>close();  \nthrow e;  \n</code></pre><p> }<br>}  </p>\n<p>/** </p>\n</li>\n<li>Returns true if multicast loopback is <i>disabled</i>. </li>\n<li>See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the </li>\n<li>opposite of the underlying Unix {@code IP_MULTICAST_LOOP}. </li>\n<li></li>\n<li><p>@throws SocketException if an error occurs.<br>*/<br>public boolean getLoopbackMode() throws SocketException {<br> checkOpen();<br> return !((Boolean) impl.getOption(SocketOptions.IP_MULTICAST_LOOP)).booleanValue();<br>}  </p>\n<p>/** </p>\n</li>\n<li>Disables multicast loopback if {@code disable == true}. </li>\n<li>See {@link SocketOptions#IP_MULTICAST_LOOP}, and note that the sense of this is the </li>\n<li>opposite of the underlying Unix {@code IP_MULTICAST_LOOP}: true means disabled, false </li>\n<li>means enabled. </li>\n<li></li>\n<li>@throws SocketException if an error occurs.<br>*/<br>public void setLoopbackMode(boolean disable) throws SocketException {<br> checkOpen();<br> impl.setOption(SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(!disable));<br>}<br>}  </li>\n</ul>\n</li>\n</ul>\n<p>了解一下该类后可以开始下面的编程，首先说一下客户端，再说服务端，最后说明使用方法<br>①客户端代码核心：</p>\n<p>[java] view plain copy<br>@Override<br>protected void onResume() {<br>    super.onResume();<br>    /** </p>\n<pre><code> * @author Engineer-Jsp \n * 笔者在该 Activity 的 onResume()函数初始化接收的侦听 \n */  \nonBrodacastReceiver();  \n</code></pre><p>}<br>②onBrodacastReceiver()函数：<br>[java] view plain copy<br>MulticastSocket multicastSocket;  </p>\n<p>/** </p>\n<ul>\n<li>@author Engineer-Jsp </li>\n<li>onBrodacastReceiver()<br>*/<br>private void onBrodacastReceiver() {<br> new Thread(new Runnable() {  <pre><code>@Override  \npublic void run() {  \n    try {  \n        // 接收数据时需要指定监听的端口号  \n        multicastSocket = new MulticastSocket(10001);  \n        // 创建组播ID地址  \n        InetAddress address = InetAddress.getByName(&quot;239.0.0.1&quot;);  \n        // 加入地址  \n        multicastSocket.joinGroup(address);  \n        // 包长  \n        byte[] buf = new byte[1024];  \n        while (true) {  \n            // 数据报  \n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n            // 接收数据，同样会进入阻塞状态  \n            multicastSocket.receive(datagramPacket);   \n            // 从buffer中截取收到的数据  \n            byte[] message = new byte[datagramPacket.getLength()];  \n            // 数组拷贝  \n            System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n            // 打印来自组播里其他服务的or客户端的ip  \n            System.out.println(datagramPacket.getAddress());  \n            // 打印来自组播里其他服务的or客户端的消息  \n            System.out.println(new String(message));  \n            // 收到消息后可以进行记录然后二次确认，如果只是想获取ip，在发送方收到该消息后可关闭套接字，从而释放资源  \n            onBrodacastSend(datagramPacket.getAddress());  \n        }  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n</code></pre> }).start();<br>}  </li>\n</ul>\n<p>③ onBrodacastSend() 函数<br>[java] view plain copy<br>/** </p>\n<ul>\n<li>onBrodacastSend() </li>\n<li>@author Engineer-Jsp </li>\n<li>@param address ip<br>*/<br>private void onBrodacastSend(InetAddress address) {<br> // 假设 239.0.0.1 已经收到了来自其他组ip段的消息，为了进行二次确认，发送 “snoop”<br> // 进行确认，当发送方收到该消息可以释放资源<br> String out = “snoop”;<br> // 获取”snoop”的字节数组<br> byte[] buf = out.getBytes();<br> // 组报<br> DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);<br> // 设置地址，该地址来自onBrodacastReceiver()函数阻塞数据报，datagramPacket.getAddress()<br> datagramPacket.setAddress(address);<br> // 发送的端口号<br> datagramPacket.setPort(8082);<br> try {  <pre><code>// 开始发送  \nmulticastSocket.send(datagramPacket);  \n</code></pre> } catch (IOException e) {  <pre><code>e.printStackTrace();  \n</code></pre> }<br>}  </li>\n</ul>\n<p>这是客户端的代码，下面开始上服务端的代码<br>①初始化</p>\n<p>[java] view plain copy<br>@Override<br>protected void onResume() {<br>    super.onResume();<br>    /** </p>\n<pre><code> * @author Engineer-Jsp  \n * 笔者在该 Activity 的 onResume()函数初始化接收和发送 \n * onBrodacastSend() 发送 \n * onBrodacastReceiver() 接收 \n */  \nonBrodacastSend();  \nonBrodacastReceiver();  \n</code></pre><p>}<br>② onBrodacastSend() 函数<br>[java] view plain copy<br>InetAddress address;<br>MulticastSocket multicastSocket;  </p>\n<p>/** </p>\n<ul>\n<li>@author Engineer-Jsp  </li>\n<li>onBrodacastSend() 发送<br>*/<br>private void onBrodacastSend() {<br> try {  <pre><code>// 侦听的端口  \nmulticastSocket = new MulticastSocket(8082);  \n// 使用D类地址，该地址为发起组播的那个ip段，即侦听10001的套接字  \naddress = InetAddress.getByName(&quot;239.0.0.1&quot;);  \nnew Thread(new Runnable() {  \n    @Override  \n    public void run() {  \n        while (true) {  \n            // 获取当前时间  \n            String time = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date());  \n            // 当前时间+标识后缀  \n            time = time + &quot; &gt;&gt;&gt; form server onBrodacastSend()&quot;;  \n            // 获取当前时间+标识后缀的字节数组  \n            byte[] buf = time.getBytes();  \n            // 组报  \n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n            // 向组播ID，即接收group /239.0.0.1  端口 10001  \n            datagramPacket.setAddress(address);   \n            // 发送的端口号  \n            datagramPacket.setPort(10001);  \n            try {  \n                // 开始发送  \n                multicastSocket.send(datagramPacket);  \n                // 每执行一次，线程休眠2s，然后继续下一次任务  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                e.printStackTrace();  \n            } catch (IOException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }  \n}).start();  \n</code></pre> } catch (UnknownHostException e) {  <pre><code>e.printStackTrace();  \n</code></pre> } catch (IOException e) {  <pre><code>e.printStackTrace();  \n</code></pre> }<br>}  </li>\n</ul>\n<p>③onBrodacastReceiver(）函数<br>[java] view plain copy<br>/** </p>\n<ul>\n<li>@author Engineer-Jsp  </li>\n<li>onBrodacastReceiver() 接收<br>*/<br>private void onBrodacastReceiver() {<br> new Thread(new Runnable() {  <pre><code>@Override  \npublic void run() {  \n    try {  \n        // 字节数组的格式，即最大大小  \n        byte[] buf = new byte[1024];  \n        while (true) {  \n            // 组报格式  \n            DatagramPacket datagramPacket = new DatagramPacket(buf, buf.length);  \n            // 接收来自group组播10001端口的二次确认，阻塞  \n            multicastSocket.receive(datagramPacket);  \n            // 从buf中截取收到的数据  \n            byte[] message = new byte[datagramPacket.getLength()];  \n            // 数组拷贝  \n            System.arraycopy(buf, 0, message, 0, datagramPacket.getLength());  \n            // 这里打印ip字段  \n            System.out.println(datagramPacket.getAddress());  \n            // 打印组播端口10001发送过来的消息  \n            System.out.println(new String(message));  \n            // 这里可以根据结接收到的内容进行分发处理，假如收到 10001的 &quot;snoop&quot;字段为关闭命令，即可在此处关闭套接字从而释放资源  \n        }  \n    } catch (IOException e) {  \n        e.printStackTrace();  \n    }  \n}  \n</code></pre> }).start();<br>}  </li>\n</ul>\n<p>这是服务端的代码，也分享完了，下面画一个图来大概描述一下他们的工作流程图示意：</p>\n<p>使用方法：①首先需要在同一wifi网络下 ②需要获取所有ip的手机安装客户端，即侦听10001的那个端口 ③所有需要将信息共享并组播到 239.0.0.1:10001这个group的安装服务端 ④开启服务端与客户端开始进行数据的交互</p>\n<p>以上是大致的描述图，帮助大家理解，谢谢观博！</p>\n"},{"title":"我的妞妞","date":"2018-05-21T05:29:47.000Z","_content":"\t我的妞妞长的好看！！！美！！！\n","source":"_posts/我的妞妞.md","raw":"---\ntitle: 我的妞妞\ndate: 2018-05-21 13:29:47\ntags: \"妞妞\"\n---\n\t我的妞妞长的好看！！！美！！！\n","slug":"我的妞妞","published":1,"updated":"2018-05-21T06:56:51.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxw001kx8w59uw5yomu","content":"<pre><code>我的妞妞长的好看！！！美！！！\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>我的妞妞长的好看！！！美！！！\n</code></pre>"},{"title":"模块模式设计","date":"2018-05-21T08:22:13.000Z","_content":"## 什么是设计模式\n1. 定义\n基本定义：设计模式（Design pattern）是一套被反复使用的代码设计经验的总结。使用设计模式的目的是为了可重用代码、让代码更容易被他人理解。设计模式是是软件工程的基石脉络，如大厦的结构一样\nDesign pattern的四大要素：模式名称（Name），问题（Question），解决方案（Solution），效果（Efftive）。\nOO（面向对象）的六大原则：单一职责原则，开闭原则，里氏替换原则，依赖倒置原则，接口隔离原则，迪米特原则。\n\t\t\t单一职责原则：一个类中应该是一组相关性很高的函数，数据的封装。两个完全不一样的功能就不应该放在一个类中。\n\t\t\t开闭原则：对修改封闭，对扩展放开。\n\t\t\t里氏替换原则：抽象和继承；所有引用基类的地方必须能透明的使用其子类的对象。\n\t\t\t依赖倒置原则：抽象不应该依赖细节，细节应该依赖抽象。\n\t\t\t接口隔离原则：将大接口改成多个小接口。\n\t\t\t迪米特原则：也称为最少知识原则，一个对象应该对另一个对象有最少的了解。\n2. 分类\n设计模式分为三种类型：\n\t\t创建型模式5种：单例模式，抽象工厂模式，工厂模式，原型模式，建造者模式。（口诀：单原建造者，东西二厂）\n\t\t结构型模式7种：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式。（口诀：一器一桥一元一代理；装饰组合外观）\n\t\t行为型模式11种：观察者模式，中介者模式，访问者模式，解释器模式，迭代器模式，备忘录模式，责任链模式，状态模式，策略模式，命令模式，模板模式。（口诀：三者两器、一录一链一模板，状态策略命令）\n## 功能模块设计原则 ##\n1. 单一职责原则（Single Responsibility Principle - SRP）\n\t\t原文：There should never be more than one reason for a class to change.\n\t\t译文：永远不应该有多于一个原因来改变某个类。\n\t\t理解：对于一个类而言，应该仅有一个引起它变化的原因。说白了就是，不同的类具备不同的职责，各施其责。这就好比一个团队，大家分工协作，互不影响，各做各的事情。\n\t\t应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！\n2. 开放封闭原则（Open Closed Principle - OCP）\n\t\t原文：Software entities like classes, modules and functions should be open for extension but closed for modifications.\n\t\t译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。\n\t\t理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。\n\t\t应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。\n3. 里氏替换原则（Liskov Substitution Principle - LSP）\n\t\t原文：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.\n\t\t译文：使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。\n\t\t理解：父类能够替换子类，但子类不一定能替换父类。也就是说，在代码中可以将父类全部替换为子类，程序不会报错，也不会在运行时出现任何异常，但反过来却不一定成立。\n\t\t应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。\n4. 最少知识原则（Least Knowledge Principle - LKP）\n\t\t原文：Only talk to you immediate friends.\n\t\t译文：只与你最直接的朋友交流。\n\t\t理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。\n\t\t应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。\n5. 接口隔离原则（Interface Segregation Principle - ISP）\n\t\t原文：The dependency of one class to another one should depend on the smallest possible interface.\n\t\t译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。、理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。\n\t\t应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。\n6. 依赖倒置原则（Dependence Inversion Principle - DIP）\n\t\t原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.\n\t\t译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。\n\t\t理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。\n\t\t应用：并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程吧。\n\t\t------>------>------>------>------>------>------>\n\t\t将以上六大原则的英文首字母拼在一起就是 SOLID（稳定的），所以也称之为 SOLID 原则。只有满足了这六大原则，才能设计出稳定的软件架构！但它们毕竟只是原则，只是四人帮给我们的建议，有些时候我们还是要学会灵活应变，千万不要生搬硬套，否则只会把简单问题复杂化\n补充设计原则\n\t1. 组合/聚合复用原则（Composition/Aggregation Reuse Principle - CARP）\n\t\t\t当要扩展类的功能时，优先考虑使用组合，而不是继承。这条原则在 23 种经典设计模式中频繁使用，如：代理模式、装饰模式、适配器模式等。可见江湖地位非常之高！\n\t2. 无环依赖原则（Acyclic Dependencies Principle - ADP）\n\t\t\t当 A 模块依赖于 B 模块，B 模块依赖于 C 模块，C 依赖于 A 模块，此时将出现循环依赖。在设计中应该避免这个问题，可通过引入“中介者模式”解决该问题。\n\t3. 共同封装原则（Common Closure Principle - CCP）\n\t\t\t应该将易变的类放在同一个包里，将变化隔离出来。该原则是“开放-封闭原则”的延生。\n\t4. 共同重用原则（Common Reuse Principle - CRP）\n\t\t\t如果重用了包中的一个类，那么也就相当于重用了包中的所有类，我们要尽可能减小包的大小。\n\t5. 好莱坞原则（Hollywood Principle - HP）\n\t\t\t好莱坞明星的经纪人一般都很忙，他们不想被打扰，往往会说：Don't call me, I'll call you. 翻译为：不要联系我，我会联系你。对应于软件设计而言，最著名的就是“控制反转”（或称为“依赖注入”），我们不需要在代码中主动的创建对象，而是由容器帮我们来创建并管理这些对象。\n\n其它设计原则\n1. 不要重复你自己（Don't repeat yourself - DRY）\n\t\t\t不要让重复的代码到处都是，要让它们足够的重用，所以要尽可能地封装。\n2. 保持它简单与傻瓜（Keep it simple and stupid - KISS）\n\t\t\t不要让系统变得复杂，界面简洁，功能实用，操作方便，要让它足够的简单，足够的傻瓜。\n3. 高内聚与低耦合（High Cohesion and Low Coupling - HCLC）\n\t\t\t模块内部需要做到内聚度高，模块之间需要做到耦合度低。\n4. 惯例优于配置（Convention over Configuration - COC）\n\t\t\t尽量让惯例来减少配置，这样才能提高开发效率，尽量做到“零配置”。很多开发框架都是这样做的。\n5. 命令查询分离（Command Query Separation - CQS）\n\t\t\t在定义接口时，要做到哪些是命令，哪些是查询，要将它们分离，而不要揉到一起。\n6. 关注点分离（Separation of Concerns - SOC）\n\t\t\t将一个复杂的问题分离为多个简单的问题，然后逐个解决这些简单的问题，那么这个复杂的问题就解决了。难就难在如何进行分离。\n7. 契约式设计（Design by Contract - DBC）\n\t\t\t模块或系统之间的交互，都是基于契约（接口或抽象）的，而不要依赖于具体实现。该原则建议我们要面向契约编程。\n8. 你不需要它（You aren't gonna need it - YAGNI）\n\t\t\t不要一开始就把系统设计得非常复杂，不要陷入“过度设计”的深渊。应该让系统足够的简单，而却又不失扩展性，这是其中的难点。","source":"_posts/模块模式设计.md","raw":"---\ntitle: 模块模式设计\ndate: 2018-05-21 16:22:13\ntags: \"设计模式\"\ncategories: \"通用\"\n---\n## 什么是设计模式\n1. 定义\n基本定义：设计模式（Design pattern）是一套被反复使用的代码设计经验的总结。使用设计模式的目的是为了可重用代码、让代码更容易被他人理解。设计模式是是软件工程的基石脉络，如大厦的结构一样\nDesign pattern的四大要素：模式名称（Name），问题（Question），解决方案（Solution），效果（Efftive）。\nOO（面向对象）的六大原则：单一职责原则，开闭原则，里氏替换原则，依赖倒置原则，接口隔离原则，迪米特原则。\n\t\t\t单一职责原则：一个类中应该是一组相关性很高的函数，数据的封装。两个完全不一样的功能就不应该放在一个类中。\n\t\t\t开闭原则：对修改封闭，对扩展放开。\n\t\t\t里氏替换原则：抽象和继承；所有引用基类的地方必须能透明的使用其子类的对象。\n\t\t\t依赖倒置原则：抽象不应该依赖细节，细节应该依赖抽象。\n\t\t\t接口隔离原则：将大接口改成多个小接口。\n\t\t\t迪米特原则：也称为最少知识原则，一个对象应该对另一个对象有最少的了解。\n2. 分类\n设计模式分为三种类型：\n\t\t创建型模式5种：单例模式，抽象工厂模式，工厂模式，原型模式，建造者模式。（口诀：单原建造者，东西二厂）\n\t\t结构型模式7种：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式。（口诀：一器一桥一元一代理；装饰组合外观）\n\t\t行为型模式11种：观察者模式，中介者模式，访问者模式，解释器模式，迭代器模式，备忘录模式，责任链模式，状态模式，策略模式，命令模式，模板模式。（口诀：三者两器、一录一链一模板，状态策略命令）\n## 功能模块设计原则 ##\n1. 单一职责原则（Single Responsibility Principle - SRP）\n\t\t原文：There should never be more than one reason for a class to change.\n\t\t译文：永远不应该有多于一个原因来改变某个类。\n\t\t理解：对于一个类而言，应该仅有一个引起它变化的原因。说白了就是，不同的类具备不同的职责，各施其责。这就好比一个团队，大家分工协作，互不影响，各做各的事情。\n\t\t应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！\n2. 开放封闭原则（Open Closed Principle - OCP）\n\t\t原文：Software entities like classes, modules and functions should be open for extension but closed for modifications.\n\t\t译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。\n\t\t理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。\n\t\t应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。\n3. 里氏替换原则（Liskov Substitution Principle - LSP）\n\t\t原文：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.\n\t\t译文：使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。\n\t\t理解：父类能够替换子类，但子类不一定能替换父类。也就是说，在代码中可以将父类全部替换为子类，程序不会报错，也不会在运行时出现任何异常，但反过来却不一定成立。\n\t\t应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。\n4. 最少知识原则（Least Knowledge Principle - LKP）\n\t\t原文：Only talk to you immediate friends.\n\t\t译文：只与你最直接的朋友交流。\n\t\t理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。\n\t\t应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。\n5. 接口隔离原则（Interface Segregation Principle - ISP）\n\t\t原文：The dependency of one class to another one should depend on the smallest possible interface.\n\t\t译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。、理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。\n\t\t应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。\n6. 依赖倒置原则（Dependence Inversion Principle - DIP）\n\t\t原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.\n\t\t译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。\n\t\t理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。\n\t\t应用：并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程吧。\n\t\t------>------>------>------>------>------>------>\n\t\t将以上六大原则的英文首字母拼在一起就是 SOLID（稳定的），所以也称之为 SOLID 原则。只有满足了这六大原则，才能设计出稳定的软件架构！但它们毕竟只是原则，只是四人帮给我们的建议，有些时候我们还是要学会灵活应变，千万不要生搬硬套，否则只会把简单问题复杂化\n补充设计原则\n\t1. 组合/聚合复用原则（Composition/Aggregation Reuse Principle - CARP）\n\t\t\t当要扩展类的功能时，优先考虑使用组合，而不是继承。这条原则在 23 种经典设计模式中频繁使用，如：代理模式、装饰模式、适配器模式等。可见江湖地位非常之高！\n\t2. 无环依赖原则（Acyclic Dependencies Principle - ADP）\n\t\t\t当 A 模块依赖于 B 模块，B 模块依赖于 C 模块，C 依赖于 A 模块，此时将出现循环依赖。在设计中应该避免这个问题，可通过引入“中介者模式”解决该问题。\n\t3. 共同封装原则（Common Closure Principle - CCP）\n\t\t\t应该将易变的类放在同一个包里，将变化隔离出来。该原则是“开放-封闭原则”的延生。\n\t4. 共同重用原则（Common Reuse Principle - CRP）\n\t\t\t如果重用了包中的一个类，那么也就相当于重用了包中的所有类，我们要尽可能减小包的大小。\n\t5. 好莱坞原则（Hollywood Principle - HP）\n\t\t\t好莱坞明星的经纪人一般都很忙，他们不想被打扰，往往会说：Don't call me, I'll call you. 翻译为：不要联系我，我会联系你。对应于软件设计而言，最著名的就是“控制反转”（或称为“依赖注入”），我们不需要在代码中主动的创建对象，而是由容器帮我们来创建并管理这些对象。\n\n其它设计原则\n1. 不要重复你自己（Don't repeat yourself - DRY）\n\t\t\t不要让重复的代码到处都是，要让它们足够的重用，所以要尽可能地封装。\n2. 保持它简单与傻瓜（Keep it simple and stupid - KISS）\n\t\t\t不要让系统变得复杂，界面简洁，功能实用，操作方便，要让它足够的简单，足够的傻瓜。\n3. 高内聚与低耦合（High Cohesion and Low Coupling - HCLC）\n\t\t\t模块内部需要做到内聚度高，模块之间需要做到耦合度低。\n4. 惯例优于配置（Convention over Configuration - COC）\n\t\t\t尽量让惯例来减少配置，这样才能提高开发效率，尽量做到“零配置”。很多开发框架都是这样做的。\n5. 命令查询分离（Command Query Separation - CQS）\n\t\t\t在定义接口时，要做到哪些是命令，哪些是查询，要将它们分离，而不要揉到一起。\n6. 关注点分离（Separation of Concerns - SOC）\n\t\t\t将一个复杂的问题分离为多个简单的问题，然后逐个解决这些简单的问题，那么这个复杂的问题就解决了。难就难在如何进行分离。\n7. 契约式设计（Design by Contract - DBC）\n\t\t\t模块或系统之间的交互，都是基于契约（接口或抽象）的，而不要依赖于具体实现。该原则建议我们要面向契约编程。\n8. 你不需要它（You aren't gonna need it - YAGNI）\n\t\t\t不要一开始就把系统设计得非常复杂，不要陷入“过度设计”的深渊。应该让系统足够的简单，而却又不失扩展性，这是其中的难点。","slug":"模块模式设计","published":1,"updated":"2018-05-21T08:53:47.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyxz001ox8w5l8cidsd1","content":"<h2 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h2><ol>\n<li>定义<br>基本定义：设计模式（Design pattern）是一套被反复使用的代码设计经验的总结。使用设计模式的目的是为了可重用代码、让代码更容易被他人理解。设计模式是是软件工程的基石脉络，如大厦的结构一样<br>Design pattern的四大要素：模式名称（Name），问题（Question），解决方案（Solution），效果（Efftive）。<br>OO（面向对象）的六大原则：单一职责原则，开闭原则，里氏替换原则，依赖倒置原则，接口隔离原则，迪米特原则。<pre><code>单一职责原则：一个类中应该是一组相关性很高的函数，数据的封装。两个完全不一样的功能就不应该放在一个类中。\n开闭原则：对修改封闭，对扩展放开。\n里氏替换原则：抽象和继承；所有引用基类的地方必须能透明的使用其子类的对象。\n依赖倒置原则：抽象不应该依赖细节，细节应该依赖抽象。\n接口隔离原则：将大接口改成多个小接口。\n迪米特原则：也称为最少知识原则，一个对象应该对另一个对象有最少的了解。\n</code></pre></li>\n<li>分类<br>设计模式分为三种类型：<pre><code>创建型模式5种：单例模式，抽象工厂模式，工厂模式，原型模式，建造者模式。（口诀：单原建造者，东西二厂）\n结构型模式7种：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式。（口诀：一器一桥一元一代理；装饰组合外观）\n行为型模式11种：观察者模式，中介者模式，访问者模式，解释器模式，迭代器模式，备忘录模式，责任链模式，状态模式，策略模式，命令模式，模板模式。（口诀：三者两器、一录一链一模板，状态策略命令）\n</code></pre><h2 id=\"功能模块设计原则\"><a href=\"#功能模块设计原则\" class=\"headerlink\" title=\"功能模块设计原则\"></a>功能模块设计原则</h2></li>\n<li>单一职责原则（Single Responsibility Principle - SRP）<pre><code>原文：There should never be more than one reason for a class to change.\n译文：永远不应该有多于一个原因来改变某个类。\n理解：对于一个类而言，应该仅有一个引起它变化的原因。说白了就是，不同的类具备不同的职责，各施其责。这就好比一个团队，大家分工协作，互不影响，各做各的事情。\n应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！\n</code></pre></li>\n<li>开放封闭原则（Open Closed Principle - OCP）<pre><code>原文：Software entities like classes, modules and functions should be open for extension but closed for modifications.\n译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。\n理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。\n应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。\n</code></pre></li>\n<li>里氏替换原则（Liskov Substitution Principle - LSP）<pre><code>原文：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.\n译文：使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。\n理解：父类能够替换子类，但子类不一定能替换父类。也就是说，在代码中可以将父类全部替换为子类，程序不会报错，也不会在运行时出现任何异常，但反过来却不一定成立。\n应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。\n</code></pre></li>\n<li>最少知识原则（Least Knowledge Principle - LKP）<pre><code>原文：Only talk to you immediate friends.\n译文：只与你最直接的朋友交流。\n理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。\n应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。\n</code></pre></li>\n<li>接口隔离原则（Interface Segregation Principle - ISP）<pre><code>原文：The dependency of one class to another one should depend on the smallest possible interface.\n译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。、理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。\n应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。\n</code></pre></li>\n<li>依赖倒置原则（Dependence Inversion Principle - DIP）<pre><code>原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.\n译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。\n理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。\n应用：并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程吧。\n------&gt;------&gt;------&gt;------&gt;------&gt;------&gt;------&gt;\n将以上六大原则的英文首字母拼在一起就是 SOLID（稳定的），所以也称之为 SOLID 原则。只有满足了这六大原则，才能设计出稳定的软件架构！但它们毕竟只是原则，只是四人帮给我们的建议，有些时候我们还是要学会灵活应变，千万不要生搬硬套，否则只会把简单问题复杂化\n</code></pre>补充设计原则<ol>\n<li>组合/聚合复用原则（Composition/Aggregation Reuse Principle - CARP）<pre><code>当要扩展类的功能时，优先考虑使用组合，而不是继承。这条原则在 23 种经典设计模式中频繁使用，如：代理模式、装饰模式、适配器模式等。可见江湖地位非常之高！\n</code></pre></li>\n<li>无环依赖原则（Acyclic Dependencies Principle - ADP）<pre><code>当 A 模块依赖于 B 模块，B 模块依赖于 C 模块，C 依赖于 A 模块，此时将出现循环依赖。在设计中应该避免这个问题，可通过引入“中介者模式”解决该问题。\n</code></pre></li>\n<li>共同封装原则（Common Closure Principle - CCP）<pre><code>应该将易变的类放在同一个包里，将变化隔离出来。该原则是“开放-封闭原则”的延生。\n</code></pre></li>\n<li>共同重用原则（Common Reuse Principle - CRP）<pre><code>如果重用了包中的一个类，那么也就相当于重用了包中的所有类，我们要尽可能减小包的大小。\n</code></pre></li>\n<li>好莱坞原则（Hollywood Principle - HP）<pre><code>好莱坞明星的经纪人一般都很忙，他们不想被打扰，往往会说：Don&apos;t call me, I&apos;ll call you. 翻译为：不要联系我，我会联系你。对应于软件设计而言，最著名的就是“控制反转”（或称为“依赖注入”），我们不需要在代码中主动的创建对象，而是由容器帮我们来创建并管理这些对象。\n</code></pre></li>\n</ol>\n</li>\n</ol>\n<p>其它设计原则</p>\n<ol>\n<li>不要重复你自己（Don’t repeat yourself - DRY）<pre><code>不要让重复的代码到处都是，要让它们足够的重用，所以要尽可能地封装。\n</code></pre></li>\n<li>保持它简单与傻瓜（Keep it simple and stupid - KISS）<pre><code>不要让系统变得复杂，界面简洁，功能实用，操作方便，要让它足够的简单，足够的傻瓜。\n</code></pre></li>\n<li>高内聚与低耦合（High Cohesion and Low Coupling - HCLC）<pre><code>模块内部需要做到内聚度高，模块之间需要做到耦合度低。\n</code></pre></li>\n<li>惯例优于配置（Convention over Configuration - COC）<pre><code>尽量让惯例来减少配置，这样才能提高开发效率，尽量做到“零配置”。很多开发框架都是这样做的。\n</code></pre></li>\n<li>命令查询分离（Command Query Separation - CQS）<pre><code>在定义接口时，要做到哪些是命令，哪些是查询，要将它们分离，而不要揉到一起。\n</code></pre></li>\n<li>关注点分离（Separation of Concerns - SOC）<pre><code>将一个复杂的问题分离为多个简单的问题，然后逐个解决这些简单的问题，那么这个复杂的问题就解决了。难就难在如何进行分离。\n</code></pre></li>\n<li>契约式设计（Design by Contract - DBC）<pre><code>模块或系统之间的交互，都是基于契约（接口或抽象）的，而不要依赖于具体实现。该原则建议我们要面向契约编程。\n</code></pre></li>\n<li>你不需要它（You aren’t gonna need it - YAGNI）<pre><code>不要一开始就把系统设计得非常复杂，不要陷入“过度设计”的深渊。应该让系统足够的简单，而却又不失扩展性，这是其中的难点。\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是设计模式\"><a href=\"#什么是设计模式\" class=\"headerlink\" title=\"什么是设计模式\"></a>什么是设计模式</h2><ol>\n<li>定义<br>基本定义：设计模式（Design pattern）是一套被反复使用的代码设计经验的总结。使用设计模式的目的是为了可重用代码、让代码更容易被他人理解。设计模式是是软件工程的基石脉络，如大厦的结构一样<br>Design pattern的四大要素：模式名称（Name），问题（Question），解决方案（Solution），效果（Efftive）。<br>OO（面向对象）的六大原则：单一职责原则，开闭原则，里氏替换原则，依赖倒置原则，接口隔离原则，迪米特原则。<pre><code>单一职责原则：一个类中应该是一组相关性很高的函数，数据的封装。两个完全不一样的功能就不应该放在一个类中。\n开闭原则：对修改封闭，对扩展放开。\n里氏替换原则：抽象和继承；所有引用基类的地方必须能透明的使用其子类的对象。\n依赖倒置原则：抽象不应该依赖细节，细节应该依赖抽象。\n接口隔离原则：将大接口改成多个小接口。\n迪米特原则：也称为最少知识原则，一个对象应该对另一个对象有最少的了解。\n</code></pre></li>\n<li>分类<br>设计模式分为三种类型：<pre><code>创建型模式5种：单例模式，抽象工厂模式，工厂模式，原型模式，建造者模式。（口诀：单原建造者，东西二厂）\n结构型模式7种：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式。（口诀：一器一桥一元一代理；装饰组合外观）\n行为型模式11种：观察者模式，中介者模式，访问者模式，解释器模式，迭代器模式，备忘录模式，责任链模式，状态模式，策略模式，命令模式，模板模式。（口诀：三者两器、一录一链一模板，状态策略命令）\n</code></pre><h2 id=\"功能模块设计原则\"><a href=\"#功能模块设计原则\" class=\"headerlink\" title=\"功能模块设计原则\"></a>功能模块设计原则</h2></li>\n<li>单一职责原则（Single Responsibility Principle - SRP）<pre><code>原文：There should never be more than one reason for a class to change.\n译文：永远不应该有多于一个原因来改变某个类。\n理解：对于一个类而言，应该仅有一个引起它变化的原因。说白了就是，不同的类具备不同的职责，各施其责。这就好比一个团队，大家分工协作，互不影响，各做各的事情。\n应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！\n</code></pre></li>\n<li>开放封闭原则（Open Closed Principle - OCP）<pre><code>原文：Software entities like classes, modules and functions should be open for extension but closed for modifications.\n译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。\n理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。\n应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。\n</code></pre></li>\n<li>里氏替换原则（Liskov Substitution Principle - LSP）<pre><code>原文：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.\n译文：使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。\n理解：父类能够替换子类，但子类不一定能替换父类。也就是说，在代码中可以将父类全部替换为子类，程序不会报错，也不会在运行时出现任何异常，但反过来却不一定成立。\n应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。\n</code></pre></li>\n<li>最少知识原则（Least Knowledge Principle - LKP）<pre><code>原文：Only talk to you immediate friends.\n译文：只与你最直接的朋友交流。\n理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。\n应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。\n</code></pre></li>\n<li>接口隔离原则（Interface Segregation Principle - ISP）<pre><code>原文：The dependency of one class to another one should depend on the smallest possible interface.\n译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。、理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。\n应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。\n</code></pre></li>\n<li>依赖倒置原则（Dependence Inversion Principle - DIP）<pre><code>原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.\n译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。\n理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。\n应用：并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程吧。\n------&gt;------&gt;------&gt;------&gt;------&gt;------&gt;------&gt;\n将以上六大原则的英文首字母拼在一起就是 SOLID（稳定的），所以也称之为 SOLID 原则。只有满足了这六大原则，才能设计出稳定的软件架构！但它们毕竟只是原则，只是四人帮给我们的建议，有些时候我们还是要学会灵活应变，千万不要生搬硬套，否则只会把简单问题复杂化\n</code></pre>补充设计原则<ol>\n<li>组合/聚合复用原则（Composition/Aggregation Reuse Principle - CARP）<pre><code>当要扩展类的功能时，优先考虑使用组合，而不是继承。这条原则在 23 种经典设计模式中频繁使用，如：代理模式、装饰模式、适配器模式等。可见江湖地位非常之高！\n</code></pre></li>\n<li>无环依赖原则（Acyclic Dependencies Principle - ADP）<pre><code>当 A 模块依赖于 B 模块，B 模块依赖于 C 模块，C 依赖于 A 模块，此时将出现循环依赖。在设计中应该避免这个问题，可通过引入“中介者模式”解决该问题。\n</code></pre></li>\n<li>共同封装原则（Common Closure Principle - CCP）<pre><code>应该将易变的类放在同一个包里，将变化隔离出来。该原则是“开放-封闭原则”的延生。\n</code></pre></li>\n<li>共同重用原则（Common Reuse Principle - CRP）<pre><code>如果重用了包中的一个类，那么也就相当于重用了包中的所有类，我们要尽可能减小包的大小。\n</code></pre></li>\n<li>好莱坞原则（Hollywood Principle - HP）<pre><code>好莱坞明星的经纪人一般都很忙，他们不想被打扰，往往会说：Don&apos;t call me, I&apos;ll call you. 翻译为：不要联系我，我会联系你。对应于软件设计而言，最著名的就是“控制反转”（或称为“依赖注入”），我们不需要在代码中主动的创建对象，而是由容器帮我们来创建并管理这些对象。\n</code></pre></li>\n</ol>\n</li>\n</ol>\n<p>其它设计原则</p>\n<ol>\n<li>不要重复你自己（Don’t repeat yourself - DRY）<pre><code>不要让重复的代码到处都是，要让它们足够的重用，所以要尽可能地封装。\n</code></pre></li>\n<li>保持它简单与傻瓜（Keep it simple and stupid - KISS）<pre><code>不要让系统变得复杂，界面简洁，功能实用，操作方便，要让它足够的简单，足够的傻瓜。\n</code></pre></li>\n<li>高内聚与低耦合（High Cohesion and Low Coupling - HCLC）<pre><code>模块内部需要做到内聚度高，模块之间需要做到耦合度低。\n</code></pre></li>\n<li>惯例优于配置（Convention over Configuration - COC）<pre><code>尽量让惯例来减少配置，这样才能提高开发效率，尽量做到“零配置”。很多开发框架都是这样做的。\n</code></pre></li>\n<li>命令查询分离（Command Query Separation - CQS）<pre><code>在定义接口时，要做到哪些是命令，哪些是查询，要将它们分离，而不要揉到一起。\n</code></pre></li>\n<li>关注点分离（Separation of Concerns - SOC）<pre><code>将一个复杂的问题分离为多个简单的问题，然后逐个解决这些简单的问题，那么这个复杂的问题就解决了。难就难在如何进行分离。\n</code></pre></li>\n<li>契约式设计（Design by Contract - DBC）<pre><code>模块或系统之间的交互，都是基于契约（接口或抽象）的，而不要依赖于具体实现。该原则建议我们要面向契约编程。\n</code></pre></li>\n<li>你不需要它（You aren’t gonna need it - YAGNI）<pre><code>不要一开始就把系统设计得非常复杂，不要陷入“过度设计”的深渊。应该让系统足够的简单，而却又不失扩展性，这是其中的难点。\n</code></pre></li>\n</ol>\n"},{"title":"找到的几个Android学习网站","author":"大帅","date":"2018-05-24T02:50:00.000Z","_content":"[Android Studio使用相关的资料](http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2)\n\n[查看文档之类的](https://developers.google.cn/products/)\n\n[应用的基本概念](https://developers.google.cn/android/for-all/vocab-words/)\n\n[gradle学习资料](http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2)\n\n[中文Android学习资料网站大全](http://www.androiddevtools.cn/index.html)","source":"_posts/的几个Android学习网站.md","raw":"title: 找到的几个Android学习网站\nauthor: 大帅\ntags:\n  - Android\ncategories:\n  - 学习网站\ndate: 2018-05-24 10:50:00\n---\n[Android Studio使用相关的资料](http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2)\n\n[查看文档之类的](https://developers.google.cn/products/)\n\n[应用的基本概念](https://developers.google.cn/android/for-all/vocab-words/)\n\n[gradle学习资料](http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2)\n\n[中文Android学习资料网站大全](http://www.androiddevtools.cn/index.html)","slug":"的几个Android学习网站","published":1,"updated":"2018-05-24T02:57:15.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhlnkyy0001px8w5nqbbt42y","content":"<p><a href=\"http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2\" target=\"_blank\" rel=\"noopener\">Android Studio使用相关的资料</a></p>\n<p><a href=\"https://developers.google.cn/products/\" target=\"_blank\" rel=\"noopener\">查看文档之类的</a></p>\n<p><a href=\"https://developers.google.cn/android/for-all/vocab-words/\" target=\"_blank\" rel=\"noopener\">应用的基本概念</a></p>\n<p><a href=\"http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2\" target=\"_blank\" rel=\"noopener\">gradle学习资料</a></p>\n<p><a href=\"http://www.androiddevtools.cn/index.html\" target=\"_blank\" rel=\"noopener\">中文Android学习资料网站大全</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2\" target=\"_blank\" rel=\"noopener\">Android Studio使用相关的资料</a></p>\n<p><a href=\"https://developers.google.cn/products/\" target=\"_blank\" rel=\"noopener\">查看文档之类的</a></p>\n<p><a href=\"https://developers.google.cn/android/for-all/vocab-words/\" target=\"_blank\" rel=\"noopener\">应用的基本概念</a></p>\n<p><a href=\"http://ask.android-studio.org/?/explore/sort_type-new__category-7__day-0__page-2\" target=\"_blank\" rel=\"noopener\">gradle学习资料</a></p>\n<p><a href=\"http://www.androiddevtools.cn/index.html\" target=\"_blank\" rel=\"noopener\">中文Android学习资料网站大全</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/妞妞照片/001.jpg","slug":"001.jpg","post":"cjhlnkyxs001fx8w5kpa1zz23","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjhlnkywq0009x8w5jgzyktjy","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyx3000gx8w56hey851g"},{"post_id":"cjhlnkywe0002x8w56l08tmnl","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyx7000kx8w52ghvzzbt"},{"post_id":"cjhlnkywr000ax8w5hcm5530z","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyx9000nx8w5hogqbs78"},{"post_id":"cjhlnkywy000ex8w5omj9crln","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyxc000qx8w5fs1epphw"},{"post_id":"cjhlnkywj0004x8w5m0m5ry27","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyxe000ux8w5wayiul0y"},{"post_id":"cjhlnkyx2000fx8w51e1bwgdl","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyxg000xx8w5u0ppl381"},{"post_id":"cjhlnkywo0008x8w5uxkzae9h","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyxi0011x8w5n0weirtl"},{"post_id":"cjhlnkyx8000mx8w59rjp1axe","category_id":"cjhlnkyxd000sx8w5diy7ycog","_id":"cjhlnkyxm0016x8w57ks8ev4v"},{"post_id":"cjhlnkyxb000px8w5ejlds95s","category_id":"cjhlnkyxi0010x8w5arpnfg0w","_id":"cjhlnkyxq001cx8w5rtyfzl7t"},{"post_id":"cjhlnkyxl0015x8w5be31e85g","category_id":"cjhlnkyxo0019x8w52c8kpuxb","_id":"cjhlnkyxy001mx8w5g1er7krl"},{"post_id":"cjhlnkyxv001ix8w5zl89htz9","category_id":"cjhlnkywm0006x8w5icv26nzb","_id":"cjhlnkyy1001qx8w5ihvokbys"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","category_id":"cjhlnkyxo0019x8w52c8kpuxb","_id":"cjhlnkyy3001ux8w5s54ei8jq"},{"post_id":"cjhlnkyxp001ax8w5s61s1d5z","category_id":"cjhlnkyxx001lx8w5wozgdcrd","_id":"cjhlnkyy4001wx8w5wf7vus3c"},{"post_id":"cjhlnkyxs001fx8w5kpa1zz23","category_id":"cjhlnkyy2001sx8w56cdez3pv","_id":"cjhlnkyy50020x8w5u2p4mgwf"},{"post_id":"cjhlnkyxz001ox8w5l8cidsd1","category_id":"cjhlnkyy4001yx8w55inzyap9","_id":"cjhlnkyy70024x8w5n498opf9"},{"post_id":"cjhlnkyy0001px8w5nqbbt42y","category_id":"cjhlnkyy60022x8w5jkoqxprt","_id":"cjhlnkyy80027x8w50u42o0zd"}],"PostTag":[{"post_id":"cjhlnkywe0002x8w56l08tmnl","tag_id":"cjhlnkywo0007x8w55zw9z9et","_id":"cjhlnkywx000dx8w5gqqdr4os"},{"post_id":"cjhlnkywj0004x8w5m0m5ry27","tag_id":"cjhlnkywu000cx8w51sb4m318","_id":"cjhlnkyx7000lx8w5960uv6sl"},{"post_id":"cjhlnkywo0008x8w5uxkzae9h","tag_id":"cjhlnkyx5000ix8w5w2qqz6k9","_id":"cjhlnkyxd000rx8w5g85t86kz"},{"post_id":"cjhlnkywq0009x8w5jgzyktjy","tag_id":"cjhlnkyxb000ox8w5vy7heynx","_id":"cjhlnkyxh000yx8w5zy81wyz1"},{"post_id":"cjhlnkywr000ax8w5hcm5530z","tag_id":"cjhlnkyxf000vx8w5ta2ogtju","_id":"cjhlnkyxl0014x8w5aof80j0o"},{"post_id":"cjhlnkywy000ex8w5omj9crln","tag_id":"cjhlnkyxk0013x8w54sxpsmt1","_id":"cjhlnkyxq001bx8w52iu2pr67"},{"post_id":"cjhlnkyx2000fx8w51e1bwgdl","tag_id":"cjhlnkyxo0018x8w5m2opx13u","_id":"cjhlnkyxu001hx8w5epdcorha"},{"post_id":"cjhlnkyx8000mx8w59rjp1axe","tag_id":"cjhlnkyxs001ex8w5u3sshpie","_id":"cjhlnkyxz001nx8w5pskrcpfx"},{"post_id":"cjhlnkyxz001ox8w5l8cidsd1","tag_id":"cjhlnkywo0007x8w55zw9z9et","_id":"cjhlnkyy2001tx8w5h73qi47a"},{"post_id":"cjhlnkyxb000px8w5ejlds95s","tag_id":"cjhlnkyxw001jx8w5mftla3i0","_id":"cjhlnkyy3001vx8w5lchoadpd"},{"post_id":"cjhlnkyxf000wx8w5a3dlxq05","tag_id":"cjhlnkyy1001rx8w52rw7ti0e","_id":"cjhlnkyy5001zx8w5g28okf8j"},{"post_id":"cjhlnkyxj0012x8w578bilf1p","tag_id":"cjhlnkyy4001xx8w5n6qqs0lu","_id":"cjhlnkyy60023x8w5xlsfrtin"},{"post_id":"cjhlnkyxl0015x8w5be31e85g","tag_id":"cjhlnkyy50021x8w57sownl9q","_id":"cjhlnkyy70026x8w5aqu63jr3"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyy70025x8w5k53nd409","_id":"cjhlnkyye002gx8w5ppvd8sux"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyy80028x8w57cspjbes","_id":"cjhlnkyye002hx8w5nnmms0yq"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyy90029x8w5q2ymlxww","_id":"cjhlnkyyf002jx8w561g5bymn"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyya002ax8w58ompfyux","_id":"cjhlnkyyf002kx8w5qdkwgc6q"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyyb002bx8w5a1jfkka0","_id":"cjhlnkyyg002mx8w5zkob60mm"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyyc002cx8w50ta7t5ed","_id":"cjhlnkyyh002nx8w592dg86ii"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyyc002dx8w5q764nrnm","_id":"cjhlnkyyh002px8w50zng8qxl"},{"post_id":"cjhlnkyxn0017x8w5ut0rc2zr","tag_id":"cjhlnkyyd002ex8w5lh9nb8v0","_id":"cjhlnkyyi002qx8w5tf89ffdz"},{"post_id":"cjhlnkyxp001ax8w5s61s1d5z","tag_id":"cjhlnkyyd002fx8w59as7h1mt","_id":"cjhlnkyyj002sx8w5935mgm2m"},{"post_id":"cjhlnkyxs001fx8w5kpa1zz23","tag_id":"cjhlnkyyf002ix8w52isdhrwh","_id":"cjhlnkyyj002tx8w5czuwoecx"},{"post_id":"cjhlnkyxv001ix8w5zl89htz9","tag_id":"cjhlnkyyg002lx8w5zjwm5hnb","_id":"cjhlnkyyk002ux8w51kmm7aqb"},{"post_id":"cjhlnkyxw001kx8w59uw5yomu","tag_id":"cjhlnkyyf002ix8w52isdhrwh","_id":"cjhlnkyyk002vx8w58v4hb0q0"},{"post_id":"cjhlnkyy0001px8w5nqbbt42y","tag_id":"cjhlnkyyi002rx8w5sb7rde0x","_id":"cjhlnkyyl002wx8w5414o6bci"}],"Tag":[{"name":"设计模式","_id":"cjhlnkywo0007x8w55zw9z9et"},{"name":"网络发现","_id":"cjhlnkywu000cx8w51sb4m318"},{"name":"FileProvider","_id":"cjhlnkyx5000ix8w5w2qqz6k9"},{"name":"颜色提取","_id":"cjhlnkyxb000ox8w5vy7heynx"},{"name":"statusBar","_id":"cjhlnkyxf000vx8w5ta2ogtju"},{"name":"log","_id":"cjhlnkyxk0013x8w54sxpsmt1"},{"name":"网络","_id":"cjhlnkyxo0018x8w5m2opx13u"},{"name":"反射","_id":"cjhlnkyxs001ex8w5u3sshpie"},{"name":"markdown","_id":"cjhlnkyxw001jx8w5mftla3i0"},{"name":"git","_id":"cjhlnkyy1001rx8w52rw7ti0e"},{"name":"给自己","_id":"cjhlnkyy4001xx8w5n6qqs0lu"},{"name":"git基础理论","_id":"cjhlnkyy50021x8w57sownl9q"},{"name":"pull","_id":"cjhlnkyy70025x8w5k53nd409"},{"name":"commit","_id":"cjhlnkyy80028x8w57cspjbes"},{"name":"status","_id":"cjhlnkyy90029x8w5q2ymlxww"},{"name":"init","_id":"cjhlnkyya002ax8w58ompfyux"},{"name":"clone","_id":"cjhlnkyyb002bx8w5a1jfkka0"},{"name":"reset","_id":"cjhlnkyyc002cx8w50ta7t5ed"},{"name":"merge","_id":"cjhlnkyyc002dx8w5q764nrnm"},{"name":"add","_id":"cjhlnkyyd002ex8w5lh9nb8v0"},{"name":"引用","_id":"cjhlnkyyd002fx8w59as7h1mt"},{"name":"妞妞","_id":"cjhlnkyyf002ix8w52isdhrwh"},{"name":"MulticastSocket","_id":"cjhlnkyyg002lx8w5zjwm5hnb"},{"name":"Android","_id":"cjhlnkyyi002rx8w5sb7rde0x"}]}}